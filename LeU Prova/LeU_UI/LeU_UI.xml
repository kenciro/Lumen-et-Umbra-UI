<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Communications</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>99</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Personal communications</name>
				<script>ui.fDebug("[trig] Personal communications")
--
local from = copy2decho(matches[2])
local to = copy2decho(matches[3])
local message = copy2decho(matches[4])
local m
--
if (matches[2] == "["..ui.player.name.."]") then
  from = string.gsub(from, ui.player.name, "Tu")
  from = string.gsub(from, "]\&lt;r\&gt;", "]")
  from = from.." a "..matches[3].."\&lt;r\&gt;"
elseif (matches[2] == "Mandi") or (matches[2] == "Tu") then
  local color = string.gsub(from, matches[2].."\&lt;r\&gt;", "")
  from = color.."[\&lt;255,255,255:0,0,0\&gt;Tu"..color.."]".." a \&lt;255,255,255:0,0,0\&gt;"..matches[3].."\&lt;r\&gt;"
else
  --
  -- Save who Reply
  ui.reply = matches[2];
  ui.reply = string.gsub(ui.reply, "%[", "")
  ui.reply = string.gsub(ui.reply, "%]", "")
  ui.reply = string.gsub(ui.reply, ",", "")
  ui.reply = ui.fRemoveArticle(ui.reply)
  ui.reply = string.sub(ui.reply, 1, string.find(ui.reply, " "))
end
--
-- Private Chat
if (ui.previous.fromPrivate) and (ui.previous.fromPrivate == from) then
  m = "  "..message.."\n"
else
  m = "\n"..from.." &lt;128,128,128:"..ui.colors.wBackground.."&gt;"..os.date("%H:%M:%S").."\n  "..message.."\n"
  ui.previous.fromPrivate = from
end
--
m = string.gsub(m, ":0,0,0&gt;", ":"..ui.colors.wBackground.."&gt;")
m = string.gsub(m, "&lt;0,0,255:", "&lt;128,128,255:")
--
GUI.Chat.Main.Private:decho(m)
--
-- "All" Chat
if (ui.previous.fromAll) and (ui.previous.fromAll == from) then
  m = "  "..message.."\n"
else
  m = "\n"..from.." &lt;128,128,128:"..ui.colors.wBackground.."&gt;"..os.date("%H:%M:%S").."\n  "..message.."\n"
  ui.previous.fromAll = from
end
--
m = string.gsub(m, ":0,0,0&gt;", ":"..ui.colors.wBackground.."&gt;")
m = string.gsub(m, "&lt;0,0,255:", "&lt;128,128,255:")
--
GUI.Chat.Main.All:decho(m)
--
-- Sound
playSoundFile(ui.files.sounds.path..[[message.wav]], 10)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(Mandi) a (.*) il (?:pensiero|messaggio) (\'.*\')$</string>
					<string>^(Tu) (?:chiedi|dici|sussurri) (?:a|ai|al|alla|alle|agli) (.*) (\'.*\')$</string>
					<string>^(\[.*\]) (ti) (?:manda il messaggio|manda il pensiero|chiede|dice|sussurra) (\'.*\')$</string>
					<string>^(\[.*\]) dice (?:a |ai |al |all'|alla |alle |agli )(.*) (\'.*\')$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Public  communication</name>
				<script>ui.fDebug("[trig] Public communication")
--
local str = copy2decho(matches[1])
local color = copy2decho(matches[2])
local from = copy2decho(matches[3])
local message = copy2decho(matches[4])
local m
-- Color
color = string.gsub(color, 'Tu&lt;r&gt;', '')
color = string.gsub(color, '%[&lt;r&gt;', '')
--
from = ui.fRemoveArticle(from)
--
-- Public Chat
if (ui.previous.fromPublic) and (ui.previous.fromPublic == from) then
  m = "  "..message.."\n"
  m = string.gsub(m, ":0,0,0&gt;",    ":"..ui.colors.wBackground.."&gt;")
else
  m = str
  m = string.gsub(m, "&gt;Tu",      "&gt;[Tu]")
  m = string.gsub(m, "] grida ",   "]")
  m = string.gsub(m, "] esclama ", "]")
  m = string.gsub(m, "] mormora ", "]")
  m = string.gsub(m, "] vi dice ", "]")
  m = string.gsub(m, "] dice ",    "]")
  m = string.gsub(m, "] dici ",    "]")
  m = string.gsub(m, "] risuona ", "]")
  --
  m = string.gsub(m, "]",          "] &lt;128,128,128:"..ui.colors.wBackground.."&gt;"..os.date("%H:%M:%S").."\n  "..color)
  m = string.gsub(m, ":0,0,0&gt;",    ":"..ui.colors.wBackground.."&gt;")
  m = "\n"..m.."\n"
  ui.previous.fromPublic = from
end
--
GUI.Chat.Main.Public:decho(m)
--
-- "All" Chat
if (ui.previous.fromAll) and (ui.previous.fromAll == from) then
  m = "  "..message.."\n"
  m = string.gsub(m, ":0,0,0&gt;",    ":"..ui.colors.wBackground.."&gt;")
else
  m = str
  m = string.gsub(m, "&gt;Tu",      "&gt;[Tu]")
  m = string.gsub(m, "] grida ",   "]")
  m = string.gsub(m, "] esclama ", "]")
  m = string.gsub(m, "] mormora ", "]")
  m = string.gsub(m, "] vi dice ", "]")
  m = string.gsub(m, "] dice ",    "]")
  m = string.gsub(m, "] dici ",    "]")
  m = string.gsub(m, "] risuona ", "]")
  --
  m = string.gsub(m, "]",          "] &lt;128,128,128:"..ui.colors.wBackground.."&gt;"..os.date("%H:%M:%S").."\n  "..color)
  m = string.gsub(m, ":0,0,0&gt;",    ":"..ui.colors.wBackground.."&gt;")
  m = "\n"..m.."\n"
  ui.previous.fromAll = from
end
--
GUI.Chat.Main.All:decho(m)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>(^\[)(.*)\] (?:grida|esclama|mormora|vi dice|dice|risuona) (\'.*\')$</string>
					<string>(^(Tu)) (?:gridi|dici) (\'.*\')$</string>
					<string>(^\[)(.*)\] (\'.*\')$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Equipment</name>
			<script>ui.fDebug("[trig] Equipment start")
--
local preDefinitedEquipment = {
  ["come luce"]         = { slot = "Luce",      short = "LUC", used = false },
  ["mano destra"]       = { slot = "Mano",      short = "MAN", used = false },
  ["mano sinistra"]     = { slot = "Mano",      short = "MAN", used = false },
  ["al collo 1"]        = { slot = "Collo",     short = "COL", used = false },
  ["al collo 2"]        = { slot = "Collo",     short = "COL", used = false },
  ["sul corpo"]         = { slot = "Corpo",     short = "COR", used = false },
  ["in testa"]          = { slot = "Testa",     short = "TES", used = false },
  ["sulle gambe"]       = { slot = "Gambe",     short = "GAM", used = false },
  ["ai piedi"]          = { slot = "Piedi",     short = "PIE", used = false },
  ["sulle mani"]        = { slot = "Mani",      short = "MAN", used = false },
  ["sulle braccia"]     = { slot = "Braccia",   short = "BRA", used = false },
  ["come scudo"]        = { slot = "Scudo",     short = "SCU", used = false },
  ["attorno al corpo"]  = { slot = "Attorno",   short = "ATT", used = false },
  ["alla vita"]         = { slot = "Vita",      short = "VIT", used = false },
  ["polso destro"]      = { slot = "Polso",     short = "POL", used = false },
  ["polso sinistro"]    = { slot = "Polso",     short = "POL", used = false },
  ["impugnato"]         = { slot = "Arma",      short = "IMP", used = false },
  ["afferrato"]         = { slot = "Afferrato", short = "AFF", used = false },
  ["sulla schiena"]     = { slot = "Schiena",   short = "SCH", used = false },
  ["orecchio destro"]   = { slot = "Orecchie",  short = "ORE", used = false },
  ["orecchio sinistro"] = { slot = "Orecchie",  short = "ORE", used = false },
  ["sul viso"]          = { slot = "Viso",      short = "VIS", used = false },
  ["incoccato"]         = { slot = "Incoccato", short = "INC", used = false },
  ["come aura"]         = { slot = "Aura",      short = "AUR", used = false },}
--
ui.equipment = ui.equipment or {}
ui.equipment = table.update(ui.equipment, preDefinitedEquipment)
--
enableTrigger("equipment_valid")
enableTrigger("equipment_end")
</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>1</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^Stai usando:$</string>
				<string>^.* sta usando:$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>equipment_valid</name>
				<script>-- (?:\[(.*)\] )?\&lt;(.*)\&gt;.*\[(.*)\] (?:\|(.*)\| )?(.*)
-- match[1] = [2:numero] &lt;3:locazione&gt; [4:livello] |5:tipo| 6:descrizione
ui.fDebug("[trig] Equipment_valid")
--
local location  = string.trim(matches[3])
local slot = {}
--
if (location == "al collo") then
  if (not ui.equipment["al collo 1"].used) then
    location = "al collo 1"
  else
    location = "al collo 2"
  end
end
--
if (ui.equipment[location]) then
  --
  slot.number   = tonumber(string.trim(matches[2]))
  --
  -- Con il comando "eq manc" il numero e "X"
  if (slot.number) then
    slot.type     = string.gsub(copy2decho(matches[4]), ":0,0,0&gt;", ":"..ui.colors.wBackground.."&gt;")
    slot.level    = tonumber(string.trim(matches[5]))
    slot.status   = string.trim(matches[6])
    --
    if (matches[7] == "") then
      slot.name = ""
    else
      slot.name,
      slot.good,
      slot.evil,
      slot.bright,
      slot.noisy,
      slot.brittle  = ui.fParsingItem(copy2decho(matches[7]))
    end
    --
    ui.equipment[location].number = slot.number 
    ui.equipment[location].type = slot.type 
    ui.equipment[location].level = slot.level
    --
    slot.name = string.gsub(slot.name, ":0,0,0&gt;", ":"..ui.colors.wBackground.."&gt;")
    if (ui.fIsStatistics(slot.name)) then
      ui.equipment[location].name = ui.equipment[location].name or ui.equipment[location].slot
      ui.equipment[location].stat = slot.name;
    elseif(ui.equipment[location].name == nil) or (slot.name ~= ui.equipment[location].name) then
      ui.equipment[location].name = slot.name;
      ui.equipment[location].stat = nil;
    end
    --
    ui.equipment[location].status = slot.status
    ui.equipment[location].used = true;
  end
end
--
setTriggerStayOpen("Equipment", 1)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>\[(.*)\] \&lt;(.*)\&gt;.*\[(.*)\|(.*)\|(.*)\] (.*)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>equipment_end</name>
				<script>ui.fDebug("[trig] Equipment_end")
--
ui.fUpdateEndowment()
--
disableTrigger("equipment_valid")
disableTrigger("equipment_invalid")
disableTrigger("equipment_end")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Il livello di potenza medio del tuo equipaggiamento e' .*$</string>
					<string>^    Nulla.$</string>
					<string>^$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Identification</name>
			<script>ui.fDebug("[trig] Identification")
--
ui.identification = {}
ui.identification.name = matches[2]
ui.identification.type = matches[3]
--
enableTrigger("identification_valid")
enableTrigger("identification_invalid")
enableTrigger("identification_end")</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>1</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#00aaff</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^(.+) \(.+\), Tipologia: (.+).$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
			</regexCodePropertyList>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>identification_valid</name>
				<script>ui.fDebug("[trig] identification_valid")
--
if (matches[2] == "Indossabilita") then
  ui.identification.slot = string.trim(matches[3])
  if (ui.identification.slot == "") then ui.identification.slot = ui.identification.type end
elseif (matches[2] == "bonus all'Armatura") then
  ui.identification.bonus = ui.identification.bonus or {}
  ui.identification.bonus[#ui.identification.bonus+1] = string.trim(matches[3]).." Classe Armatura"
elseif (matches[2] == "Causa") then
  ui.identification.bonus = ui.identification.bonus or {}
  ui.identification.bonus[#ui.identification.bonus+1] = string.trim(matches[3]).." Danno ("..string.trim(matches[4])..")"
else
  ui.identification.bonus = ui.identification.bonus or {}
  ui.identification.bonus[#ui.identification.bonus+1] = string.trim(matches[3]).." ("..string.trim(matches[2])..")"
end
--
setTriggerStayOpen("Identification", 1)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#000000</mFgColor>
				<mBgColor>#00ff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(Indossabilita)` : ?(.+).$</string>
					<string>^Garantisce un (bonus all'Armatura) di (.+).$</string>
					<string>^(Causa) (.+) danni \(Media: .+\) di tipologia (.+).$</string>
					<string>^\[.+\]\[(.+)\] (.+)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>identification_invalid</name>
				<script>ui.fDebug("[trig] identification_invalid")
--
setTriggerStayOpen("Identification", 1)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#000000</mFgColor>
				<mBgColor>#ff5500</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^$</string>
					<string>Contribuisce .+ al limite per gli oggetti indossabili.</string>
					<string>Percorso .+ \(.+\/.+\): .+ </string>
					<string>Pesa .+ etti e vale .+ monete d'oro.</string>
					<string>Indice di danneggiamento: .+\/100</string>
					<string>Conferisce i Poteri:</string>
					<string>Richiede .+ per essere utilizzato.</string>
					<string>Guadagna .+\% del danno fisico e .+\% del potere magico.</string>
					<string>Con il tuo equipaggiamento, questo corrisponde a .+ danni aggiuntivi.</string>
					<string>Puo` essere utilizzato solo da .+.</string>
					<string>Puo` contenere .+ etti.</string>
					<string>Indice di danneggiamento: .+.</string>
					<string>Causa i seguenti effetti con potenza .+:</string>
					<string>  .+</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>identification_end</name>
				<script>ui.fDebug("[trig] identification_end")
--
ui.identification.level = matches[2]
ui.fUpdateEndowment()
--
disableTrigger("identification_valid")
disableTrigger("identification_invalid")
disableTrigger("identification_end")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#000000</mFgColor>
				<mBgColor>#0000ff</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Il livello di potenza complessivo di questo oggetto e` (.+).$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Track</name>
			<script>ui.fDebug("[trig] Track")
--
ui.track = ""
--
if (matches[2]) and (ui.validExit[string.lower(matches[2])]) then
  ui.track = ui.validExit[string.lower(matches[2])].short
end
--
ui.fUpdateRoom()</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^Vedi una traccia della tua preda che va verso (?:l'|il )?(.*).$</string>
				<string>^Vedi una debole traccia verso (?:l'|il )?(.*)$</string>
				<string>^Cio' che cerchi e' gia' qui!$</string>
				<string>^Non riesci a trovare tracce.$</string>
				<string>^Hai trovato la tua preda!$</string>
				<string>^Hai perso la traccia.$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>UI Aliases</name>
			<script>local alias = matches[2] or ""
local value = matches[3] or ""
--
-- Shows all aliases
if (alias == "") then
  ui.fShowAllAliases()
--
-- Delete all aliases
elseif (alias == "remove_all") then
  ui.fRemoveAllAliases()
  ui.fEcho2n("Tutti gli alias sono stati rimossi.")
--
-- Show single alias
elseif (value == "") then
  if (ui.aliases[alias]) then
    ui.fEcho2n(ui.fGetAliasFormattedText(alias))
  else
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(alias).." non esiste.")
  end
--
-- Remove single alias
elseif value == "remove" then
  if (ui.fRemoveAlias(alias)) then
    ui.fEcho2n("L'alias "..ui.fGetAliasNameFormattedText(alias).." e' stato rimosso.")
  else
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(alias).." non esiste.")
  end
--
-- Create o modify an alias
else
  local alreadyExist = ui.aliases[alias];
  local result, output = ui.fAddAlias(alias, value)
  if (result == -1) then
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(alias).." non è stato creato/modificato. La variabile "..ui.fGetVarNameFormattedText(output).." non esiste.")
  elseif (result == 1) then
    if (alreadyExist) then
      ui.fEcho2n("L'alias "..ui.fGetAliasNameFormattedText(alias).." è stato modificato: "..output..".")
    else
      ui.fEcho2n("L'alias "..ui.fGetAliasNameFormattedText(alias).." è stato creato: "..output..".")
    end
  else
    ui.fError("Errore non previsto.")
  end
end
--
ui.fSaveFileAliases()
ui.fUpdateAliasButton()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uia(?:l(?:i(?:a(?:s(?:e(?:s)?)?)?)?)?)?)(?:\s+(\w*)\s*(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Buttons (configurazione)</name>
			<script>local button = matches[2] or ""
local alias = matches[3] or ""
--
-- Shows all alias button
if (button == "") then
  ui.fShowAllAliasButtons()
--
-- Delete all alias buttons
elseif (button == "remove_all") then
  ui.fRemoveAllAliasButtons()
  ui.fEcho2n("Tutti i pulsanti alias sono stati rimossi.")
--
-- Show single alias button
elseif (alias == "") then
  local type, number = ui.fExpandButton(button)
  if (type == "a") or (type == "b") or (type == "c") then
    button = type..number
    local alias = ui.fSearchAliasButton(button)
    if (alias) then
      ui.fEcho("")
      ui.fLinkAliasButton(button)
      echo("\n\n")
    else
      ui.fEcho2n("Nessun alias associato al pulsante "..ui.fGetAliasButtonFormattedText(button)..".")
    end
  else
    ui.fError(ui.fGetAliasButtonFormattedText(button).." non è un pulsante valido.")
  end
--
-- Delete single alias button
elseif (alias == "remove") then
  local result = ui.fRemoveAliasButton(button)
  if (result == -2) then
    ui.fEcho2n("Nessun alias da rimuovere per il pulsante "..ui.fGetAliasButtonFormattedText(button)..".")
  elseif (result == -1) then
    ui.fError(ui.fGetAliasButtonFormattedText(button).." non è un pulsante valido.")
  elseif (result == 1) then
    ui.fEcho2n("L'alias associato al pulsante "..ui.fGetAliasButtonFormattedText(button).." è stato rimosso.")
  else
    ui.fError("Errore non previsto.")
  end
--
-- Create o modify an alias button
else
  local result = ui.fAssignAliasButton(button, alias)
  if (result == -2) then
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(alias).." non esiste.")
  elseif (result == -1) then
    ui.fError(ui.fGetAliasButtonFormattedText(button).." non è un pulsante valido.")
  elseif (result == 1) then
    ui.fEcho2n("Il pulsante "..ui.fGetAliasButtonFormattedText(button).." è stato associato all'alias "..ui.fGetAliasNameFormattedText(alias)..".")
  else
    ui.fError("Errore non previsto.")
  end
end
--
ui.fSaveFileAliases()
ui.fUpdateAliasButton()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uib(?:u(?:t(?:t(?:o(?:n(?:s)?)?)?)?)?)?)(?:\s+(\w*)\s*(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Buttons (esecuzione)</name>
			<script>ui.fExecuteAliasButton(matches[2])</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)([abc]\d)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Colors</name>
			<script>cecho(ui.fTitle("Colori disponibili:"))
ui.fDisplayColors({justText = false, removeDupes = true})</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uic(?:o(?:l(?:o(?:r(?:s)?)?)?)?)?)$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Font size</name>
			<script>local windows = string.lower(matches[2] or "")
local fontsize = tonumber(matches[3] or -1)
--
if (matches[3]) then
  if (fontsize &gt;= 1) and (fontsize &lt;= 30) then
    --
    -- ALL
    if (windows == "all") then
      --
      -- Chat
      GUI.Chat.Main.All:setFontSize(fontsize)
      GUI.Chat.Main.Public:setFontSize(fontsize)
      GUI.Chat.Main.Private:setFontSize(fontsize)
      ui.parameters.widgets.chat.fontSize = fontsize
      --
      -- Help
      GUI.Help.Main.Console:setFontSize(fontsize)
      ui.parameters.widgets.help.fontSize = fontsize
      --
      -- Overland
      GUI.Mapper.Main.Overland:setFontSize(fontsize)
      ui.parameters.widgets.overland.fontSize = fontsize
      --
      -- Room
      GUI.Room.Main.Console:setFontSize(fontsize)
      ui.parameters.widgets.room.fontSize = fontsize
    --
    -- Chat widget
    elseif (windows == "chat") then
      GUI.Chat.Main.All:setFontSize(fontsize)
      GUI.Chat.Main.Public:setFontSize(fontsize)
      GUI.Chat.Main.Private:setFontSize(fontsize)
      ui.parameters.widgets.chat.fontSize = fontsize
    --
    -- Help widget
    elseif (windows == "help") then
      GUI.Help.Main.Console:setFontSize(fontsize)
      ui.parameters.widgets.help.fontSize = fontsize
    --
    -- Overland widget
    elseif (windows == "overland") then
      GUI.Mapper.Main.Overland:setFontSize(fontsize)
      ui.parameters.widgets.overland.fontSize = fontsize
    --
    -- Room widget
    elseif (windows == "room") then
      GUI.Room.Main.Console:setFontSize(fontsize)
      ui.parameters.widgets.room.fontSize = fontsize
    --
    -- No existing widget
    else
      fontsize = 0
      ui.fError("Nome widget errato: Usare "..ui.fGetCommandFormattedText("All")..", "
                                            ..ui.fGetCommandFormattedText("Chat")..", "
                                            ..ui.fGetCommandFormattedText("Help")..", "
                                            ..ui.fGetCommandFormattedText("Overland")..", "
                                            ..ui.fGetCommandFormattedText("Room")..".")
    end
    --
    if (fontsize &gt; 0) then
      if (windows == "all") then
        ui.fEcho2n("La dimensione del font di tutti i widget e' stata impostata a "..ui.fGetCommandFormattedText(fontsize)..".")
      else
        ui.fEcho2n("La dimensione del font del widget "..ui.fGetCommandFormattedText(windows).." e' stata impostata a "..ui.fGetCommandFormattedText(fontsize)..".")
      end 
      ui.fSaveFileParameters()
    end
  else
    ui.fError("La dimensione del font e' errata: Usare un valore compreso tra "..ui.fGetCommandFormattedText("1").." e "..ui.fGetCommandFormattedText("30")..".")
  end
--
else
  cecho(ui.fTitle("Dimensioni font"))
  cecho(ui.fGetNumberFormattedText(1)..ui.fGetCommandFormattedText(" Chat")..ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.parameters.widgets.chat.fontSize).."\n");
  cecho(ui.fGetNumberFormattedText(3)..ui.fGetCommandFormattedText(" Help")..ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.parameters.widgets.help.fontSize).."\n");
  cecho(ui.fGetNumberFormattedText(5)..ui.fGetCommandFormattedText(" Overland")..ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.parameters.widgets.overland.fontSize).."\n");
  cecho(ui.fGetNumberFormattedText(7)..ui.fGetCommandFormattedText(" Room")..ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.parameters.widgets.room.fontSize).."\n\n");
  ui.fEcho2n("Usare "..ui.fGetCommandFormattedText("uisetf[ontsize] &lt;nome_finestra&gt; ")..ui.fGetVarValueFormattedText("&lt;dimensione_font&gt;"))
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uif(?:o(?:n(?:t(?:s(?:i(?:z(?:e)?)?)?)?)?)?)?)(?:\s*(\w+)?|$)(?:\s*(\w+)?|$)</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Go To Room</name>
			<script>local room = matches[2] or ui.room.id
--
-- No parameters
if (matches[2] == nil) then
  ui.fEcho2n("Specificare il nome o l'ID della stanza dove andare")
end
--
local result = ui.fSearchRoom(room)
local count = 0
local roomId
--
-- Count search result
for rId, _ in pairs(result) do 
  count = count + 1 
end
--
-- Not found
if (count == 0) then
  ui.fError("La stanza non esiste o non è stata ancora esplorata.")
--
-- Single result found
elseif (count == 1) then
  local roomId, roomName = next(result);  -- next = first an only
  local walkPath = {}
  local walkDirs = {}
  --
  ui.speedwalk.path = {}
  if getPath(getPlayerRoom(), roomId) then
    walkPath, walkDirs = ui.fPrepareSpeedWalk(speedWalkPath, speedWalkDir)
    --
    doSpeedWalk()
  else
    ui.fError("Impossibile da raggiungere")
  end
--
-- Multiple result
else
  ui.fShowRooms(result)
end
--
-- In any case update Area
ui.fHighlightArea(ui.room.areaId)
ui.fUpdateRoom()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uig(?:o)?)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Help</name>
			<script>local helpselect = string.lower(matches[2] or "")
--
--
if (helpselect == "") then
  ui.fHelp()
--
-- uihelp for uialias
elseif (rex.match(helpselect, [[(?i)(?:uia(?:l(?:i(?:a(?:s(?:e(?:s)?)?)?)?)?)?)$]])) then
  ui.fHelp("alias")
--
--  uihelp for uibutton
elseif (rex.match(helpselect, [[(?i)(uib(?:u(?:t(?:t(?:o(?:n(?:s)?)?)?)?)?)?)$]])) then
  ui.fHelp("button")
--
--  uihelp for uicolor
elseif (rex.match(helpselect, [[(?i)(?:uic(?:o(?:l(?:o(?:r(?:s?)?)?)?)?)?)$]])) then
  ui.fHelp("color")
--
--  uihelp for uifontsize
elseif (rex.match(helpselect, [[(?i)(?:uif(?:o(?:n(?:t(?:s(?:i(?:z(?:e)?)?)?)?)?)?)?)$]])) then
  ui.fHelp("fontsize")
--
--  uihelp for uihighlight
elseif (rex.match(helpselect, [[(?i)(?:uihi(?:g(?:h(?:l(?:i(?:g(?:h(?:t(?:s)?)?)?)?)?)?)?)?)$]])) then
  ui.fHelp("highlight")
--
--  uihelp for uikeybind
elseif (rex.match(helpselect, [[(?i)(?:uik(?:e(?:y(?:b(?:i(?:n(?:d)?)?)?)?)?)?)$]])) then
  ui.fHelp("keybind")
--
--  uihelp for target buttons
elseif (rex.match(helpselect, [[(?i)(?:t(?:a(?:r(?:g(?:e(?:t(?:s)?)?)?)?)?)?)$]])) then
  ui.fHelp("target")
--
--  uihelp for uiprofile
elseif (rex.match(helpselect, [[(?i)(?:uip(?:r(?:o(?:f(?:i(?:l(?:(?:e)?s)?)?)?)?)?)?)$]])) then
  ui.fHelp("profile")
--
--  uihelp for uivariable
elseif (rex.match(helpselect, [[(?i)(?:uiv(?:a(?:r(?:i(?:a(?:b(?:l(?:e)?)?)?)?)?)?)?|]]..ui.varID..[[)$]])) then
  ui.fHelp("variable")
--
--  uihelp for . or ..
elseif (rex.match(helpselect, [[^\.(?:\.)?$]])) then
  ui.fHelp("walk")
--
--  uihelp for widget
elseif (rex.match(helpselect, [[(?i)(?:uiw(?:i(?:d(?:g(?:e(?:t?)?)?)?)?)?)$]])) then
  ui.fHelp("widget")
--
-- no help for this command
else
  ui.fHelp(helpselect)
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uih(?:e(?:l(?:p)?)?)?)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Highlights</name>
			<script>--
local text = string.trim(matches[2] or "")
local color = string.trim(matches[3] or "")
--
if (color ~= "") and (color ~= "remove") then
  if (text == "") and (color == "remove_all") then
    text = "remove_all"
    color = ""
  elseif (text == "") and (color ~= "") then
    text = color
    color = ""
  elseif (text ~= "") and (not ui.fColorCheck(color)) then
    text = text.." "..color
    color = ""
  end
end
--
-- Shows all highlights
if (text == "") and (color == "") then
  ui.fShowAllHighlights()
--
-- Delete all highlights
elseif (text == "remove_all") then
  ui.fRemoveAllHighlights()
  ui.fEcho2n("Tutti gli highlight sono stati eliminati.")
--
-- Delete single highlight
elseif (color == "remove") then
  if (ui.fRemoveHighlight(text)) then
    ui.fEcho2n("L'highlight e' stato rimosso.")
  else
    ui.fError("L'highlight '"..text.."' non esiste.")
  end
--
-- Show single highlight
elseif (color == "") then
  if (ui.highlights[text]) then
    ui.fEcho2n(ui.fGetHighlightFormattedText(text))
  else
    ui.fError("L'highlight '"..text.."' non esiste.")
  end
--
-- Create or modify a Highlight
else
  local alreadyExist = ui.highlights[text];
  local result = ui.fAddHighlight(text, color)
  if (result == -2) then
    ui.fError("L'highlight '"..text.."' non è stato creato/modificato. Il colore '"..color.."' non è valido. Usare il comando "..ui.fGetCommandFormattedText("uicolor").." per l'elenco dei colori disponibili.")
  elseif (result == -1) then
    ui.fError("L'highlight '"..text.."' non è stato creato/modificato. Specificare un testo valido.")
  elseif (result == 1) then
    if (alreadyExist) then
      ui.fEcho2n("L'highlight &lt;"..color.."&gt;"..text.."&lt;r&gt; è stato modificato.")
    else
      ui.fEcho2n("L'highlight &lt;"..color.."&gt;"..text.."&lt;r&gt; è stato creato.")
    end
  else
    ui.fError("Errore non previsto.")
  end
end
--
ui.fSaveFileHighlights()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uihi(?:g(?:h(?:l(?:i(?:g(?:h(?:t(?:s)?)?)?)?)?)?)?)?)(?:\s?(.*)\s?( \w+))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Info room</name>
			<script>local room = matches[2] or ""
--
-- No parameters... show info about actual room
if (room == "") then
  ui.fRoomInfo()
else
  local result = ui.fSearchRoom(room)
  local count = 0
  local roomId
  --
  -- Count search result
  for rId, _ in pairs(result) do 
    roomId = rId
    count = count + 1 
  end
  --
  -- Not found
  if (count == 0) then
    ui.fError("La stanza non esiste o non è stata ancora esplorata.")
  --
  -- Single result found
  elseif (count == 1) then
    ui.fRoomInfo(roomId)
  --
  -- Multiple result
  else
    ui.fShowRooms(result)
  end
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uii(?:n(?:f(?:o)?)?)?)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Keybind</name>
			<script>local element = matches[2] or ""
local key1 = matches[3] or ""
local key2 = matches[4] or ""
local key3 = matches[5] or ""
local isValid, mod1, mod2, key, keybind = ui.fGetKeyb(key1, key2, key3)
--
-- Shows all keybind
if (element == "") then
  ui.fShowAllKeyb()
--
-- Delete all keybind
elseif (element == "remove_all") then
  ui.fRemoveAllKeyb()
  ui.fEcho2n("Tutti i tasti rapidi sono stati rimossi.")
--
-- Show single keybind
elseif (key1 == "") then
  --
  -- Target
  if (ui.targets[element]) then
    if (ui.targets[element].keybId) then
      ui.fEcho2n(ui.fGetTargetFormattedText(element))
    else
      ui.fEcho2n("Nessun tasto rapido è assegnato al target "..ui.fGetTargetFormattedText(element)..".")
    end
  --
  -- Alias
  elseif (ui.aliases[element]) then
    if (ui.aliases[element].keybId) then
      ui.fEcho2n(ui.fGetAliasFormattedText(element))
    else
      ui.fEcho2n("Nessun tasto rapido è assegnato all'alias "..ui.fGetAliasNameFormattedText(element)..".")
    end
  else
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(element).." non esiste.")
  end
--
-- Delete single keybind
elseif key1 == "remove" then
  local result
  --
  -- Target
  if (ui.targets[element]) then
    keybind = ui.targets[element].keybind
    result = ui.fRemoveKeyb(ui.targets[element])
    if (result == -2) then
      ui.fError("Il target non esiste.")
    elseif (result == -1) then
      ui.fEcho2n("Nessun tasto rapido assegnato al target "..ui.fGetTargetFormattedText(element).." da rimuovere.")
    elseif (result == 1) then
      ui.fEcho2n("Il tasto rapido "..ui.fGetKeybFormattedText(keybind)..", associato al target "..ui.fGetTargetFormattedText(element)..", e' stato rimosso.")
    else
      ui.fError("Errore non previsto.")
    end
  --
  -- Alias
  elseif (ui.aliases[element]) then
    keybind = ui.aliases[element].keybind
    result = ui.fRemoveKeyb(ui.aliases[element])
    if (result == -2) then
      ui.fError("L'alias non esiste.")
    elseif (result == -1) then
      ui.fEcho2n("Nessun tasto rapido assegnato all'alias "..ui.fGetAliasNameFormattedText(element).." da rimuovere.")
    elseif (result == 1) then
      ui.fEcho2n("Il tasto rapido "..ui.fGetKeybFormattedText(keybind)..", associato all'alias "..ui.fGetAliasNameFormattedText(element)..", e' stato rimosso.")
    else
      ui.fError("Errore non previsto.")
    end
  else
    ui.fError("L'alias "..ui.fGetAliasNameFormattedText(element).." non esiste o non è associato a nessun tasto rapido.")
  end
--
-- Create or delete a keybind
else
  local result, keybind, isTarget
  if (ui.targets[element]) then
    isTarget = true
    result, keybind = ui.fSetKeyb(ui.targets, element, [[ui.fExecuteTargetButton("]]..element..[[")]], key1, key2, key3)
  else
    isTarget = false
    result, keybind = ui.fSetKeyb(ui.aliases, element, ui.aliases[element].code, key1, key2, key3)
  end
  --
  if (result == -4) then
    ui.fError("Il tasto rapido non è stato assegnato. La combinazione di tasti "..ui.fGetKeybFormattedText(keybind).." è già utilizzata in un alias.")
  elseif (result == -3) then
    ui.fError("Il tasto rapido non è stato assegnato. La combinazione di tasti "..ui.fGetKeybFormattedText(keybind).." è già utilizzata in un target.")
  elseif (result == -2) then
    ui.fError("Il tasto rapido non è stato assegnato. La combinazione di tasti "..ui.fGetKeybFormattedText(keybind).." non è valida.")
  elseif (result == -1) then
    ui.fError("Il tasto rapido non è stato assegnato. L'alias "..ui.fGetAliasNameFormattedText(element).." non esiste.")
  elseif (result == 1) and (isTarget) then
    ui.fEcho2n("Il tasto rapido è stato assegnato al target "..ui.fGetTargetFormattedText(element)..".")
  elseif (result == 1) and (not isTarget) then
    ui.fEcho2n("Il tasto rapido è stato assegnato all'alias "..ui.fGetAliasNameFormattedText(element)..".")
  elseif (result == 2) and (isTarget) then
    ui.fEcho2n("Il tasto rapido associato al target "..ui.fGetTargetFormattedText(element).." è stato rimosso.")
  elseif (result == 2) and (not isTarget) then
    ui.fEcho2n("Il tasto rapido associato all'alias "..ui.fGetAliasNameFormattedText(element).." è stato rimosso.")
  end
end
--
ui.fSaveFileAliases()
ui.fUpdateAliasButton()
--
ui.fUpdateAllTargetButtons()

</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uik(?:e(?:y(?:b(?:i(?:n(?:d)?)?)?)?)?)?)(?:\s*(\w+)?|$)(?:\s*(\w+)?|$)(?:\s*(\w+)?|$)(?:\s*(\w+)?|$)</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Reply</name>
			<script>if (ui.reply) then
  local msg = matches[2] or ""
  expandAlias("send "..ui.reply.." "..msg)
else
  ui.fError("Nessuno a cui rispondere.")
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uir(?:e(?:p(?:l(?:y)?)?)?)?)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Search Room</name>
			<script>local room = matches[2] or ""
--
if (room == "") then
  ui.fEcho2n("Specificare il nome o l'ID della stanza da cercare")
else
  ui.fShowRooms(ui.fSearchRoom(room))
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uis(?:e(?:a(?:r(?:c(?:h)?)?)?)?)?)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Setting</name>
			<script>local setting = matches[2] or ""
local subCommand = matches[3] or ""
--
-- Shows all profiles
if (subCommand == "") then
  ui.fShowAllSettings()
--
-- Import a profile
elseif (subCommand == "import") then
  if (ui.fImportSetting(setting)) then
    ui.fEcho2n("Il setting "..ui.fGetSettingNameFormattedText(setting).." e' stato importato.")
  else
    ui.fError("Il setting "..ui.fGetSettingNameFormattedText(setting).." non e' stato importato.")
  end
else
  ui.fError("Parametro non previsto ("..subCommand..").")
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uiset(?:t(?:i(?:n(?:g)?)?)?)?)(?:\s+(\w*)\s*(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Speedwalk (./..)</name>
			<script>ui.fDebug("[alias] UI Speedwalk")
--
local function ui_fGetNextNumber(text, index)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui_fGetNextNumber("..(text or "nil")..", "..(index or "nil")..")")
  --
  local number = ""
  --
  index = tonumber(index or 1)
  while (index&lt;=text:len()) and (string.match(string.lower(text:sub(index, index)), "[0123456789]")) do
    number = number..string.lower(text:sub(index, index))
    index = index + 1
  end
  if (number == "") then
    number = "1"
  end
  number = tonumber(number)
  --
  return number, index
end
--
local in_path = string.lower(matches[3] or "")
local out_path = ""
local backwards = (matches[2] == ".")
--
if (in_path == "") then
  ui.fEcho2n("Specificare un percorso.")
else
  --
  -- Speedwalk
  local number
  local idx = 1
  --
  -- Formatting
  while (idx &lt;= in_path:len()) do
    number, idx = ui_fGetNextNumber(in_path, idx)
    if (idx &lt;= in_path:len()) then
      local char = string.lower(in_path:sub(idx, idx))
      for j = 1, number do
        if (backwards) then
          out_path = ui.validExit[char].reverse..out_path
        else
          out_path = out_path..char
        end
      end
      idx = idx + 1
    end
  end
end
--
if (backwards) then
  ui.fDebug("[alias] UI Speedwalk (Back) - in: "..in_path.." - out: "..out_path)
else
  ui.fDebug("[alias] UI Speedwalk (Forward) - in: "..in_path.." - out: "..out_path)
end
--
-- Execute
for j=1, out_path:len() do
  expandAlias(out_path:sub(j, j), false); 
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^\.(\.)?(?i)([nsewdu\d]+)?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Target</name>
			<script>local button_type = string.upper(matches[2])
local button_number = tonumber(matches[3])
local value = matches[4] or ""
local button = button_type..button_number
--
-- G buttons
if (button_type == "G") then
  if (button_number&lt;0) or (button_number&gt;9) then
    ui.fError(ui.fGetTargetFormattedText(button).." non valido. Usare un target compreso tra "..ui.fGetTargetFormattedText("G0").." e "..ui.fGetTargetFormattedText("G9"))
  elseif (value ~= "") then
    ui.fError(ui.fGetTargetFormattedText(button).." non è possibile assegnare o rimuovere un valore al target avversario "..ui.fGetTargetFormattedText(button))
  else
    ui.fExecuteTargetButton(button)
  end
--
-- O button
elseif (button_type == "O") then
  if (button_number~=0)  then
    ui.fError(ui.fGetTargetFormattedText(button).." non valido. Usare "..ui.fGetTargetFormattedText("T0"))
  elseif (value ~= "") then
    ui.fError(ui.fGetTargetFormattedText(button).." non è possibile assegnare o rimuovere un valore al target di gruppo "..ui.fGetTargetFormattedText(button))
  else
    ui.fExecuteTargetButton(button)
  end
--
-- T buttons
elseif (button_type == "T") then
  if (button_number&lt;1) or (button_number&gt;4) then
    ui.fError(ui.fGetTargetFormattedText(button).." non valido. Usare "..ui.fGetTargetFormattedText("T1")..", "..ui.fGetTargetFormattedText("T2")..", "..ui.fGetTargetFormattedText("T3").." oppure "..ui.fGetTargetFormattedText("T4"))
  elseif (value == "") then
    ui.fExecuteTargetButton(button)
  elseif (value == "remove") then
    if (ui.fAssignTargetButton(button, nil)) then
      ui.fUpdateAllTargetButtons()
      --
      ui.fEcho2n(ui.fGetTargetFormattedText(button).." valore rimosso.")
    else
      ui.fError(ui.fGetTargetFormattedText(button).." errore durante la rimozione del valore.")
    end
  else
    if (ui.fAssignTargetButton(button, value)) then
      ui.fEcho2n(ui.fGetTargetFormattedText(button).." valore impostato "..ui.fGetVarValueFormattedText(value)..".")
    else
      ui.fUpdateAllTargetButtons()
      --
      ui.fError(ui.fGetTargetFormattedText(button).." errore durante il cambio di valore.")
    end
  end
end</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)([got])(\d)(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Track Room</name>
			<script>local room = matches[2] or ui.room.id
local room_2 = matches[3] or "" -- TODO
--
-- No parameters
if (matches[2] == nil) then
  ui.fEcho2n("Specificare il nome o l'ID della stanza da tracciare")
end
--
local result = ui.fSearchRoom(room)
local count = 0
local roomId
--
-- Count search result
for rId, _ in pairs(result) do 
  count = count + 1 
end
--
-- Not found
if (count == 0) then
  ui.fError("La stanza non esiste o non è stata ancora esplorata.")
--
-- Single result found
elseif (count == 1) then
  local roomId, roomName = next(result);  -- next = first an only
  local walkPath = {}
  local walkDirs = {}
  --
  ui.speedwalk.path = {}
  if getPath(getPlayerRoom(), roomId) then
    walkPath, walkDirs = ui.fPrepareSpeedWalk(speedWalkPath, speedWalkDir)
    --
    if (room ~= ui.room.id) then
      ui.fEcho2n("Un nuovo sentiero per &lt;cyan&gt;"..ui.fConvertColorString(roomName).." &lt;r&gt;a &lt;yellow&gt;"..getRoomAreaName(getRoomArea(roomId)).."&lt;r&gt; è stato tracciato")
    end
  else
    ui.fError("Impossibile da raggiungere")
  end
--
-- Multiple result
else
  ui.fShowRooms(result)
end
--
-- In any case update Area
ui.fHighlightArea(ui.room.areaId)
ui.fUpdateRoom()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uit(?:r(?:a(?:c(?:k)?)?)?)?)(?:\s+(.*))?(?:\s+(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Variables</name>
			<script>local variable = matches[2]
local value = matches[3]
--
-- Shows all variables
if variable == nil or variable == "" then
  ui.fShowAllVar()
--
-- Delete all variables
elseif variable == "remove_all" then
  ui.fRemoveAllVariables();
  ui.fEcho2n("Tutte le variabili sono state eliminate.")
--
-- Show single variable
elseif value == nil or value == "" then
  if ui.variables[variable] then
    ui.fEcho2n(ui.fGetVarFormattedText(variable))
  else
    ui.fEcho2n("La variabile "..ui.fGetVarNameFormattedText(variable).." non esiste.")
  end
--
-- Delete single variable
elseif value == "remove" then
  if not ui.variables[variable] then
    ui.fEcho2n("La variabile "..ui.fGetVarNameFormattedText(variable).." non esiste.")
  elseif table.contains(ui.fGetPreDefinitedVariables(), variable) then
    ui.variables[variable] = ""
    ui.fEcho2n("La variabile predefinita "..ui.fGetVarNameFormattedText(variable).." è stata pulita.")
  else
    ui.variables[variable] = nil
    ui.fEcho2n("La variabile "..ui.fGetVarNameFormattedText(variable).." e' stata rimossa.")
  end
--
-- Create or modify a variable
else
  if (ui.variables[variable])then
    ui.variables[variable] = value
    ui.fEcho2n('La variabile è stata aggiornata: '..ui.fGetVarFormattedText(variable))
  else
    ui.variables[variable] = value
    ui.fEcho2n('La variabile è stata creata: '..ui.fGetVarFormattedText(variable))
  end
end
--
if (variable and variable == "target") then
  ui.fUpdateAllTargetButtons()
end
--
ui.fSaveFileVariables()</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uiv(?:a(?:r(?:i(?:a(?:b(?:l(?:e)?)?)?)?)?)?)?|&amp;)(?:\s*&amp;?(\w+)(?:\s*)?(.*))?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>UI Widget</name>
			<script>local widgets = {
  ["affects"]       = GUI.Affects,
  ["buttons"]       = GUI.AliasButtons,
  ["chat"]          = GUI.Chat,
  ["cooldowns"]     = GUI.Cooldowns,
  ["endowment"]     = GUI.Endowment,
  ["group"]         = GUI.Group,
  ["help"]          = GUI.Help,
  ["room"]          = GUI.Room,
  ["mapper"]        = GUI.Mapper,
  ["opponent"]      = GUI.Opponent,
  ["player"]        = GUI.Player,
  ["target"]        = GUI.TargetButtons
}
local widget = string.lower(matches[2] or "")
--
-- No parameters
if (widget == "") then
  ui.fEcho("Usare ")
  cechoLink(ui.cLink("all"), [[expandAlias("uiw all")]], "uiwidget all", true);
  for k, _ in pairs(widgets) do
    cecho(", ")
    cechoLink(ui.cLink(k), [[expandAlias("uiw ]]..k..[[")]], "uiwidget "..k, true);
  end
  cecho("\n")
--
-- Restore all wigets
elseif (widget == "all") then
  for _, w in pairs(widgets) do
    w:restore();
    w:show();
  end
  ui.fEcho2n("Tutti i widget sono stati ripristinati.")
--
-- Restore specific widget
elseif (widgets[widget]) then
  widgets[widget]:restore();
  widgets[widget]:show();
  ui.fEcho2n("Il widget "..ui.fGetCommandFormattedText(widget).." e' stato ripristinato.")
--
-- No widget exist
else
  ui.fEcho("Nome widget errato. Usare: ")
  cechoLink(ui.cLink("all"), [[expandAlias("uiw all")]], "uiwidget all", true);
  for k, _ in pairs(widgets) do
    cecho(", ")
    cechoLink(ui.cLink(k), [[expandAlias("uiw ]]..k..[[")]], "uiwidget "..k, true);
  end
  cecho("\n")  
end
</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)(?:uiw(?:i(?:d(?:g(?:e(?:t)?)?)?)?)?)(?:\s+(.*))?$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Functions</name>
			<packageName></packageName>
			<script>--[[
RELEASE 
- Corretto visualizzazione del widget gruppo (rimosso movimento)
- Corretto visualizzazione del widget player (rimosso movimento)
- Migiorato visualizzazione widget effetti
- Migiorato visualizzazione widget equipaggiamento
- Aggiunto il valore numerico del tick al relativo gauge nel widget Player
- Aggiunto il valore numerico degli exp al relativo gauge nel widget Player (sparisce in automatico al raggiungiemnto del valore massimo)
- Aggiunto caricamento dei profilo.
- Miglioramenti del widget Chat (visualizzazione a tab collassabili)
- Miglioramenti del resize dei widget.
]]

ui = ui or {}
ui.enDebug = 0 -- 0 = Off, 1 = Text only, 2 = simulate values</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Affects</name>
				<packageName></packageName>
				<script>--
function ui.fUpdateAffects()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateAffects()")
  --
  local distance = 2; 
  local min_w = 100;
  local max_w = 150;
  local w_h = GUI.Affects.Main:get_height() - distance;
  local w_w = GUI.Affects.Main:get_width() -  distance;
  local h = distance + 28;
  local w = distance + min_w;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c, total
  local orderTable = {}
  --
  -- Pre defined affect 
  local pre_defined_affects = {
    ["velocita` della luce"]        = {                        BGcolor = "cyan" },
  --  ["[CD] Nuovo Dungeon"]        = {icon = "skill_115.png", color = "blue", shortName = "CD Dung" },
  --  ["[CD] Nuova Missione"]       = {icon = "skill_115.png", color = "blue", shortName = "CD Miss" },  
  --  ["avvelena"]                  = {icon = nil,             color = "YellowGreen", shortName = "Vel" },
  --  ["chiaroveggenza"]            = {icon = nil,             color = "magenta", shortName = "Chiaro" },  
  --  ["colpo psichico"]            = {icon = nil,             color = "magenta", shortName = "Colpo PSI" },  
  --  ["forza psichica"]            = {icon = "skill_9.png",   color = "OrangeRed", shortName = "PSI Str" },
  --  ["individua il magico"]       = {icon = 'Skill_322.png', color = "DarkOrchid", shortName = "Ind. mag." },
  --  ["individua il male"]         = {icon = 'skill_72.png',  color = "DarkOrchid", shortName = "Ind. mal." },
  --  ["individua invisibile"]      = {icon = "Skill_312.png", color = "DarkOrchid", shortName = "Ind. inv." },
  --  ["levitazione"]               = {icon = "skill_156.png", color = "blue", shortName = "Lev" },
  --  ["nuotare (cooldown)"]        = {icon = "skill_110.png", color = "blue", shortName = "Swim" },
  --  ["percepisci vita"]           = {icon = "skill_44.png",  color = "DarkOrchid", shortName = "True Live" },
  --  ["primo soccorso"]            = {icon = nil,             color = "green", shortName = "First AID" },  
  --  ["santuario"]                 = {icon = "Skill_243.png", color = "white", shortName = "Sanc" },
  --  ["scarica di adrenalina"]     = {icon = "Skill_472.png", color = "yellow", shortName = "PSI Dro" },
  --  ["scopri le trappole"]        = {icon = "skill_166.png", color = "brown", shortName = "Det. trap" },
  --  ["mantello di fiamme"]        = {icon = "fireshield.png", BGcolor = "firebrick", FGcolor = "yellow", shortName = "PSI Fire" },
  --  ["scudo psichico"]            = {icon = "skill_168.png", color = "cyan", shortName = "PSI Shield" },
  --  ["vera vista"]                = {icon = "Skill_264.png", color = "DarkOrchid", shortName = "Vera Vista" },
  }
  --
  -- Fast affect
  local fastAffects = {
    ["In Combattimento"] = '&lt;span style="font-size:10px"&gt;⚔&lt;/span&gt;',
    ["Panico!"]          = '&lt;span style="font-size:10px"&gt;🏃&lt;/span&gt;',
  }
  --
  ui.affects = {}
  ui.fastAffects = ""
  --
  -- Simulation (for debug)
  if (ui.enDebug &gt;= 2) then
    for i=1, math.random(1, 30) do
      local name = "Affect "..i 
      --
      ui.affects[name] = {} 
      ui.affects[name].category   = math.random(0, 100)
      if (i&lt;10)then
        ui.affects[name].color    = "$c000"..(i)
      else
        ui.affects[name].color    = "$c00"..(i)
      end
      ui.affects[name].dispelResistance = math.random(0, 100)
      ui.affects[name].duration         = math.random(0, 15) - 10
      ui.affects[name].isNegative       = math.random(0, 100)
      if (math.random(0, 1) == 0) then ui.affects[name].isRound = true else ui.affects[name].isRound = false end;
      ui.affects[name].stacks           = math.random(0, 100)
      ui.affects[name].type             = math.random(0, 100)
      --
      orderTable[#orderTable+1] = name
    end
  elseif (gmcp) and (gmcp.char) and (gmcp.char.affects) then
    --
    -- GMCP
    for affect in pairs(gmcp.char.affects) do
      local name = gmcp.char.affects[affect].name 
      --
      if (ui.affects[name] == nil) then
        ui.affects[name] = {}
        ui.affects[name].category         = gmcp.char.affects[affect].category
        ui.affects[name].color            = gmcp.char.affects[affect].color
        ui.affects[name].dispelResistance = gmcp.char.affects[affect].dispelResistance
        ui.affects[name].duration         = gmcp.char.affects[affect].duration
        ui.affects[name].isNegative       = gmcp.char.affects[affect].isNegative
        ui.affects[name].isRound          = gmcp.char.affects[affect].isRound
        ui.affects[name].stacks           = gmcp.char.affects[affect].stacks
        ui.affects[name].type             = gmcp.char.affects[affect].type
        --
        orderTable[#orderTable+1] = name
      end
    end
  end
  --
  -- Order Affects
  table.sort(orderTable, function (affect1, affect2)
                           if (ui.affects[affect1].duration &lt; 0) then
                             return false
                           elseif(ui.affects[affect2].duration &lt; 0) then
                             return true
                           elseif (ui.affects[affect1].isRound) and (not ui.affects[affect2].isRound) then
                             return true
                           elseif (not ui.affects[affect1].isRound) and (ui.affects[affect2].isRound) then
                             return false
                           else 
                             return ui.affects[affect1].duration &lt; ui.affects[affect2].duration
                           end
                         end )
  --
  total = math.min(#orderTable, 20);
  tot_r = math.max(1, math.min(math.floor(w_h / h), total));
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  --
  -- Recalc w
  w = math.min(w_w / tot_c, distance + max_w)
  --
  for i = 1, 20 do
    --
    -- Show if inside box
    if (r &gt; tot_r) or (i &gt; total) then
      GUI.Affects.Main["Affect"..i]:hide();
    else
      local duration = ""
      local affect = orderTable[i]
      local durationColor = "green"
      --
      -- Permanent
      if (ui.affects[affect].duration &lt; 0) then
        durationColor = "white"
        ui.affects[affect].duration = "&lt;b&gt;P&lt;/b&gt;"
        duration = "Permanente"
      else
        --
        if (ui.affects[affect].duration &lt; 1) then
          durationColor = "red"
        elseif (ui.affects[affect].duration &lt; 3) then
          durationColor = "orange"
        elseif  (ui.affects[affect].duration &lt; 5) then
          durationColor = "yellow"
        end
        --
        -- In round or  tick
        if (ui.affects[affect].isRound) then
          duration = ui.affects[affect].duration.." round"
          ui.affects[affect].duration = ui.affects[affect].duration.."r"
        else
          duration = ui.affects[affect].duration.." tick"
          ui.affects[affect].duration = ui.affects[affect].duration.."T"
        end
      end
      --
      -- Fast Affects
      if (table.contains(fastAffects, affect)) then
        ui.fastAffects = ui.fastAffects.." - "..fastAffects[affect]..":"..ui.affects[affect].duration;
      --
      -- Normal Affects
      else
        local icon = nil
        local BGColor = nil
        local FGColor = "black";
        local shortName = nil
        local CCS = GUI.CSS.ItemText
        --
        -- Pre-load icon, BG volor and short name form predefinited table (if exists)
        if table.contains(pre_defined_affects, affect) then
          --
          -- Pre-ShortName
          if (pre_defined_affects[affect].shortName) then
            shortName = pre_defined_affects[affect].shortName
          end
          --
          -- Pre-FG Color
          if (pre_defined_affects[affect].FGcolor) then
            FGColor = pre_defined_affects[affect].FGcolor
          end
          --
          -- Pre-Icon
          if (pre_defined_affects[affect].icon) and (io.exists(ui.files.icons.path..pre_defined_affects[affect].icon)) then
            icon = ui.files.icons.path..pre_defined_affects[affect].icon;
          end
          --
          -- Pre-BG Color
          if (pre_defined_affects[affect].BGcolor) then
            BGColor = pre_defined_affects[affect].BGcolor
          end
        end
        --
        -- Short Name
        if (not shortName) then
          shortName = ui.fRemoveArticle(affect);
        end
        GUI.Affects.Main["Affect"..i].text:setFgColor(FGColor)
        GUI.Affects.Main["Affect"..i].text:echo("&lt;center&gt;"..string.gsub(shortName, "(%a)([%w_']*)", ui.fTitleCase))
        --
        -- Icon
        if (icon) then
          CCS = CCS..[[
                  border-image: url("]]..icon..[[") 0px stretch;
                ]]
        end
        --
        -- BG color
        if (not BGColor) then
          if (ui.affects[affect].color) then
            BGColor = ui.fGetColor(ui.affects[affect].color)
          else
  		      local R = 9 * ((string.byte(shortName, 1) or 0x0) - 0x61) -- Primo carattere o 0 se la frase è vuota
  		      local G = 9 * ((string.byte(shortName, 2) or 0x0) - 0x61) -- Secondo carattere o 0 se la frase ha meno di 2 caratteri
  		      local B = 9 * ((string.byte(shortName, 3) or 0x0) - 0x61) -- Terzo carattere o 0 se la frase ha meno di 3 caratteri
  		      --
            BGColor = string.format("#%02X%02X%02X", R, G, B)
          end
        end
        --
        CCS = CCS..[[
                background-color: ]]..BGColor..[[;
              ]]
        GUI.Affects.Main["Affect"..i].text:setStyleSheet(CCS)
        --
        GUI.Affects.Main["Affect"..i]:setStyleSheet([[QLabel{
          ]]..GUI.CSS.Item..[[
          background-color: ]]..BGColor..[[;
        }]])
        --
        GUI.Affects.Main["Affect"..i].duration:setFgColor(durationColor)
        GUI.Affects.Main["Affect"..i].duration:echo("&lt;center&gt;"..ui.affects[affect].duration)
        --
        -- Dispel Resistance
        GUI.Affects.Main["Affect"..i].dispelResistance:echo("&lt;center&gt;"..ui.affects[affect].dispelResistance)
        --
        -- Stack
        GUI.Affects.Main["Affect"..i].stacks:echo("&lt;center&gt;"..ui.affects[affect].stacks)
        --
        -- ToolTip
        local toolTip = ""
        --
        if ui.fHasbit(ui.affects[affect].type, 1) then toolTip = toolTip.."Aura " end
        if ui.fHasbit(ui.affects[affect].type, 2) then toolTip = toolTip.."Affliction " end
        if ui.fHasbit(ui.affects[affect].type, 3) then toolTip = toolTip.."Control " end
        if ui.fHasbit(ui.affects[affect].type, 4) then toolTip = toolTip.."Hinder " end
        if ui.fHasbit(ui.affects[affect].type, 5) then toolTip = toolTip.."Immunity " end
        if ui.fHasbit(ui.affects[affect].type, 6) then toolTip = toolTip.."Arcane " end
        if ui.fHasbit(ui.affects[affect].type, 7) then toolTip = toolTip.."Divine " end
        if ui.fHasbit(ui.affects[affect].type, 8) then toolTip = toolTip.."Elemental " end
        if ui.fHasbit(ui.affects[affect].type, 9) then toolTip = toolTip.."Physical " end
        if (toolTip == "") then toolTip = "-" else toolTip = "&amp;lt;"..string.trim(toolTip).."&amp;gt;" end
        --
        toolTip = '&lt;p style="text-align: center;"&gt;&lt;b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;'..string.upper(affect)..'&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;br&gt;'..
                        '&lt;i&gt;'..toolTip..'&lt;/i&gt;&lt;/p&gt;'..
                        '&lt;lu&gt;'..
                        '&lt;li&gt;▷ '..ui.affects[affect].dispelResistance.. ' resistenza&lt;/li&gt;'..
                        '&lt;li&gt;▷ '..ui.affects[affect].stacks..' stack&lt;/li&gt;'..
                        '&lt;/lu&gt;'..
                        --stat..
                        '&lt;p style="text-align: right;"&gt;&lt;i&gt;'..duration..'&lt;/i&gt;'
        GUI.Affects.Main["Affect"..i]:setToolTip(toolTip, 10)
        --
        --
        GUI.Affects.Main["Affect"..i]:move(distance + (c-1)*w, distance + (r-1)*h)
        GUI.Affects.Main["Affect"..i]:resize(w - distance, h - distance)
        GUI.Affects.Main["Affect"..i]:show();
        --
        c = c + 1
        if (c &gt; tot_c) then
          c = 1;
          r = r + 1
        end
      end
    end
  end
end
--
-- Debug simulation
if (ui.enDebug) and (ui.enDebug &gt;= 2) then
  ui.fUpdateAffects()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Alias buttons</name>
				<packageName></packageName>
				<script>local bgColor = {
  ["a"] = "75,0,0",
  ["b"] = "0,75,0",
  ["c"] = "0,0,75",
}
--
local bgColorHover = {
  ["a"] = "150,0,0",
  ["b"] = "0,200,0",
  ["c"] = "0,0,150",
}
--
-- Expand button name. Es. ui.fExpandButton("T5") -&gt; "t", 5
function ui.fExpandButton(button)
  local val = 0
  --
  button = string.lower(button or "")
  if (string.find(button, "^[abcgot]%d$")) then
    return string.sub(button, 1, 1), tonumber(string.sub(button, 2, 2))
  end
  --
  return nil, nil
end
--
function ui.fGetAliasButtonFormattedText(button)
  local cColor = {
    ["a"] = "&lt;red&gt;",
    ["b"] = "&lt;green&gt;",
    ["c"] = "&lt;blue&gt;",
  }
  local b, n = ui.fExpandButton(button)
  if (cColor[b]) then
    return ui.cLink(cColor[b]..button)
  else
    return ui.colors.aliasButton.."["..button.."]".."&lt;r&gt;"
  end
end
--
function ui.fSearchAliasButton(button)
  local type, number = ui.fExpandButton(button)
  --
  if (type == "a") or (type == "b") or (type == "c") then
    button = type..number
    for alias in pairs(ui.aliases) do
      if (ui.aliases[alias].button) and (ui.aliases[alias].button==button) then
        return alias
      end
    end
  end
  --
  return nil
end
--
-- Cecho Alias with link
function ui.fLinkAliasButton(button)
  local alias = ui.fSearchAliasButton(button)
  cechoLink(ui.fGetAliasButtonFormattedText(button), [[expandAlias("]]..button..[[")]], "Esegui '"..button.."'", true)
  cecho(" "..ui.fGetOperatorFormattedText("»").." ")
  if (alias) then
    ui.fLinkAlias(alias)
  else
    cecho("&lt;r&gt;non configurato")
  end
end
--
-- List all alias buttons
function ui.fShowAllAliasButtons()
  local i = 0
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllAliasButtons()")
  --
  cecho(ui.fTitle("Pulsanti alias"))
  local button = {"a", "b", "c"}
  for b=1, 3 do
    for i=0, 9 do
      cecho(ui.fGetNumberFormattedText((b-1)*10 + i +1).." ")
      cechoLink(ui.cLink("X"), [[expandAlias("uibuttons ]]..button[b]..i..[[ remove")]], "Rimuovi l'alias associato a '"..button[b]..i.."'", true)
      cecho(" ")
      ui.fLinkAliasButton(button[b]..i)
      cecho("\n")
    end
  end
end
--
-- Remove alias button
function ui.fRemoveAliasButton(button)
  local ret = 0;
  local type, number = ui.fExpandButton(button)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAliasButton("..(button or "nil")..")")
  --
  if (type == "a") or (type == "b") or (type == "c") then
    button = type..number 
    local alias = ui.fSearchAliasButton(button)
    --
    if (alias) then
      ui.aliases[alias].button = nil
      --
      return 1
    end
    --
    return -2 -- Not alias assigned
  end
  --
  return -1 -- Invaid button
end
--
-- Remove all alias button
function ui.fRemoveAllAliasButtons()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAllAliasButtons()")
  --
  for alias in pairs(ui.aliases) do
    if (ui.aliases[alias].button) then
      ui.aliases[alias].button = nil
    end
  end
end
--
-- Assign alias button
function ui.fAssignAliasButton(button, alias)
  local ret = 0;
  local type, number = ui.fExpandButton(button)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fAssignAliasButton("..(button or "nil")..", "..(alias or "nil")..")")
  --
  if (type == "a") or (type == "b") or (type == "c") then
    button = type..number
    if (ui.aliases[alias]) then
      ui.fRemoveAliasButton(button)
      ui.aliases[alias].button = button
      --
      return 1
    end
    --
    return -2 -- Alias not exist
  end
  --
  return -1 -- Invaid button
end
--
function ui.fExecuteAliasButton(button)
  local alias = nil;
  local type, number = ui.fExpandButton(button)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fExecuteAliasButton("..(button or "nil")..")")
  --
  if (type == "a") or (type == "b") or (type == "c") then
    button = type..number
    alias = ui.fSearchAliasButton(button)
    if (alias) then
      expandAlias(alias, false)
    else
      ui.fEcho2n(ui.fGetAliasButtonFormattedText(button).." non configurato. Usare il comanto "..ui.fGetCommandFormattedText(button.." &lt;alias&gt;").." per configurare.")
    end
  end
  --
  return alias
end
--
function ui.fUpdateAliasButton()
  local distance = 3; 
  local w_h = GUI.AliasButtons.Main:get_height() - distance;
  local w_w = GUI.AliasButtons.Main:get_width() -  distance;
  local h = distance + 25
  local w = distance + 80;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c
  local total = 10
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateAliasButton()")
  --
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  -- When working with negative numbers math.floor() returns the closest integer less than or equal to a given value
  tot_r = -math.floor(-total/tot_c);
  --
  -- Recalc w if possible
  w = w_w / tot_c
  --
  -- Recalc h if possible
  h = w_h / tot_r
  --
  for i = 0, 9 do
    if (r &gt; tot_r) then
      GUI.AliasButtons.Main["Button"..i]:hide();
    else
      local title = ""
      local keybind = ""
      local button = ui.parameters.page..i
      --
      for alias in pairs(ui.aliases) do
        if (ui.aliases[alias].button) and (ui.aliases[alias].button==button) then
          title = alias
          keybind = ui.aliases[alias].keybind or ""
          break
        end
      end
      --
      GUI.AliasButtons.Main["Button"..i].index:echo("&lt;center&gt;"..ui.parameters.page..i)
      --
      GUI.AliasButtons.Main["Button"..i].icon:setStyleSheet(GUI.CSS.ButtonsIcon)
      GUI.AliasButtons.Main["Button"..i].icon:echo("&lt;center&gt;"..title)
      --
      GUI.AliasButtons.Main["Button"..i].keybind:echo("&lt;p align=right&gt;"..keybind.."&lt;/p&gt;")
      --
      GUI.AliasButtons.Main["Button"..i]:setStyleSheet([[
        QLabel{
          ]]..GUI.CSS.Button..[[
          background-color: rgb(]]..bgColor[ui.parameters.page]..[[);
        }
        QLabel::hover{
          background-color: rgb(]]..bgColorHover[ui.parameters.page]..[[);
        }
      ]])
      --
      GUI.AliasButtons.Main["Button"..i]:resize(w - distance, h - distance)
      GUI.AliasButtons.Main["Button"..i]:move(distance + (c-1)*w, distance + (r-1)*h)
      GUI.AliasButtons.Main["Button"..i]:show();
      --
      c = c + 1
      if (c &gt; tot_c) then
        c = 1;
        r = r + 1
      end
    end
  end
end
--
function ui.fClickAliasButton(number)
  local button = ui.parameters.page..number
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fClickAliasButton("..(number or "nil")..")")
  --
  ui.fExecuteAliasButton(button)
end
--
function ui.fOptionButton(buttonName)
  -- Aliases Buttons
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fOptionButton("..(buttonName or "nil")..")")
  --
  ui.parameters.page = buttonName;
  ui.fUpdateAliasButton()
end
--
-- Debug simulation
if (ui.enDebug) and (ui.enDebug &gt;= 2) then
  ui.fUpdateAliasButton()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Aliases</name>
				<packageName></packageName>
				<script>--
function ui.fExpandVariables(value, toAlias)
  if (toAlias) then
    value = string.gsub(value, "#", '"..__mtchs2__.."')
    value = string.gsub(value, "["..ui.varID.."@](%w+)", '"..ui.variables.%1.."')
  else
    value = string.gsub(value, "["..ui.varID.."@](%w+)", "ui.variables.%1")
  end
  --
  for varName in string.gfind(value, "ui.variables%.(%w+)") do
    if (not ui.variables[varName]) then
      return nil, varName
    elseif (not toAlias) then
      value = string.gsub(value, "ui.variables%.(%w+)", ui.variables[varName])
    end
  end
  --
  return value, nil
end
--
function ui.fGetAliasNameFormattedText(alias)
  return ui.colors.aliasName..alias.."&lt;r&gt;"
end
--
function ui.fGetAliasOutputFormattedText(command, input)
  if (command) then
    input = input or ""
    --
    -- Add same spaces between commands
    command = string.gsub(command, "(%s*/%s*)", " / ")
    command = string.gsub(command, "(%s*;%s*)", "; ")
    --
    -- Format Aliases
    command = string.gsub(command, "^(%w+)", function(str)
                                               if ui.aliases[str] then
                                                 return ui.fGetAliasNameFormattedText(str)..ui.colors.aliasOutput
                                               end
                                             end)
    command = string.gsub(command, "/ (%w+)", function(str)
                                                if ui.aliases[str] then
                                                  return "/ "..ui.fGetAliasNameFormattedText(str)..ui.colors.aliasOutput
                                                end
                                              end)
    command = string.gsub(command, "; (%w+)", function(str)
                                                if ui.aliases[str] then
                                                  return "; "..ui.fGetAliasNameFormattedText(str)..ui.colors.aliasOutput
                                                end
                                              end)
    --
    -- Format Variables
    command = string.gsub(command, "["..ui.varID.."@](%w+)", function(str)
                                                        if not ui.variables[str] then
                                                          return ui.fGetVarNameFormattedText(str)..ui.fGetOperatorFormattedText("(")..ui.colors.error.."Variabile non trovata!"..ui.fGetOperatorFormattedText(")")..ui.colors.aliasOutput
                                                        else
                                                          return ui.fGetVarFormattedText(str)..ui.colors.aliasOutput
                                                        end
                                                      end)
    --
    -- Format commands separator
    command = string.gsub(command, ";", ui.colors.separator..";"..ui.colors.aliasOutput)
    command = string.gsub(command, "/", ui.colors.separator.."/"..ui.colors.aliasOutput)
    --
    -- Format input command
    command = string.gsub(command, "#", ui.fGetInputFormattedText("#"..input)..ui.colors.aliasOutput)
    --
    return ui.colors.aliasOutput..command.."&lt;r&gt;"
  end
  --
  return ""
end
--
function ui.fGetAliasFormattedText(alias)
  local ret = ""
  --
  if (ui.aliases[alias]) then
    ret = ui.fGetAliasNameFormattedText(alias)
    --
    if (ui.aliases[alias].keybId) then
      ret = ret.." "..ui.fGetOperatorFormattedText("or").." "..ui.fGetKeybFormattedText(ui.aliases[alias].keybind)
    end
    --
    if (ui.aliases[alias].button) then
      ret = ret.." "..ui.fGetOperatorFormattedText("or").." "..ui.fGetAliasButtonFormattedText(ui.aliases[alias].button)
    end
    --
    ret = ret.." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(ui.aliases[alias].text)
  end
  --
  return ret
end
--
-- Cecho Alias with link
function ui.fLinkAlias(alias)
  if (ui.aliases[alias]) then
    cechoLink(ui.cLink(ui.fGetAliasNameFormattedText(alias)), [[expandAlias("]]..alias..[[")]], "Esegui l'alias '"..alias.."'", true)
    cecho(" "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(ui.aliases[alias].text))
  end
end
--
-- List all aliases
function ui.fShowAllAliases()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllAliases()")
  --
  cecho(ui.fTitle("Aliases"))
  --
  if (table.is_empty(ui.aliases)) then
    cecho("Per maggiori info "..ui.fGetCommandFormattedText("uihelp uialias").."\n\n")
  else
    local idx = 0
    for alias in ui.fOrderedPairs(ui.aliases) do
      idx = idx + 1
      cecho(ui.fGetNumberFormattedText(idx).." ")
      cechoLink(ui.cLink("X"), [[expandAlias("uialias ]]..alias..[[ remove")]], "Cancella l'alias '"..alias.."'", true)
      cecho(" ")
      ui.fLinkAlias(alias)
      echo("\n")
    end
    echo("\n")
  end
end
--
function ui.fRemoveAlias(alias)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAlias("..(alias or "nil")..")")
  --
  if (ui.aliases[alias]) then
    ui.fRemoveKeyb(ui.aliases[alias]);
    if (ui.aliases[alias]["id"]) then
      killAlias(ui.aliases[alias]["id"])
    end
    ui.aliases[alias] = nil
    --
    return true
  end
  --
  return false
end
--
function ui.fRemoveAllAliases()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAllAliases()")
  --
  for alias in pairs(ui.aliases) do
    ui.fRemoveAlias(alias)
  end
  ui.aliases = {}
end
--
function ui.fExpandAlias(alias, value, mtchs, command)
  if (ui.echoed == "") then
    ui.echoed = ui.fGetAliasNameFormattedText(alias).." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs);
    ui.fEcho(ui.echoed);
  else
    cecho(" "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs));
    ui.echoed = ui.echoed.." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs)
  end
  expandAlias(command, false);
end
--
function ui.fExpandMultiAlias(idx, alias, value, mtchs, command)
  if (ui.echoed == "") then
    ui.echoed = ui.fGetAliasNameFormattedText(alias)..ui.fGetNumberFormattedText(idx).." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs);
    if (idx &gt; 1) then echo("\n") end
    ui.fEcho(ui.echoed);
  elseif (idx == 1) then
    cecho(ui.fGetNumberFormattedText(idx).." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs));
    ui.echoed = ui.echoed..ui.fGetNumberFormattedText(idx).." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs);
  else
    local s = ui.echoed
    s = string.gsub(s, "\&lt;%w+\&gt;", "")
    s = string.gsub(s, "»", "x");
    s = string.gsub(s, "%S", " ");
    ui.echoed = s..ui.fGetNumberFormattedText(idx).." "..ui.fGetOperatorFormattedText("»").." "..ui.fGetAliasOutputFormattedText(value, mtchs);
    echo("\n")
    ui.fEcho(ui.echoed);
  end
  expandAlias(command, false);
end
--
function ui.fAddAlias(alias, value)
  local command
  local commands, varNameError = ui.fExpandVariables(value, true)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fAddAlias("..(alias or "nil")..", "..(value or "nil")..")")
  --
  if (not varNameError) then
    --
    -- Init alias (if no exist)
    ui.aliases[alias] = ui.aliases[alias] or {}
    --
    -- Remove old alias
    if (ui.aliases[alias].id) then
      killAlias(ui.aliases[alias].id)
    end
    --
    -- Save value in text format
    ui.aliases[alias].text = value
    --
    -- Generate alias code
    local code = [[
--
-- Recursion leval
ui.levelCode = ui.levelCode or 0
if (ui.levelCode &gt;= 20) then
  ui.fError("Recursion protection.")
  ui.levelCode = ui.levelCode - 1
  return
end
ui.levelCode = ui.levelCode + 1
--
-- Init
matches = matches or {}
local __mtchs2__ = matches[2] or ""
ui.echoed = ui.echoed or ""
local lstEchoed = ui.echoed
]]
    commands = ui.fExpandCommand(value)
    if (#commands == 1) then
      --
      -- Single command
      command = ui.fExpandVariables(value, true)
      if (string.match(command, "__mtchs2__")) then
        code = code..[[
--
-- Single command with #
ui.fExpandAlias("]]..alias..[[", 
                "]]..value..[[", 
                __mtchs2__, 
                "]]..command..[[");
]]
      else
        --
        -- Search for variables in command
        local last_variable = ""
        local last_expanded_variable = ""
        for variable in string.gfind(command, "ui.variables%.%w+") do
          last_variable = string.gsub(variable, "ui.variables%.", ui.varID)
          last_expanded_variable = variable
        end
        if (last_variable == "") then
          --
          -- If not variables in comman, add matches[2]
          code = code..[[
--
-- Single command without # and without variables
if (__mtchs2__ == "") then
  ui.fExpandAlias("]]..alias..[[", 
                  "]]..value..[[", 
                  __mtchs2__, 
                  "]]..command..[[");
else
  ui.fExpandAlias("]]..alias..[[", 
                  "]]..value..[[ #", 
                  __mtchs2__, 
                  "]]..command..[[".." "..__mtchs2__);
end
]]
        else
          --
          -- If variables in command, replace last variable with matches[2]
          local command_matches = string.gsub(command, last_expanded_variable, "__mtchs2__")
          code = code..[[
--
-- Single command without # but with variables
if (__mtchs2__ == "") then
  ui.fExpandAlias("]]..alias..[[", 
                  "]]..value..[[", 
                  __mtchs2__, 
                  "]]..command..[[");
else
  ui.fExpandAlias("]]..alias..[[", 
                  "]]..string.gsub(value, last_variable, "#")..[[", 
                  __mtchs2__, 
                  "]]..command_matches..[[");
end
]]
        end
      end
      code = code..[[
--
ui.echoed = lstEchoed;
]]

    else
      --
      -- Multiple commands
      code = code..[[
--
-- Multiple commands
]]
      for idx, cmd in ipairs(commands) do
        command = ui.fExpandVariables(cmd, true)
        code = code..[[
ui.fExpandMultiAlias(]]..idx..[[,
                     "]]..alias..[[",
                     "]]..cmd..[[",
                     __mtchs2__, 
                     "]]..command..[[")
--
ui.echoed = lstEchoed;
]]
      end
    end
    code = code..[[
--
if (ui.levelCode == 1) then echo("\n") end;
ui.levelCode = math.max(0, ui.levelCode - 1)
]]
    --
    -- Save alias code (for debug only)
    ui.aliases[alias].code = code
    --
    -- Assign keybind
    local mod1 = ui.aliases[alias].mod1 or "";
    local mod2 = ui.aliases[alias].mod2 or "";
    local key = ui.aliases[alias].key or "";
    local result, keybind
    --
    if (mod2 ~= "") then
      result, keybind = ui.fSetKeyb(ui.aliases, alias, ui.aliases[alias].code, mod2, mod1, key)
    elseif (mod1 ~= "") then
      result, keybind = ui.fSetKeyb(ui.aliases, alias, ui.aliases[alias].code, mod1, key)
    elseif (key ~= "") then
      result, keybind = ui.fSetKeyb(ui.aliases, alias, ui.aliases[alias].code, key)
    else
      result, keybind = ui.fSetKeyb(ui.aliases, alias, ui.aliases[alias].code)
    end
    --
    -- Remove keybind if not valid (or already used)
    if (result &lt;= 0) then
      ui.fRemoveKeyb(ui.aliases[alias])
    end
    --
    -- Create alias
    ui.aliases[alias].id = tempAlias([[^]]..alias..[[(?: (.*))?$]], code)
    --
    return 1, ui.fGetAliasFormattedText(alias)
  end
  --
  return -1, varNameError  -- Variable not exist
end
--
-- Save aliases data from file
function ui.fSaveFileAliases()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSaveFileAliases()")
  --
  if (ui.setting) then
    local file = ui.files.aliases.path..ui.setting.."/"..ui.files.aliases.name
    local aliasesDataToSave = {}
    --
    for alias in pairs(ui.aliases) do
      aliasesDataToSave[alias] = {}
      aliasesDataToSave[alias].text = ui.aliases[alias].text
      aliasesDataToSave[alias].mod1 = ui.aliases[alias].mod1
      aliasesDataToSave[alias].mod2 = ui.aliases[alias].mod2
      aliasesDataToSave[alias].key = ui.aliases[alias].key
      aliasesDataToSave[alias].button = ui.aliases[alias].button
    end
    table.save(file, aliasesDataToSave)
  end
end
--
-- Read Aliases data from file
function ui.fReadFileAliases()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileAliases()")
  --
  if (ui.setting) then
    local file = ui.files.aliases.path..ui.setting.."/"..ui.files.aliases.name
    --
    -- Remove actual Aliases
    ui.aliases = ui.aliases or {}
    ui.fRemoveAllAliases()
    --
    -- Load Aliases
    if (io.exists(file)) then
      table.load(file, ui.aliases)
    end
    --
    -- Create Aliases
    for alias in pairs(ui.aliases) do
      ui.fAddAlias(alias, ui.aliases[alias].text)
    end
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Chat</name>
				<packageName></packageName>
				<script>--
function ui.fUpdateChat()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateChat()")
  --
  local x = "0";
  local y = "0";
  --
  if (ui.parameters.widgets.chat.split == "vertical") then
    GUI.Chat.Main.All:hide()
    --
    GUI.Chat.Main.PrivateHeader:move(x, y);
    GUI.Chat.Main.PrivateHeader:resize("100%", 20)
    GUI.Chat.Main.PrivateHeader:show()
    --
    if (ui.parameters.widgets.chat.collapsePrivate) then
      GUI.Chat.Main.Private:move(0, 21);
      --
      if (ui.parameters.widgets.chat.collapsePublic) then
        GUI.Chat.Main.Private:resize("100%", "50%-22")
        y = "50%"
      else
        GUI.Chat.Main.Private:resize("100%", "100%-42")
        y = "-20"
      end
      GUI.Chat.Main.Private:show()
    else
      GUI.Chat.Main.Private:hide()
      y = "21"
    end
    --
    GUI.Chat.Main.PublicHeader:move(x, y);
    GUI.Chat.Main.PublicHeader:resize("100%", 20)
    GUI.Chat.Main.PublicHeader:show()
    --
    if (ui.parameters.widgets.chat.collapsePublic) then
      if (ui.parameters.widgets.chat.collapsePrivate) then
        GUI.Chat.Main.Public:move(0, "50%+21");
        GUI.Chat.Main.Public:resize("100%", "50%-21")
      else
        GUI.Chat.Main.Public:move(0, 42);
        GUI.Chat.Main.Public:resize("100%", "100%-42")
      end
      GUI.Chat.Main.Public:show()
    else
      GUI.Chat.Main.Public:hide()
    end
    --
    GUI.Chat:setTitle("Chat [private - pubblic]")
  --
  elseif (ui.parameters.widgets.chat.split == "horizontal") then
    GUI.Chat.Main.All:hide()
    --
    GUI.Chat.Main.PrivateHeader:move(x, y);
    GUI.Chat.Main.PrivateHeader:resize(20, "100%")
    GUI.Chat.Main.PrivateHeader:show()
    --
    if (ui.parameters.widgets.chat.collapsePrivate) then
      if (ui.parameters.widgets.chat.collapsePublic) then
        GUI.Chat.Main.Private:resize("50%-22", "100%")
        x = "50%"
      else
        GUI.Chat.Main.Private:resize("100%-42", "100%")
        x = "-20"
      end
      GUI.Chat.Main.Private:move(21, 0);
      GUI.Chat.Main.Private:show()
    else
      x = "21"
      GUI.Chat.Main.Private:hide()
    end
    --
    GUI.Chat.Main.PublicHeader:move(x, y);
    GUI.Chat.Main.PublicHeader:resize(20, "100%")
    GUI.Chat.Main.PublicHeader:show()
    --
    if (ui.parameters.widgets.chat.collapsePublic) then
      if (ui.parameters.widgets.chat.collapsePrivate) then
        GUI.Chat.Main.Public:move("50%+21", 0);
        GUI.Chat.Main.Public:resize("50%-21", "100%")
      else
        GUI.Chat.Main.Public:move(42, 0);
        GUI.Chat.Main.Public:resize("100%-42", "100%")
      end
      GUI.Chat.Main.Public:show()
    else
      GUI.Chat.Main.Public:hide()
    end
    --
    GUI.Chat:setTitle("Chat [private | pubblic]")
  --
  else
    GUI.Chat.Main.All:move(0, 0);
    GUI.Chat.Main.All:resize("100%", "100%")
    GUI.Chat.Main.All:show()
    --
    GUI.Chat.Main.PrivateHeader:hide()
    --
    GUI.Chat.Main.Public:hide()
    --
    GUI.Chat.Main.PublicHeader:hide()
    --
    GUI.Chat.Main.Private:hide()
    --
    GUI.Chat:setTitle("Chat [private + pubblic]")
  end
  --
  if (ui.parameters.widgets.chat.collapsePrivate) then
    GUI.Chat.Main.PrivateHeader:echo("[-] Private")
  else
    GUI.Chat.Main.PrivateHeader:echo("[+] Private")
  end
  --
  if (ui.parameters.widgets.chat.collapsePublic) then
    GUI.Chat.Main.PublicHeader:echo("[-] Public")
  else
    GUI.Chat.Main.PublicHeader:echo("[+] Public")
  end
  --
  GUI.Chat.Main.All:scrollUp()
  GUI.Chat.Main.All:scrollDown()
  --
  GUI.Chat.Main.Public:scrollUp()
  GUI.Chat.Main.Public:scrollDown()
  --
  GUI.Chat.Main.Private:scrollUp()
  GUI.Chat.Main.Private:scrollDown()
  --
end
--
function ui.fClickHandler(sender)
  if (sender == 'Private') then
    ui.parameters.widgets.chat.collapsePrivate = not (ui.parameters.widgets.chat.collapsePrivate or false);
  elseif (sender == 'Public') then
    ui.parameters.widgets.chat.collapsePublic = not (ui.parameters.widgets.chat.collapsePublic or false);
  end
  --
  ui.fUpdateChat()
  --
  ui.fSaveFileParameters()
end
--
function ui.fChatSplitClicked()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fChatSplitClicked()")
  --
  if (ui.parameters.widgets.chat.split == "no") then
    ui.parameters.widgets.chat.split = "vertical";
  elseif (ui.parameters.widgets.chat.split == "vertical") then
    ui.parameters.widgets.chat.split = "horizontal";
  else
    ui.parameters.widgets.chat.split = "no"
  end
  --
  ui.fUpdateChat()
  --
  ui.fSaveFileParameters()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Cooldowns</name>
				<packageName></packageName>
				<script>--
function ui.fRefreshCooldownsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRefreshCooldownsWidget()")
  --
  local distance = 2; 
  local min_w = 100;
  local max_w = 150;
  local w_h = GUI.Cooldowns.Main:get_height() - distance;
  local w_w = GUI.Cooldowns.Main:get_width() -  distance;
  local h = distance + 20;
  local w = distance + min_w;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c, total
  local orderTable = {}
  --
  -- Order Affects
  for cooldown in pairs(ui.cooldowns) do
    orderTable[#orderTable+1] = cooldown;
  end
  table.sort(orderTable, function (cooldown1, cooldown2)
                           return ui.cooldowns[cooldown1].duration &lt; ui.cooldowns[cooldown2].duration
                         end )
  --
  --
  total = math.min(#orderTable, 10);
  tot_r = math.max(1, math.min(math.floor(w_h / h), total));
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  --
  -- Recalc w
  w = math.min(w_w / tot_c, distance + max_w)
  --
  for i = 1, 10 do
    --
    -- Show if inside box
    if (r &gt; tot_r) or (i &gt; total) then
      GUI.Cooldowns.Main["Item"..i]:hide();
    else
      local cooldown = orderTable[i]
      local roundToDisplay = math.floor(ui.cooldowns[cooldown].duration);
      --
      if (ui.cooldowns[cooldown].duration - roundToDisplay &gt; 0) then
        roundToDisplay = roundToDisplay + 1;
      end
      --
      GUI.Cooldowns.Main["Item"..i].front:echo("")
      GUI.Cooldowns.Main["Item"..i]:setValue(ui.cooldowns[cooldown].duration, ui.cooldowns[cooldown].maxDuration,"&lt;p align=center&gt;"..cooldown.." "..roundToDisplay.."&lt;/p&gt;")
      --
      GUI.Cooldowns.Main["Item"..i]:move(distance + (c-1)*w, distance + (r-1)*h)
      GUI.Cooldowns.Main["Item"..i]:resize(w - distance, h - distance)
      GUI.Cooldowns.Main["Item"..i]:show()
      --
      c = c + 1
      if (c &gt; tot_c) then
        c = 1;
        r = r + 1
      end
    end
  end
end
--
function ui.fUpdateCooldowns()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateCooldowns()")
  --
  -- GMCP
  if (gmcp) and (gmcp.char) and (gmcp.char.cooldowns) then
    --
    ui.previous.cooldowns = table.deepcopy(ui.cooldowns or {});
    ui.cooldowns = {}
    --
    for cooldown in pairs(gmcp.char.cooldowns) do
      local name = string.gsub(gmcp.char.cooldowns[cooldown].name, "(%a)([%w_']*)", ui.fTitleCase)
      --
      ui.cooldowns[name] = {}
      ui.cooldowns[name].duration = tonumber(gmcp.char.cooldowns[cooldown].duration)
      if (ui.previous.cooldowns[name] == nil) then
        ui.cooldowns[name].maxDuration = ui.cooldowns[name].duration
      else
        ui.cooldowns[name].maxDuration = ui.previous.cooldowns[name].maxDuration
      end
    end
  else
    --
    ui.cooldowns = ui.cooldowns or {}
  end
  --
  ui.fRefreshCooldownsWidget()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Colors</name>
				<packageName></packageName>
				<script>--
-- Coded by Mudlet community developer demonnic
-- internal sorting function, sorts first by hue, then luminosity, then value
local sortColorsByHue = function(lhs, rhs)
  local lh, ll, lv = unpack(lhs.sort)
  local rh, rl, rv = unpack(rhs.sort)
  --
  if lh &lt; rh then
    return true
  elseif lh &gt; rh then
    return false
  elseif ll &lt; rl then
    return true
  elseif ll &gt; rl then
    return false
  else
    return lv &lt; rv
  end
end
--
-- Internal sorting function, removes _ from snake_case and compares to camelCase
local sortColorsByName = function(a, b)
  local aname = string.gsub(string.lower(a.name), "_", "")
  local bname = string.gsub(string.lower(b.name), "_", "")
  --
  return aname &lt; bname
end
--
-- Internal function used to turn sorted colors table into columns
local chunkify = function(tbl, num_chunks)
  local pop =
    function(t)
      return table.remove(t, 1)
    end
  local tbl = table.deepcopy(tbl)
  local tblsize = #tbl
  local base_chunk_size = tblsize / num_chunks
  local chunky_chunks = tblsize % num_chunks
  local chunks = {}
  --
  for i = 1, num_chunks do
    local chunk_size = base_chunk_size
    if i &lt;= chunky_chunks then
      chunk_size = chunk_size + 1
    end
    local chunk = {}
    for j = 1, chunk_size do
      chunk[j] = pop(tbl)
    end
    chunks[i] = chunk
  end
  --
  return chunks
end
--
-- internal function, converts rgb to hsv
-- found at https://github.com/EmmanuelOga/columns/blob/master/utils/color.lua#L89
local rgbToHsv = function(r, g, b)
  r, g, b = r / 255, g / 255, b / 255
  local max, min = math.max(r, g, b), math.min(r, g, b)
  local h, s, v
  v = max
  local d = max - min
  if max == 0 then
    s = 0
  else
    s = d / max
  end
  if max == min then
    h = 0
    -- achromatic
  else
    if max == r then
      h = (g - b) / d
      if g &lt; b then
        h = h + 6
      end
    elseif max == g then
      h = (b - r) / d + 2
    elseif max == b then
      h = (r - g) / d + 4
    end
    h = h / 6
  end
  --
  return h, s, v
end
--
-- internal stepping function, removes some of the noise for a more pleasing sort
-- cribbed from the python on https://www.alanzucconi.com/2015/09/30/colour-sorting/
local step = function(r, g, b)
  local lum = math.sqrt(.241 * r + .691 * g + .068 * b)
  local reps = 8
  local h, s, v = rgbToHsv(r, g, b)
  local h2 = math.floor(h * reps)
  local lum2 = math.floor(lum * reps)
  local v2 = math.floor(v * reps)
  --
  if h2 % 2 == 1 then
    v2 = reps - v2
    lum2 = reps - lum2
  end
  --
  return h2, lum2, v2
end
--
local function calc_luminosity(r, g, b)
  r = r &lt; 11 and r / (255 * 12.92) or ((0.055 + r / 255) / 1.055) ^ 2.4
  g = g &lt; 11 and g / (255 * 12.92) or ((0.055 + g / 255) / 1.055) ^ 2.4
  b = b &lt; 11 and b / (255 * 12.92) or ((0.055 + b / 255) / 1.055) ^ 2.4
  --
  return (0.2126 * r) + (0.7152 * g) + (0.0722 * b)
end
--
local function include(color, options)
  if options.removeDupes then
    if string.find(color, "_") or string.find(color:lower(), 'gray') then
      return false
    else
      return true
    end
  else
    if string.find(color, "ansi_%d%d%d") then
      return false
    else
      return true
    end
  end
end
--
local function echoColor(color, options)
  local rgb = color.rgb
  local fgc = "white"
  --
  if calc_luminosity(unpack(rgb)) &gt; 0.5 then
    fgc = "black"
  end
  local colorString
  if options.justText then
    colorString = string.format('&lt;%s:%s&gt; %-23s&lt;r&gt; ', color.name, 'black', color.name, spacer)
  else
    colorString = string.format('&lt;%s:%s&gt; %-23s&lt;r&gt; ', fgc, color.name, color.name)
  end
  if options.window == "main" then
    if options.echoOnly then
      cecho(colorString)
    else
      cechoLink(
        colorString, [[appendCmdLine("]]..color.name..[[")]], table.concat(rgb, ", "), true
      )
    end
  else
    if options.echoOnly then
      cecho(options.window, colorString)
    else
      cechoLink(
        options.window,
        colorString,
        [[appendCmdLine("]]..color.name..[[")]],
        table.concat(rgb, ", "),
        true
      )
    end
  end
end
--
function ui.fDisplayColors(options)
  local options = options or {}
  local optionsType = type(options)
  --
  assert(
    optionsType == "table",
    "ui.fDisplayColors(options) argument error: options as table expects, got "..optionsType
  )
  options.cols = options.cols or 4
  options.search = options.search or ""
  options.sort = options.sort or false
  if options.removeDupes == nil then
    options.removeDupes = true
  end
  if options.columnSort == nil then
    options.columnSort = true
  end
  if type(options.window) == "table" then
    options.window = options.window.name
  end
  options.window = options.window or "main"
  local color_table = options.color_table or color_table
  local cols, search, sort = options.cols, options.search, options.sort
  local colors = {}
  for k, v in pairs(color_table) do
    local color = {}
    color.rgb = v
    color.name = k
    color.sort = {step(unpack(v))}
    if include(k, options) and k:lower():find(search) then
      table.insert(colors, color)
    end
  end
  if sort then
    table.sort(colors, sortColorsByName)
  else
    table.sort(colors, sortColorsByHue)
  end
  if options.columnSort then
    local columns_table = chunkify(colors, cols)
    local lines = #columns_table[1]
    for i = 1, lines do
      for j = 1, cols do
        local color = columns_table[j][i]
        if color then
          echoColor(color, options)
        end
      end
      echo(options.window, "\n")
    end
  else
    local i = 1
    for _, k in ipairs(colors) do
      echoColor(k, options)
      if i == cols then
        echo(options.window, "\n")
        i = 1
      else
        i = i + 1
      end
    end
    if i ~= 1 then
      echo(options.window, "\n")
    end
  end
end
--
-- Check color
function ui.fColorCheck(color)
  local color = color:lower()
  --
  color = color:gsub("_", "")
  for color_name, _ in pairs(color_table) do
    if color_name:lower() == color then
      return color_name
    end
  end
  --
  return false
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Endowment</name>
				<packageName></packageName>
				<script>local replacements = {
	["DAc"] = "Danno Acido",
	["DCh"] = "Danno Caos",
	["DEl"] = "Danno Elettricita'",
	["DEn"] = "Danno Energia",
	["DFr"] = "Danno Freddo",
	["DFu"] = "Danno Fuoco",
	["DIm"] = "Danno Impatto",
	["DLu"] = "Danno Lumen",
	["DNa"] = "Danno Natura",
	["DPe"] = "Danno Perforazione",
	["DPs"] = "Danno Psichico",
	["DTa"] = "Danno Taglio",
	["DTr"] = "Danno Trauma",
	["DUm"] = "Danno Umbra",
	["Dmg"] = "Danno Fisico",

	["EEl"] = "Efficacia Elettricita'",
	["EFr"] = "Efficacia Freddo",
	["EFu"] = "Efficacia Fuoco",

	["RAc"] = "Resistenza Acido",
	["RCh"] = "Resistenza Caos",
	["RDi"] = "Resistenza danni Divini",
	["REl"] = "Resistenza Elettricita'",
	["REm"] = "Resistenza danni Elementali",
	["REn"] = "Resistenza Energia",
	["RFr"] = "Resistenza Freddo",
	["RFs"] = "Resistenza al Fisico",
	["RFu"] = "Resistenza Fuoco",
	["RIm"] = "Resistenza Impatto",
	["RLu"] = "Resistenza Lumen",
	["RMg"] = "Resistenza Magici",
	["RNa"] = "Resistenza Natura",
	["RPe"] = "Resistenza Perforazione",
	["RPs"] = "Resistenza danno Psichico",
	["RTT"] = "Resistenza Tutto",
	["RTa"] = "Resistenza Taglio",
	["RTr"] = "Resistenza Trauma",
	["RUm"] = "Resistenza Umbra",

	["For"] = "Forza",
	["Des"] = "Destrezza",
	["Cos"] = "Costituzione",
	["Int"] = "Intelligenza",
	["Sag"] = "Saggezza",
	["Car"] = "Carisma",

	["Let"] = "Letalita'",
	["Ast"] = "Astuzia",
	["Vit"] = "Vitalità",
	["Per"] = "Percezione",
	["Prc"] = "Precisione",
	["Pen"] = "Penetrazione",

	["Arm"] = "Classe Armatura",
	["Crt"] = "Colpo Critico",
	["CCF"] = "Corpo a Corpo Fisico",
	["CCM"] = "Corpo a Corpo Magico",
	["IsA"] = "Incantesimo su Arma",
	["PdG"] = "Pittura di Guerra",
	["Mag"] = "Potere Magico",
	["Spc"] = "Potere Speciale",
	["BSc"] = "Bloccare con lo Scudo",
	["Nms"] = "Nemesi",

	["PfR"] = "Recupero Punti Ferita",
	["MnR"] = "Recupero Mana",
	["MvR"] = "Recupero Movimento",

	["PF"]	= "Punti Ferita",
	["Mn"]	= "Mana", 
	["Mv"]	= "Movimento", 
}
--
function ui.fIsStatistics(s)
  s = ansi2string(decho2ansi(s))
  --
  for k, i in pairs(replacements) do
    s = string.gsub(s, k, "")       -- statistics
  end
  --
  s = string.gsub(s, "%d+d%d+", "") -- dices
  --
  s = string.gsub(s, "-?%d+", "")   -- values
  --
  s = string.gsub(s, " ", "")       -- white space
  --
  return (string.len(s) == 0)
end
--
function ui.fUpdateEndowment()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateEndowment()")
  --
  local distance = 2; 
  local min_w = 100;
  local max_w = 150;
  local w_h = GUI.Endowment.Main:get_height() - distance;
  local w_w = GUI.Endowment.Main:get_width() -  distance;
  local h = distance + 28;
  local w = distance + min_w;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c, total
  local orderTable = {}
  --
  -- Order Items
  for item in pairs(ui.equipment) do
    if (ui.equipment[item].used) then
      orderTable[#orderTable+1] = item
    end
  end
  --
  table.sort(orderTable, function (item1, item2)
                           return (ui.equipment[item1].number &lt; ui.equipment[item2].number)
                         end )
  --
  total = math.min(#orderTable, 25);
  tot_r = math.max(1, math.min(math.floor(w_h / h), total));
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  --
  -- Recalc w 
  w = math.min(w_w / tot_c, distance + max_w)
  --
  for i = 1, 25 do
    --
    -- Show if inside box
    if (r &gt; tot_r) or (i &gt; total) then
      GUI.Endowment.Main["Item"..i]:hide();
    else
      local item = orderTable[i]
      --
      -- Status color
      local statusColor = "black"
      local status = string.gsub(ui.equipment[item].status, "%%", "")
      --
      status = tonumber(status);
      if (status &lt; 20) then
        statusColor = "brown"
      elseif (status &lt; 40) then
        statusColor = "red"
      elseif (status &lt; 60) then
        statusColor = "orange"
      elseif (status &lt; 80) then
        statusColor = "yellow"
      elseif (status &lt; 100) then
        statusColor = "ansiYellow"
      end
      --      --
      -- Number
      GUI.Endowment.Main["Item"..i].Index:echo("&lt;center&gt;"..ui.equipment[item].number)
      --
      -- Status
      GUI.Endowment.Main["Item"..i].Status:setFgColor(statusColor)
      GUI.Endowment.Main["Item"..i].Status:echo("&lt;center&gt;"..ui.equipment[item].status)

  --
  --local ratio = (75 - time_left) / 75
  --status = 100 - status;
  --GUI.Endowment.Main["Item"..i].Status:setStyleSheet([[
  --  border: 1px inset rgb(]]..ui.colors.wBorder..[[);
  --  border-top: none;
  --  border-bottom-left-radius: 5px;
  --  border-bottom-right-radius: 10px;
  --  background: qconicalgradient(cx:0.5, cy:0.5, angle: 90, stop:0 black, stop:]]..status..[[ transparent stop:]]..status+0.01 ..[[ red);
  --]])
  --
      --
      -- Name
      if (ui.parameters.widgets.endowment.type == "name") then
        GUI.Endowment.Main["Item"..i].Text:echo("&lt;center&gt;"..string.gsub(ui.fRemoveArticle(ui.equipment[item].name), "(%a)([%w_']*)", ui.fTitleCase));
      else
        GUI.Endowment.Main["Item"..i].Text:echo("&lt;center&gt;"..ui.equipment[item].slot);
      end
      --
      -- Level
      GUI.Endowment.Main["Item"..i].Level:echo("&lt;center&gt;"..ui.equipment[item].level);
      --
      -- Slot
      GUI.Endowment.Main["Item"..i].Slot:echo("&lt;center&gt;"..ui.equipment[item].short);
      --
      -- Type (determinate color)
      local BGColor = "grey"
      local t = ansi2string(decho2ansi(ui.equipment[item].type))
      --
      -- T = Trash, C = common, U = Uncommon, R = Rare, E = Epic, L = Leggend
      if (t == "C") then
        t = "&lt;color=white&gt;Comune&lt;/color&gt;"
        BGColor = "white"
      elseif (t == "U") then
        t = "Non comune"
        BGColor = "lime"
      elseif (t == "R") then
        t = "Raro"
        BGColor = "rgb(58,120,242)"
      elseif (t == "E") then
        t = "Epico"
        BGColor = "blue"
      elseif (t == "L") then
        t = "Leggendario"
        BGColor = "orange"
      elseif (t == "S") then
        t = "Set astrale"
        BGColor = "yellow"        
      elseif (t == "A") then
        t = "Astrale"
        BGColor = "cyan"        
      else
        t = "Spazzatura"
        BGColor = "grey"
      end
      --
      -- CSS
      GUI.Endowment.Main["Item"..i].Text:setStyleSheet(GUI.CSS.ItemText..[[
        background-color: ]]..BGColor..[[;
      ]])
      --
      GUI.Endowment.Main["Item"..i]:setStyleSheet([[QLabel{
        ]]..GUI.CSS.Item..[[
        background-color: ]]..BGColor..[[;
      }]])        
      --
      -- Stat for ToolTip
      local stat = ""
      if (ui.equipment[item].stat) and (ui.equipment[item].stat ~= "") then
        stat = "&lt;lu&gt;"..ansi2string(decho2ansi(ui.equipment[item].stat)).."&lt;/lu&gt;"
        stat = string.gsub(stat, "(-?%d+ %S+)", "&lt;li&gt;▷ %1&lt;/li&gt;")      -- Numeric value
        stat = string.gsub(stat, "(%d+d%d+)", "&lt;li&gt;▷ %1 Danno&lt;/li&gt;")  -- Dice ('x'd'y')
        stat = string.gsub(stat, "[a-zA-Z]+", replacements)           -- Stat
      end
      --
      -- ToolTip
      local toolTip = '&lt;p style="text-align: center;"&gt;&lt;br&gt;&lt;b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;'..string.upper(ansi2string(decho2ansi(ui.equipment[item].name)))..'&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;br&gt;'..
                      '&lt;i&gt;Indossato &amp;lt;'..ui.equipment[item].slot..'&amp;gt;&lt;/i&gt;&lt;/p&gt;'..
                      stat..
                      '&lt;p style="text-align: right;"&gt;&lt;i&gt;'..t..'&lt;/i&gt; [Liv. '..ui.equipment[item].level..']&lt;/p&gt;'
      --
      -- ToolTip identificated object
      if (ui.identification) then
        toolTip = toolTip.."&lt;hr&gt;"..
        '&lt;p style="text-align: center;"&gt;&lt;b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;'..string.upper(ui.identification.name or "no name")..'&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;br&gt;'..
        '&lt;i&gt;Identificato &amp;lt;'..(ui.identification.slot or '-')..'&amp;gt;&lt;/i&gt;&lt;/p&gt;'
        if (ui.identification.bonus) then
          toolTip = toolTip.."&lt;lu&gt;"
          for _, i in pairs(ui.identification.bonus) do
            toolTip = toolTip.."&lt;li&gt;▷ "..i.."&lt;/li&gt;"
          end
          toolTip = toolTip.."&lt;/lu&gt;"
        end
        toolTip = toolTip..'&lt;p style="text-align: right;"&gt;&lt;i&gt;'..'RARITA'..'&lt;/i&gt; [Liv. '..(ui.identification.level or '-')..']&lt;/p&gt;'              
      end
      --
      GUI.Endowment.Main["Item"..i]:setToolTip(toolTip, 10);
      --
      GUI.Endowment.Main["Item"..i]:resize(w - distance, h - distance)
      GUI.Endowment.Main["Item"..i]:move(distance + (c-1)*w, distance + (r-1)*h)
      GUI.Endowment.Main["Item"..i]:show();
      --
      c = c + 1
      if (c &gt; tot_c) then
        c = 1;
        r = r + 1
      end
    end
  end
end
--
function ui.fEndowmentTypeClicked()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fEndowmentTypeClicked()")
  --
  if (ui.parameters.widgets.endowment.type == "name") then
    ui.parameters.widgets.endowment.type = "slot"
    GUI.Endowment.Button_refresh:echo("&lt;center&gt;Name");
  else
    ui.parameters.widgets.endowment.type = "name"
    GUI.Endowment.Button_refresh:echo("&lt;center&gt;Slot");
  end
  --
  --
  expandAlias("eq")
  expandAlias("eq stat")  -- Chiamerà ui.fUpdateEndowment()
  --
  ui.fSaveFileParameters()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Generic</name>
				<packageName></packageName>
				<script>function ui.fOrderedPairs(t, state)
  --
  local function ui_fGenOrderedIndex(t)
    local orderedIndex = {}
    --
    for key in pairs(t) do
      table.insert(orderedIndex, key)
    end
    --
    table.sort(orderedIndex)
    --
    return orderedIndex
  end
  --
  local function ui_fOrderedNext(t, state)
    -- Equivalent of the next function, but returns the keys in the alphabetic
    -- order. We use a temporary ordered key table that is stored in the
    -- table being iterated.
    local key = nil
    --
    if (state == nil) then
      --
      -- First time, generate the index
      t.__orderedIndex = ui_fGenOrderedIndex(t)
      key = t.__orderedIndex[1]
    else
      --
      -- Fetch the next value
      for i = 1,table.getn(t.__orderedIndex) do
        if t.__orderedIndex[i] == state then
          key = t.__orderedIndex[i+1]
        end
      end
    end
    --
    if (key) then
      return key, t[key]
    end
    --
    -- No more value to return, cleanup
    t.__orderedIndex = nil
    --
    return
  end
  --
  -- Equivalent of the pairs() function on tables. Allows to iterate in order
  return ui_fOrderedNext, t, state
end
--
function ui.fFormatEcho(text, level)
  local tab = ""
  --
  if (level) and (level &gt; 0) then 
    for i=2, level do
      tab = tab.."    "
    end
    tab = tab..ui.fGetOperatorFormattedText("  » ")
  end
  --
  return ui.echo..tab..ui.colors.text..text.."&lt;r&gt;"
end
--
function ui.fEcho(text, level)
  cecho(ui.fFormatEcho(text, level))
end
--
function ui.fEchon(text, level)
  cecho(ui.fFormatEcho(text, level).."\n")
end
--
function ui.fEcho2n(text, level)
  cecho(ui.fFormatEcho(text, level).."\n\n")
end
--
function ui.fDebug(text, level)
  level = level or 1
  --
  if (ui.enDebug &gt;= level) then
    ui.fEchon("&lt;orange&gt;[DEBUG ] &lt;white&gt;("..getTime(true, "hh:mm:ss.zzz")..") "..ui.colors.text..text.."&lt;r&gt;")
  end
end
--
function ui.fLog(text)
  text = "\n&lt;128,128,128:"..ui.colors.wBackground.."&gt;"..os.date("%H:%M:%S").." - &lt;255,255,255:"..ui.colors.wBackground.."&gt;"..text.."\n"
  --
  GUI.Chat.Main.All:decho(text)
  GUI.Chat.Main.Private:decho(text)
  --GUI.Chat.Main.Public:decho(text)
end
--
function ui.fError(text)
  text = ui.echo..ui.colors.error.."[ERRORE] "..ui.colors.text..text.."&lt;r&gt;\n\n"
  --
  cecho(text)
end
--
function ui.fTitle(text)
  local title = "\n"..ui.echo..ui.colors.title..text.."\n"
  --
  text = string.gsub(ui.echo..text, "\&lt;%a+\&gt;", "")
  for i=1, text:len() do
    title = title.."-"
  end
  title = title.."\n"
  --uih
  return title
end
--
function ui.fdigitNumber(number, digit)
  number = ""..(number or "")
  digit = tonumber(digit or 2) or 2;
  --
  for i = string.len(number), digit-1 do
    number = " "..number
  end
  --
  return number
end
--
function ui.fGetNumberFormattedText(number, digit)
  return "&lt;ansiMagenta&gt;[&lt;white&gt;"..ui.fdigitNumber(number, digit).."&lt;ansiMagenta&gt;]".."&lt;r&gt;"
end
--
function ui.fRemoveArticle(text)
  text = " "..text.." "
  text = string.gsub(text, "&gt;", "&gt; ")
  text = string.gsub(text, " [aA] ", " ")
  text = string.gsub(text, " [aA][dD] ", " ")
  text = string.gsub(text, " [aA][lL] ", " ")
  text = string.gsub(text, " [cC][oO][nN] ", " ")
  text = string.gsub(text, " [dD]'", " ")
  text = string.gsub(text, " [dD][aA] ", " ")
  text = string.gsub(text, " [dD][iI] ", " ")
  text = string.gsub(text, " [dD][eE][iI] ", " ")
  text = string.gsub(text, " [dD][eE][lL] ", " ")
  text = string.gsub(text, " [dD][eE][lL][lL]'", " ")
  text = string.gsub(text, " [dD][eE][gG][lL][iI] ", " ")
  text = string.gsub(text, " [dD][eE][lL][lL][aA] ", " ")
  text = string.gsub(text, " [dD][eE][lL][lL][eE] ", " ")
  text = string.gsub(text, " [dD][eE][lL][lL][oO] ", " ")
  text = string.gsub(text, " [eE] ", " ")
  text = string.gsub(text, " [gG][lL][iI] ", " ")
  text = string.gsub(text, " [iI] ", " ")
  text = string.gsub(text, " [iI][lL] ", " ")
  text = string.gsub(text, " [iI][nN] ", " ")
  text = string.gsub(text, " [lL]'", " ")
  text = string.gsub(text, " [lL][aA] ", " ")
  text = string.gsub(text, " [lL][eE] ", " ")
  text = string.gsub(text, " [lL][oO] ", " ")
  text = string.gsub(text, " [pP][aA][iA][oOaA] ", " ")
  text = string.gsub(text, " [uU][nN] ", " ")
  text = string.gsub(text, " [uU][nN]'", " ")
  text = string.gsub(text, " [uU][nN][aA] ", " ")
  text = string.gsub(text, " [uU][nN][oO] ", " ")
  text = string.gsub(text, "&gt; ", "&gt;")
  text = string.trim(text)
  --
  return text
end
--
function ui.fParsingItem(text)
  --
  text = string.gsub(text, "%.%.%.", "")
  --
  local good = string.find(text, "luce blu")
  if (good) then
    text = string.gsub(text, "Ha un alone di &lt;r&gt;&lt;[%d,:]+&gt;luce blu", "")
    text = string.gsub(text, "Hanno un alone di &lt;r&gt;&lt;[%d,:]+&gt;luce blu", "")
  end
  --
  local evil = string.find(text, "luce rossa")
  if (evil) then
    text = string.gsub(text, "Ha un alone di &lt;r&gt;&lt;[%d,:]+&gt;luce rossa", "")
    text = string.gsub(text, "Hanno un alone di &lt;r&gt;&lt;[%d,:]+&gt;luce rossa", "")
  end
  --
  local bright = string.find(text, "alone luminoso")
  if (bright) then
    text = string.gsub(text, "Ha un &lt;r&gt;&lt;[%d,:]+&gt;alone luminoso", "")
    text = string.gsub(text, "Hanno un &lt;r&gt;&lt;[%d,:]+&gt;alone luminoso", "")
  end
  --
  local noisy = string.find(text, "forte ronzio")
  if (noisy) then
    text = string.gsub(text, "Emette un &lt;r&gt;&lt;[%d,:]+&gt;forte ronzio", "")
    text = string.gsub(text, "Emettono un &lt;r&gt;&lt;[%d,:]+&gt;forte ronzio", "")
  end
  --
  local brittle = string.find(text, "molto fragil")
  if (brittle) then
    text = string.gsub(text, "Sembra molto fragile", "")
    text = string.gsub(text, "Sembrano molto fragili", "")
  end
  --
  text = string.gsub(text, "&lt;[%d,:]+&gt;&lt;r&gt;", "")
  --
  return text, good, evil, bright, noisy, brittle
end
--
function ui.fGetCommandFormattedText(command)
  return ui.colors.command..command.."&lt;r&gt;"
end
--
function ui.fGetOperatorFormattedText(operator)
  return ui.colors.operator..operator.."&lt;r&gt;"
end
--
function ui.fGetInputFormattedText(input)
  return ui.colors.input..input.."&lt;r&gt;"
end
--
function ui.fExpandCommand(value)
  if string.match(value, "/") then
    return string.split(value, "%s*/%s*")
  end
  --
  return string.split(value, "%s*;%s*")
end
--
function ui.fTitleCase(first, rest)
   return first:upper()..rest:lower()
end
--
function ui.fExecutePath(table, option)
  if (not option) then
    --
    -- execute all
    for i = 1, #table do
      expandAlias(table[i])
    end
  else
    local itemNumber = tonumber(option)
    if (itemNumber) then
      if (itemNumber == 0) then
        --
        -- Show all
        for i = 1, #table do
          cecho(ui.fGetNumberFormattedText(i).." "..ui.fGetAliasOutputFormattedText(table[i]).."\n")
        end
      elseif (itemNumber &gt;= 1) and (itemNumber &lt;= #table) then
        expandAlias(table[itemNumber])
      else
        ui.fError("Indice non valido.")
      end
    else
      --
      -- execute command for all (es. tell Pippo)
      for i = 1, #table do
        send(option.." "..i..") "..table[i]:gsub("(%s*;%s*)", " | "))
      end    
    end
  end
end
--
function ui.fDeleteDirectory(dir)
  for file in lfs.dir(dir) do
    local file_path = dir..'/'..file
    --
    if (file ~= ".") and (file ~= "..") then
      if (lfs.attributes(file_path, 'mode') == 'file') then
        os.remove(file_path)
      elseif (lfs.attributes(file_path, 'mode') == 'directory') then
        deletedir(file_path)
      end
    end
  end
  lfs.rmdir(dir)
end
--
function ui.fCopyFile(old_path, new_path)
  local old_file = io.open(old_path, "rb")
  local new_file = io.open(new_path, "wb")
  local old_file_sz, new_file_sz = 0, 0
  --
  if (not old_file) or (not new_file) then
    return false
  end
  --
  local block = old_file:read(2^13)
  while block do
    new_file:write(block)
    block = old_file:read(2^13)
  end
  --
  old_file_sz = old_file:seek("end")
  old_file:close()
  --
  new_file_sz = new_file:seek("end")
  new_file:close()
  --
  return new_file_sz == old_file_sz
end
--
-- Return true if t1 == t2
function ui.fTableCompare(o1, o2, ignore_mt)
  local o1Type = type(o1)
  local o2Type = type(o2)
  --
  -- Same object
  if (o1 == o2) then
    return true
  end
  --
  -- Different type
  if (o1Type ~= o2Type) then 
    return false 
  end
  --
  -- Same type but not table, already compared above
  if (o1Type ~= 'table') then 
    return false 
  end
  --
  -- Use metatable method
  if (not ignore_mt) then
    local mt1 = getmetatable(o1)
    --
    if mt1 and mt1.__eq then
      -- Compare using built in method
      return o1 == o2
    end
  end
  --
  -- Iterate over o1
  for key1, value1 in pairs(o1) do
    local value2 = o2[key1]
    --
    if (value2 == nil) or (ui.fTableCompare(value1, value2, ignore_mt) == false) then
      return false
    end
  end
  --
  -- check keys in o2 but missing from o1
  for key2, _ in pairs(o2) do
    if (o1[key2] == nil) then 
      return false 
    end
  end
  --
  return true
end
--
function ui.fHasbit(x, p)
  x = tonumber(x)
  p = tonumber(p)
  --
  p = 2 ^ (p - 1)
  --
  return (x % (p + p) &gt;= p)
  --return (math.mod(x, p+p) &gt;= p)       
end
--
function ui.fGetColor(color)
  local tabColor = {
    ["$c0000"] = "#080808", -- Nero 
    ["$c0001"] = "#870000", -- Rosso scuro 
    ["$c0002"] = "#008700", -- Verde scuro 
    ["$c0003"] = "#878700", -- Marrone 
    ["$c0004"] = "#000087", -- Blu 
    ["$c0005"] = "#870087", -- Viola 
    ["$c0006"] = "#008787", -- Cyan 
    ["$c0007"] = "#a8a8a8", -- Grigio (default)        
    ["$c0008"] = "#767676", -- Grigio scuro
    ["$c0009"] = "#ff0000", -- Rosso chiaro
    ["$c0010"] = "#00ff00", -- Verde chiaro
    ["$c0011"] = "#ffff00", -- Giallo
    ["$c0012"] = "#0000ff", -- Blu chiaro
    ["$c0013"] = "#ff00ff", -- Viola chiaro
    ["$c0014"] = "#00ffff", -- Celeste chiaro
    ["$c0015"] = "#ffffff", -- Bianco
  }
  --
  -- $chfRRGGBB
  if (string.find(color, "$chf")) then
    color = string.gsub(color, "$chf", "#")
  --
  -- $cXXXX
  elseif (string.find(color, "$c")) then
    color = tabColor[color] or tabColor["$c0007"]
  end
  --
  return color
end
--
function ui.fConvertColorString(s)
  local tabColor = {
    ["$c0000"] = "&lt;black&gt;", -- Nero 
    ["$c0001"] = "&lt;ansiRed&gt;", -- Rosso scuro 
    ["$c0002"] = "&lt;DarkGreen&gt;", -- Verde scuro 
    ["$c0003"] = "&lt;brown&gt;", -- Marrone 
    ["$c0004"] = "&lt;ansiBlue&gt;", -- Blu 
    ["$c0005"] = "&lt;purple&gt;", -- Viola 
    ["$c0006"] = "&lt;ansiCyan&gt;", -- Cyan 
    ["$c0007"] = "&lt;r&gt;", -- Grigio (default)        
    ["$c0008"] = "&lt;DimGrey&gt;", -- Grigio scuro
    ["$c0009"] = "&lt;red&gt;", -- Rosso chiaro
    ["$c0010"] = "&lt;green&gt;", -- Verde chiaro
    ["$c0011"] = "&lt;yellow&gt;", -- Giallo
    ["$c0012"] = "&lt;blue&gt;", -- Blu chiaro
    ["$c0013"] = "&lt;violet&gt;", -- Viola chiaro
    ["$c0014"] = "&lt;cyan&gt;", -- Celeste chiaro
    ["$c0015"] = "&lt;white&gt;", -- Bianco
  }
  local codes = s:gmatch("$c%d%d%d%d")
  --
  for code in codes do
    local val = tabColor[code] or tabColor["$c0007"]
    --
    s = s:gsub(code, val)
  end
  s = s:gsub("$crk%d%d%d%d%d%d%d%d", "")
  --
  return s
end
--
function ui.fAddMain(sender, CSS_Border, CSS_Main)
  if (sender) then
    sender.Border = Geyser.Label:new2({
      name = sender.name..".Border",
      x = 4,
      y = 24,
      width = "100%-8",
      height = "100%-28",
    }, sender)
    sender.Border:enableClickthrough()
    sender.Border:setStyleSheet(CSS_Border);
    
    sender.Main = Geyser.Label:new2({
      name = sender.name..".Main",
      x = 5,
      y = 5,
      width = "100%-10",
      height = "100%-10",
    }, sender.Border)
    sender.Main:enableClickthrough()
    sender.Main:setStyleSheet(CSS_Main);
  end
end
--
function ui.fAddSpace(s, l, align)
  local sl
  --
  s = s or "";
  align = align or "c"
  sl = s:len()
  --
  if (sl &lt; l) then
    for i = sl+1, l do
      if (align == "r") then
        s = " "..s
      elseif (align == "l") then
        s = s.." "
      elseif (i%2==0) then
        s = s.." "
      else
        s = " "..s        
      end
    end
  end
  --
  return s
end
--
function ui.fWindowResize(eventName, containerName)
  ui.fUpdateAffects()
  ui.fUpdateAliasButton()
  ui.fUpdateCooldowns()
  ui.fUpdateEndowment()
  ui.fUpdateGroup()
  ui.fUpdateAllTargetButtons()
end
--
function ui.fSetBorderMode(sender, mode)
  --
  -- Transparent (Mode = true)
  if (mode) then
    --
    -- Widget
    sender.adjLabelstyle = GUI.CSS.WidgetTransparent
    sender.adjLabel:setStyleSheet(sender.adjLabelstyle) 
    --
    -- Internal border
    sender.Border:setStyleSheet(GUI.CSS.BorderTransparent);
  --
  -- Solid (Mode = false)
  else
    --
    -- Widget
    sender.adjLabelstyle = GUI.CSS.Widget
    sender.adjLabel:setStyleSheet(sender.adjLabelstyle) 
    --
    -- Internal border
    sender.Border:setStyleSheet(GUI.CSS.Border);
  end
end
--
function ui.cLink(s)
  s = s or ""
  return "&lt;gold&gt;[&lt;LightYellow&gt;"..s.."&lt;gold&gt;]&lt;r&gt;"
end
--
function ui.fLevelColor(opponentLevel, playerLevel)
  --
  -- Level color
  local levelDif = tonumber(opponentLevel) - tonumber(playerLevel or 0)
  local color = "grey"
  --
  if (levelDif &lt; -5) then
    color = "grey"
  elseif (levelDif &lt; 0) then
    color = "green"
  elseif (levelDif == 0) then
    color = "white"
  elseif (levelDif &lt; 10) then
    color = "yellow"
  else
    color = "red"
  end
  --
  return color
end
--
function ui.fFolderExists(folder)
  local currentdir = lfs.currentdir()
  local ret = lfs.chdir(folder)
  --
  lfs.chdir(currentdir)
  --
  return ret
end
--
function ui.updateAllWidgets()
  --
  -- Update Target Buttons
  ui.fUpdateAllTargetButtons()
  --
  --  Opponent and Groups are also targets. Widgets needed before updating
  ui.fUpdateOpponent()
  ui.fUpdateGroup()
  --
  -- Chat widget
  ui.fUpdateChat()
  --
  -- Player widget
  ui.fUpdatePlayer()
  --
  -- Alias Button widget
  ui.fUpdateAliasButton()
  --
  -- Affects widget
  ui.fUpdateAffects()
  --
  -- Map/Compass widget
  ui.fUpdateRoom()
  --
  -- Cooldowns
  ui.fUpdateCooldowns()
  --
  -- Endowment widget
  ui.fUpdateEndowment()
  --
  -- Help widget
  GUI.Help:hide()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>GMCP</name>
				<packageName></packageName>
				<script>--
function ui.fUpdateGMCP(event, ...)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateGMCP(&lt;white&gt;"..event.."&lt;r&gt;)", 3)
  --
  ui.previous = ui.previous or {}
  ui.previous.gmcp = ui.previous.gmcp or {}
  --
  -- CHAR
  if (event == "gmcp.char") then
    ui.previous.gmcp.char = ui.previous.gmcp.char or {}
    --
    -- Affects
    if (gmcp.char.affects) then
      ui.previous.gmcp.char.affects = ui.previous.gmcp.char.affects or {}
      --
      if (not ui.fTableCompare(gmcp.char.affects, ui.previous.gmcp.char.affects)) then
        ui.fUpdateAffects();
        --
        ui.previous.gmcp.char.affects = {}
        ui.previous.gmcp.char.affects = table.deepcopy(gmcp.char.affects);
      end
    end
    --
    -- Base
    if (gmcp.char.base) then
      ui.previous.gmcp.char.base = ui.previous.gmcp.char.base or {}
      --
      if (not ui.fTableCompare(gmcp.char.base, ui.previous.gmcp.char.base)) then
        ui.fUpdatePlayer();
        --
        -- Gold
        if (ui.previous.gmcp.char.base.gold) and (gmcp.char.base.gold) then
          local dif = gmcp.char.base.gold - ui.previous.gmcp.char.base.gold
          --if (dif &gt; 0) then
          --  ui.fLog("&lt;0,255,0:"..ui.colors.wBackground.."&gt;+"..dif.." mo")    
          --else
          if (dif &lt; 0) then
            ui.fLog("&lt;255,0,0:"..ui.colors.wBackground.."&gt;"..dif.." mo")
          end 
        end
        --
        ui.previous.gmcp.char.base = {}
        ui.previous.gmcp.char.base = table.deepcopy(gmcp.char.base);
      end
    end
    --
    -- Group
    if (gmcp.char.group) then
      ui.previous.gmcp.char.group = ui.previous.gmcp.char.group or {}
      --
      if (not ui.fTableCompare(gmcp.char.group, ui.previous.gmcp.char.group)) then
        ui.fUpdateGroup();
        ui.fUpdateRoom();
        --
        ui.previous.gmcp.char.group = {}
        ui.previous.gmcp.char.group = table.deepcopy(gmcp.char.group);
      end
    end
    --
    -- Vitalis
    if (gmcp.char.vitals) then
      ui.previous.gmcp.char.vitals = ui.previous.gmcp.char.vitals or {}
      --
      if (not ui.fTableCompare(gmcp.char.vitals, ui.previous.gmcp.char.vitals)) then
        --
        -- Player
        ui.fUpdatePlayer();
        --
        -- Opponent
        if (not ui.fTableCompare(gmcp.char.vitals.fighting, ui.previous.gmcp.char.vitals.fighting)) then
          ui.fUpdateOpponent();
        end
        --
        -- Player position
        if (gmcp.char.vitals.roomPos) and (gmcp.char.vitals.roomPos ~= ui.previous.gmcp.char.vitals.roomPos) then
          ui.player.roomPos = gmcp.char.vitals.roomPos 
          ui.fUpdateRoom()
        end
        --
        ui.previous.gmcp.char.vitals = {}
        ui.previous.gmcp.char.vitals = table.deepcopy(gmcp.char.vitals);
      end
    end
    --
    -- Cooldowns
    if (gmcp.char.cooldowns) then
      ui.previous.gmcp.char.cooldowns = ui.previous.gmcp.char.cooldowns or {}
      --
      if (not ui.fTableCompare(gmcp.char.cooldowns, ui.previous.gmcp.char.cooldowns)) then
        ui.fUpdateCooldowns()
        ui.previous.gmcp.char.cooldowns = {}
        ui.previous.gmcp.char.cooldowns = table.deepcopy(gmcp.char.cooldowns);
      end
    end
  --
  -- ROOM
  elseif (event == "gmcp.room") then
    ui.previous.gmcp.room = ui.previous.gmcp.room or {}
    --
    -- Room and Mapper
    if (not ui.fTableCompare(gmcp.room, ui.previous.gmcp.room)) then
      ui.previous.gmcp.room.info = ui.previous.gmcp.room.info or {}
      ui.previous.gmcp.room.info.exits = ui.previous.gmcp.room.info.exits or {}
      --
      -- Room
      if (gmcp.room.info.roomPos) and (gmcp.room.info.roomPos ~= ui.previous.gmcp.room.info.roomPos) then
        ui.player.roomPos = gmcp.room.info.roomPos -- or gmcp.char.vitals.roomPos or 5
      end
      ui.fUpdateRoom()
      --
      -- Mapper (only if change room or exits (ex secret found))
      if (gmcp.room.info.num ~= ui.previous.gmcp.room.info.num) or
         (not ui.fTableCompare(gmcp.room.info.exits, ui.previous.gmcp.room.info.exits)) then
        ui.fUpdateMapper()
      end
      --
      ui.previous.gmcp.room = {}
      ui.previous.gmcp.room = table.deepcopy(gmcp.room);
    end
  --
  -- OVERLAND
  elseif (event == "gmcp.overland") then
    ui.previous.gmcp.overland = ui.previous.gmcp.overland or {}
    --
    -- Overland
    if (not ui.fTableCompare(gmcp.overland, ui.previous.gmcp.overland)) then
      ui.fUpdateOverand();
      --
      ui.previous.gmcp.overland = {}
      ui.previous.gmcp.overland = table.deepcopy(gmcp.overland);
    end
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Group</name>
				<packageName></packageName>
				<script>--
function ui.fUpdateGroup()
  local distance = 2;
  local min_w = 150;
  local max_w = 250;
  local w_h = GUI.Group.Main:get_height() - distance;
  local w_w = GUI.Group.Main:get_width() -  distance;
  local h = distance + 45;
  local w = distance + min_w;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c, total
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateGroup()")
  --
  ui.group = {}
  --
  if (ui.enDebug &gt;= 2) then
    total = math.random(1, 10)
    local leader = math.random(0, total)
    for member=1, total do
      ui.group[member] = {
        name     = "Player "..member,
        isLeader = (member == leader),
        hp       = math.random(0, 100),
        maxhp    = 100,
        mana     = math.random(0, 100),
        maxmana  = 100,
        pow      = math.random(0, 100),
        maxpow   = 100,
        roomPos  = math.random(1, 9),
      }  
    end
  elseif (gmcp) and (gmcp.char) and (gmcp.char.group) then
    for member in pairs(gmcp.char.group) do
      local name = (gmcp.char.group[member].name or "")
      --
      if (name ~= ui.player.name) then
        ui.group[#ui.group+1] = {
          name     = gmcp.char.group[member].name or "",
          isLeader = gmcp.char.group[member].isLeader or false,
          hp       = gmcp.char.group[member].hp or 0,
          maxhp    = gmcp.char.group[member].maxhp or 0,
          mana     = gmcp.char.group[member].mana or 0,
          maxmana  = gmcp.char.group[member].maxmana or 0,
          pow      = gmcp.char.group[member].pow or 0,
          maxpow   = gmcp.char.group[member].maxpow or 0,
          roomPos  = gmcp.char.group[member].roomPos or 0,
          inRoomName = gmcp.char.group[member].inRoomName or "",
          inRoomVNum = tonumber(gmcp.char.group[member].inRoomVNum or ""),
        }
      end
    end
  end
  --
  total = math.min(#ui.group, 10);
  tot_r = math.max(1, math.min(math.floor(w_h / h), total));
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  --
  -- Recalc w if possible
  w = math.min(w_w / tot_c, distance + max_w)
  --
  for i = 1, 10 do
    mod = i % 10
    if (r &gt; tot_r) or (i &gt; total) then
      GUI.Group.Main["g"..mod]:hide()
      ui.fAssignTargetButton("g"..mod, nil)
    else
      --
      GUI.Group.Main["g"..mod]:resize(w - distance, h - distance);
      GUI.Group.Main["g"..mod]:move(distance + (c-1)*w, distance + (r-1)*h)
      --
      local nameShowed = string.gsub(ui.group[i].name, "(\$c%d+)", "")
      nameShowed = ui.fRemoveArticle(nameShowed)

      if (ui.group[i].isLeader) then
        GUI.Group.Main["g"..mod].Member:echo("&lt;center&gt;".."👑 "..ansi2string(nameShowed.." 👑"))
      else
        GUI.Group.Main["g"..mod].Member:echo("&lt;center&gt;"..ansi2string(nameShowed))
      end
      --
      GUI.Group.Main["g"..mod].Health:setValue(math.max(0, ui.group[i].hp), ui.group[i].maxhp, "&lt;p align=right&gt;"..ui.group[i].hp.."/"..ui.group[i].maxhp.."  &lt;/p&gt;")
      GUI.Group.Main["g"..mod].Mana:setValue(math.max(0, ui.group[i].mana), ui.group[i].maxmana)
      GUI.Group.Main["g"..mod].Stamina:setValue(math.max(0, ui.group[i].pow), ui.group[i].maxpow)
      --
      if (ui.room) and (ui.room.id) and (ui.group[i].inRoomVNum == tonumber(ui.room.id)) then 
        ui.group[i].inRoomName = '';
      end
      GUI.Group.Main["g"..mod].inRoomName:echo(ui.group[i].inRoomName)
      --
      GUI.Group.Main["g"..mod]:show();
      ui.fAssignTargetButton("g"..mod, nameShowed)
      --
      c = c + 1
      if (c &gt; tot_c) then
        c = 1;
        r = r + 1
      end
    end
  end
  --
  if (ui.room) and (ui.room.area) then
    ui.fHighlightArea(ui.room.areaId)
  end
  --
  ui.fUpdateAllTargetButtons()
  --
  GUI.Group:setTitle("Gruppo ["..total.."]")
end
--
-- Debug simulation
if (ui.enDebug) and (ui.enDebug &gt;= 2) then
  ui.fUpdateGroup()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Help</name>
				<packageName></packageName>
				<script>--
function ui.fHelp(cmd)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fHelp("..(cmd or "nil")..")")
  --
  local line
  --
  -- Restore widget
  clearWindow("GUI.Help.Main.Console")
  --
  -- Command
  if cmd and cmd ~= "" then
    cmd = cmd:lower():gsub(" ","_")
    if not ui.help[cmd] then
      cmd = "error"
    end
  else
    cmd = "help"
  end
  --
  -- Pharse lines
  for line in ui.help[cmd]:gmatch("([^\n]*)\n") do
    local str_match, end_match = rex.find(line, [[\&lt;(?&lt;tag&gt;[^&gt;\s]+)(?&lt;argument&gt;\s*[^&gt;]*)\&gt;(?&lt;inside&gt;.*?)\&lt;\/\k&lt;tag&gt;\&gt;]])
    while (str_match) do
      local before = ""
      local match  = string.sub(line, str_match, end_match);
      local after  = ""
      local tag, argument, inside = rex.match(match, [[\&lt;(?&lt;tag&gt;[^&gt;\s]+)(?&lt;argument&gt;\s*[^&gt;]*)\&gt;(?&lt;inside&gt;.*?)\&lt;\/\k&lt;tag&gt;\&gt;]])
      --
      if (str_match &gt; 1) then
        before = string.sub(line, 1, str_match-1);
      end
      --
      if (end_match &lt; string.len(line)) then
        after = string.sub(line, end_match+1, string.len(line));
      end
      --
      -- Before
      GUI.Help.Main.Console:cecho(before)
      --
      -- Match
      tag = tag:lower()
      --
      if (tag == "alias") then
        inside = ui.fGetAliasFormattedText(inside)          
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "aliasname") then
        inside = ui.fGetAliasNameFormattedText(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "aliasoutput") then
        inside = ui.fGetAliasOutputFormattedText(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "button") then
        inside = ui.colors.aliasButton..inside.."&lt;r&gt;"          
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "command") then
        inside = ui.fGetCommandFormattedText(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "exec") then
        local fgColor = string.gsub(ui.colors.link, "[\&lt;\&gt;]", "");
        argument = string.trim(argument);
        GUI.Help.Main.Console:cechoLink(ui.cLink(inside), [[expandAlias("]]..argument..[[")]], argument, true)
      --
      elseif (tag == "input") then
        inside = ui.fGetInputFormattedText(inside)          
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "keybind") then
        inside = ui.colors.keybind..inside.."&lt;r&gt;"          
        GUI.Help.Main.Console:cecho(inside)        
      --
      elseif (tag == "link") then
        local fgColor = string.gsub(ui.colors.link, "[\&lt;\&gt;]", "");
        argument = string.trim(argument);
        GUI.Help.Main.Console:cechoLink(ui.cLink(inside), [[ui.fHelp("]]..argument..[[")]], argument, true)
      --
      elseif (tag == "profile") then
        inside = ui.fGetSettingNameFormattedText(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "title") then
        inside = ui.fTitle(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "var") then
        inside = ui.fGetVarFormattedText(inside)
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "varname") then
        inside = ui.colors.varID..ui.varID..ui.colors.varName..inside.."&lt;r&gt;"
        GUI.Help.Main.Console:cecho(inside)
      --
      elseif (tag == "varvalue") then
        inside = ui.fGetVarValueFormattedText(inside)          
        GUI.Help.Main.Console:cecho(inside)
      else
        -- Match non riconosciuto
        GUI.Help.Main.Console:cecho(match)
      end
      --
      line = after
      str_match, end_match = rex.find(line, [[\&lt;(?&lt;tag&gt;[^&gt;\s]+)(?&lt;argument&gt;\s*[^&gt;]*)\&gt;(?&lt;inside&gt;.*?)\&lt;\/\k&lt;tag&gt;\&gt;]])
    end
    --
    -- line\after
    GUI.Help.Main.Console:cecho(line.."\n")
  end
  GUI.Help:show()
  GUI.Help.Main.Console:enableScrolling()
  GUI.Help.Main.Console:scrollUp()
  GUI.Help.Main.Console:scrollDown()
end
--
function ui.fHelp_links(htext, hlinktext, hurl, hcaption)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fHelp_links(...)")
  --
  --
  if (htext ~= nil) and (hlinktext ~= nil) and (hurl ~= nil) and (hcaption ~= nil) then
    --
    GUI.Help:cecho(ui.colors.text..htext.." ")
    --
    GUI.Help:cechoLink(ui.colors.link..hlinktext..ui.colors.text.."\n",
                       [[openWebPage("https://]]..hurl..[[")]],
                       hcaption,
                       true)
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Highlights</name>
				<packageName></packageName>
				<script>--
function ui.fGetHighlightFormattedText(highlight)
  if (ui.highlights[highlight]) then
    return "&lt;"..ui.highlights[highlight].color.."&gt;"..highlight.."&lt;r&gt;"
  end
  --
  return ""
end
--
function ui.fShowAllHighlights()
  local i = 0
  local num
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllHighlights()")
  --
  cecho(ui.fTitle("Highlights"))
  for highlight in pairs(ui.highlights) do
    i = i + 1
    cecho(ui.fGetNumberFormattedText(i).." "..ui.fGetHighlightFormattedText(highlight).."\n")
  end
  if (i&gt;0) then
    echo("\n")
  else
    cecho("Per maggiori info "..ui.fGetCommandFormattedText("uihelp uihighlights").."\n\n")
  end
end
--
function ui.fRemoveHighlight(highlight)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveHighlight("..(highlight.."nil")..")")
  --
  if (ui.highlights[highlight]) then
    if (ui.highlights[highlight].id) then
      killTrigger(ui.highlights[highlight].id)
    end
    ui.highlights[highlight] = nil
    --
    return true
  end
  --
  return false
end
--
function ui.fRemoveAllHighlights()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAllHighlights()")
  --
  for highlight in pairs(ui.highlights) do
    ui.fRemoveHighlight(highlight)
  end
  ui.highlights = {}
end
--
function ui.fAddHighlight(highlight, color)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveHighlight("..(highlight.."nil")..", "..(color.."nil")..")")
  --
  if ui.fColorCheck(color) then
    highlight = highlight or "" 
    if (highlight ~= "") then
      --
      -- Init highlight (if not exist)
      ui.highlights[highlight] = ui.highlights[highlight] or {}
      --
      -- Remove old highlight
      if (ui.highlights[highlight].id) then
        killTrigger(ui.highlights[highlight].id)
      end
      --
      -- Create trigger
      ui.highlights[highlight].id = tempRegexTrigger([[(?i)(?:^|\W|\s)(]]..highlight..[[)(?:\W|$|\s)]], function()
                                                                                                          selectString(matches[2], 1)
                                                                                                          fg(color)
                                                                                                          resetFormat()
                                                                                                        end)
      ui.highlights[highlight].color = color
      --
      return 1
    end
    --
    return -1 -- Invaid text
  end
  --
  return -2 -- Invalid color
end
--
-- Save Highlights data from file
function ui.fSaveFileHighlights()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSaveFileHighlights()")
  --
  if (ui.setting) then
    local file = ui.files.highlights.path..ui.setting.."/"..ui.files.highlights.name
    local highlightsDataToSave = {}
    --
    for highlight in pairs(ui.highlights) do
      highlightsDataToSave[highlight] = {}
      highlightsDataToSave[highlight].color = ui.highlights[highlight].color
    end
    table.save(file, highlightsDataToSave)
  end
end
--
-- Read Highlights data from file
function ui.fReadFileHighlights()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileHighlights()")
  --
  local file = ui.files.highlights.path..ui.setting.."/"..ui.files.highlights.name
  --
  if (ui.setting) then
    --
    -- Remove actual Highlights
    ui.highlights = ui.highlights or {}
    ui.fRemoveAllHighlights()
    --
    -- Load Highlights
    if (io.exists(file)) then
      table.load(file, ui.highlights)
    end
    --
    -- Create Highlights
    for highlight in pairs(ui.highlights) do
      ui.fAddHighlight(highlight, ui.highlights[highlight].color)
    end
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Init - CSS</name>
				<packageName></packageName>
				<script>function ui.initCSS()
  ui.fDebug("[&lt;white&gt;init&lt;r&gt;] CSS")
  --
  GUI = {}
  GUI.CSS = {}
  --
  -- Chat Header
  GUI.CSS.ChatHeader = [[
    QLabel{
      border: 1px outset rgba(]]..ui.colors.wBorder..[[, 0.7); 
      border-radius: 2px;
      background-color: rgb(]]..ui.colors.wButton..[[);
    }
    QLabel::hover{
      background-color: rgb(]]..ui.colors.wButtonHover..[[);
    }
  ]]
  --
  -- Item
  GUI.CSS.Item = [[
    border: 1px outset rgb(]]..ui.colors.wBorder..[[);
    border-radius: 12px;
  ]]
  --
  -- Item Left
  GUI.CSS.ItemLeft = [[
    border: 1px inset rgb(]]..ui.colors.wBorder..[[);
    border-top-left-radius: 10px;
    border-top-right-radius: 5px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 5px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Item Top Left
  GUI.CSS.ItemTopLeft = [[
    border: 1px inset rgb(]]..ui.colors.wBorder..[[);
    border-bottom: none;
    border-top-left-radius: 10px;
    border-top-right-radius: 5px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Item Bottom Left
  GUI.CSS.ItemBottomLeft = [[
    border: 1px inset rgb(]]..ui.colors.wBorder..[[);
    border-top: none;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 5px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Item Text
  GUI.CSS.ItemText = [[
    border: none;
    border-radius: 0px;
    qproperty-wordWrap: true;
  ]]
  --
  -- Item Top Right
  GUI.CSS.ItemTopRight = [[
    border: 1px inset rgb(]]..ui.colors.wBorder..[[);
    border-bottom: none;
    border-top-left-radius: 5px;
    border-top-right-radius: 10px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Item Bottom Right
  GUI.CSS.ItemBottomRight = [[
    border: 1px inset rgb(]]..ui.colors.wBorder..[[);
    border-top: none;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 10px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Border
  GUI.CSS.Border = [[
    border: 2px inset rgb(]]..ui.colors.wBorder..[[); 
    border-radius: 4px;
    background-color: rgb(]]..ui.colors.wBackground..[[);
  ]]
  --
  -- Border transparent
  GUI.CSS.BorderTransparent = [[
    border: none;
    padding: 2px;
    background: transparent;
  ]]
  --
  -- Target buttons
  GUI.CSS.Button = [[
    border: 2px outset #aa8822;
    border-radius: 5px 10px;
    qproperty-wordWrap: true;
  ]]
  --
  -- Buttons Icon
  GUI.CSS.ButtonsIcon = [[
    background: transparent;
    qproperty-wordWrap: true;
  ]]
  --
  -- Gauge back
  GUI.CSS.GaugeBack = [[
    border: none;
    border-radius: 5px;
    margin: 0px;
  ]]
  --
  -- Gauge front
  GUI.CSS.GaugeFront = [[
    border-radius: 3px;
    margin:  2px;
  ]]
  --
  -- Keybind
  GUI.CSS.Keybind = [[
    background: transparent;
  ]]
  --
  -- Level
  GUI.CSS.Level = [[
    border-image: url("]]..ui.files.images.path..[[borderRound.png") 0px stretch;
    background-color: rgb(]]..ui.colors.wBackground..[[);
    background: transparent;
  ]]
  --
  -- Widget Body
  
  GUI.CSS.Main = [[
    background: transparent;
  ]]
  --
  --
  GUI.CSS.Widget = [[
    border: 2px outset rgb(]]..ui.colors.wBorder..[[); 
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    background-color: rgb(]]..ui.colors.widget..[[);
  ]]
  --
  GUI.CSS.WidgetButton = [[
    QLabel{
      border-radius: 6px;
      background-color: rgb(]]..ui.colors.wButton..[[);
    }
    QLabel::hover{
      background-color: rgb(]]..ui.colors.wButtonHover..[[);
    }
  ]]
  --
  --
  GUI.CSS.WidgetTransparent = [[
    QWidget{
      border: none;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 4px;
      border-bottom-right-radius: 4px;
      padding: 2px;
      background: transparent;
    }
    QWidget::hover{
      border: 2px outset rgba(]]..ui.colors.wBorder..[[, 0.7); 
      background-color: rgba(]]..ui.colors.wBackground..[[, 0.7);
    }
  ]]
 end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Init - Help</name>
				<packageName></packageName>
				<script>function ui.initHelp()
ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Help")
--
ui.help = {}
--
ui.help.error = [[
Non esiste aiuto per questa parola

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.help = [[
&lt;title&gt;Lumen et Umbra UI Help&lt;/title&gt; Lumen et Umbra UI comprende un insieme di finestre (widget), script, trigger, etc, creati per personalizzare l'esperienza di gioco con il MUD Lumen et Umbra su client Mudlet. Usare il comando &lt;command&gt;uih[elp] &lt;comando&gt;&lt;/command&gt; o clicca sui link tra parentesi quadre per avere informazioni sugli argomenti disponibili.

&lt;yellow&gt;Witgets&lt;r&gt; &lt;link widgets&gt;Panoramica&lt;/link&gt;
  &lt;link affects&gt;Affects&lt;/link&gt;   ▷ Widget effetti attivi                      &lt;link mapper&gt;Mapper&lt;/link&gt;   ▷ Widget mappa 
  &lt;link buttons&gt;Buttons&lt;/link&gt;   ▷ Widget bottoni per alias                   &lt;link opponent&gt;Opponent&lt;/link&gt; ▷ Widget dati avversatrio 
  &lt;link chat&gt;Chat&lt;/link&gt;      ▷ Widget chat                                &lt;link player&gt;Player&lt;/link&gt;   ▷ Widget dati giocatore
  &lt;link cooldowns&gt;Cooldowns&lt;/link&gt; ▷ Widget cooldowns                           &lt;link room&gt;Room&lt;/link&gt;     ▷ Widget stanza 
  &lt;link endowment&gt;Endowment&lt;/link&gt; ▷ Widget equipaggiamento                     &lt;link targets&gt;Target&lt;/link&gt;   ▷ Widget bottoni per target 
  &lt;link group&gt;Group&lt;/link&gt;     ▷ Widget gruppo

&lt;yellow&gt;Comandi (principali):                                    Comandi (mappa):&lt;r&gt;
  &lt;link alias&gt;uia[liases]&lt;/link&gt;    ▷ Comando per gestire gli aliases       &lt;link go&gt;uig[o]&lt;/link&gt;     ▷ Comando per muoversi automaticamente a una stanza 
  &lt;link help&gt;uih[elp]&lt;/link&gt;       ▷ Questo help                           &lt;link info&gt;uii[nfo]&lt;/link&gt;   ▷ Comando avere informazioni su una stanza
  &lt;link highlight&gt;uihi[ghlights]&lt;/link&gt; ▷ Comando per gestione gli highlights   &lt;link search&gt;uis[earch]&lt;/link&gt; ▷ Comando per cercare una stanza
  &lt;link variable&gt;uiv[ariables]&lt;/link&gt;  ▷ Comando per gestione le variabili     &lt;link track&gt;uit[rack]&lt;/link&gt;  ▷ Comando per tracciare il percorso a una stanza

&lt;yellow&gt;Altri comandi:&lt;r&gt;
  &lt;link walk&gt;.&lt;/link&gt; o &lt;link walk&gt;..&lt;/link&gt;                 ▷ Comandi di walk e speedwalk
  &lt;link target&gt;g0..g9&lt;/link&gt; o &lt;link target&gt;o0&lt;/link&gt; o &lt;link target&gt;t1..t4&lt;/link&gt; ▷ Comandi per la gestione della variabile &lt;var&gt;target&lt;/var&gt;
  &lt;link button&gt;uib[uttons]&lt;/link&gt;              ▷ Comando per la gestione dei pulsanti del widget Button
  &lt;link color&gt;uic[olors]&lt;/link&gt;               ▷ Comando per la visualizzazione dei colori disponibili per gli highlights
  &lt;link fontsize&gt;uif[ontsize]&lt;/link&gt;             ▷ Comando per la gestione della dimensione dei font di aluni widget
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt;              ▷ Comando per la gestione dei tasti rapidi per aliases e targets
  &lt;link setting&gt;uiset[ting]&lt;/link&gt;              ▷ Comando per importare i setting da altri profili
  &lt;link reply&gt;uir[eply]&lt;/link&gt;                ▷ Comando per rispondere velocemente all'ultimo messsaggio ricevuto
  &lt;link widget&gt;uiw[idget]&lt;/link&gt;               ▷ Comando per il ripristino dei widget chiusi
]]
--
ui.help.affects = [[
&lt;title&gt;Widget Affects&lt;/title&gt;Il widget Affects visualizza automaticamente (via GMCP) i dati relativi agli effetti attivi sul personaggio. Ogni elemento del widget rappresenta un effetto attivo ed è composto dal suo nome (al centro), il tempo di permanenza (a sinistra, r=round, t=tick, P=permanente), il suo livello di resistenza al dispel (in alto a destra, in azzurro) e il suo valore di stack (in basso a destra, in arancione).

Rimanendo con il cursore del mouse su un effetto è possibile visualizzare in un tooltip le caratteristiche dell'effetto selezionato.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.alias = [[
&lt;title&gt;Aliases&lt;/title&gt;Gli aliases permettono di associare un testo semplice a uno o più comandi complessi. I comandi di un alias possono contenere variabili create con il comando &lt;link variable&gt;uiv[ariables]&lt;/link&gt; o altri alias creati precedenemente con il comando &lt;link alias&gt;uia[liases]&lt;/link&gt;. 
Per associare più comandi ad un alias utilizzare uno degli appositi separatori di comando (]]..ui.colors.separator..[[;&lt;r&gt; o ]]..ui.colors.separator..[[/&lt;r&gt;). Richiamando l'alias i comandi verranno eseguiti sequenzialmente dal primo all'ultimo.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uia[liases]&lt;/command&gt;                   Per visualizzare l'elenco degli aliases
  &lt;command&gt;uia[liases]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt;           Per visualizzare il singolo alias
  &lt;command&gt;uia[liases]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt; &lt;comandi&gt; Per creare o modificare un alias
  &lt;command&gt;uia[liases]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt; &lt;command&gt;remove&lt;/command&gt;    Per eliminare un alias
  &lt;command&gt;uia[liases] remove_all&lt;/command&gt;        Per eliminare tutti gli aliases

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt; &lt;input&gt;[argomento]&lt;/input&gt;           Per eseguire l'alias

&lt;yellow&gt;Carattere speciale&lt;r&gt; &lt;input&gt;#&lt;/input&gt;
Normalmente, durante l'esecuzione di un alias, l'input passato come parametro ad un alias viene appeso al comando o sostituito all'ultima variabile del comando (se presente). Il carattere speciale &lt;input&gt;#&lt;/input&gt; permette di specificare il punto esatto all'interno del comando dove inserire il testo di input.

&lt;yellow&gt;Carattere speciale&lt;r&gt; ]]..ui.colors.varID..ui.varID..[[&lt;r&gt;
Per utilizzare una variabile precedentemente dichiarata con il comando &lt;link variable&gt;uiv[ariables]&lt;/link&gt; all'interno di un alias usare il carattere speciale ]]..ui.colors.varID..ui.varID..[[&lt;r&gt; prima delnome della variabile.

&lt;yellow&gt;Caratteri speciali&lt;r&gt; ]]..ui.colors.separator..[[;&lt;r&gt; o ]]..ui.colors.separator..[[/&lt;r&gt;
Utilizzare uno dei seguenti carattere speciali per dividere più comandi all'interno dello stesso alias

&lt;yellow&gt;Esempio 1: Comando semplice&lt;r&gt;
  Dichiarazione:
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;hl&lt;/aliasName&gt; &lt;aliasOutput&gt;cast 'heal'&lt;/aliasOutput&gt;

  Esecuzione:
    ▷ &lt;aliasName&gt;hl&lt;/aliasName&gt;
    ◁ &lt;aliasOutput&gt;cast 'heal'&lt;/aliasOutput&gt;       

  Esecuzione con parametri:
    ▷ &lt;aliasName&gt;hl&lt;/aliasName&gt; Pippo
    ◁ &lt;aliasOutput&gt;cast 'heal'&lt;/aliasOutput&gt; Pippo 
    
  L'input viene appeso al comando.

&lt;yellow&gt;Esempio 2: Comando con variabile&lt;r&gt;
  Dichiarazione:
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;bt&lt;/aliasName&gt; bash &lt;varName&gt;target&lt;/varName&gt;   
   
  Con &lt;varName&gt;target&lt;/varName&gt; precedentemente inizializzato a &lt;varValue&gt;Pluto&lt;/varValue&gt;

  Esecuzione:
    ▷ &lt;aliasName&gt;bt&lt;/aliasName&gt;
    ◁ bash &lt;varValue&gt;Pluto&lt;/varValue&gt;

  Esecuzione con parameri:
    ▷ &lt;aliasName&gt;bt&lt;/aliasName&gt; Pippo
    ◁ bash Pippo
  
  L'ultima variabile viene sostituita dall'input. Il valore della variabile, in questo caso &lt;varName&gt;target&lt;/varName&gt;, non cambierà

&lt;yellow&gt;Esempio 3: Comando con più variabili&lt;r&gt;
  Dichiarazione:
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;aa&lt;/aliasName&gt; &lt;varName&gt;action&lt;/varName&gt; &lt;varName&gt;target&lt;/varName&gt;
  
  Con &lt;varName&gt;action&lt;/varName&gt; precedentemente inizializzata a &lt;varValue&gt;kick&lt;/varValue&gt; e &lt;varName&gt;target&lt;/varName&gt; a &lt;varValue&gt;Pluto&lt;/varValue&gt;
   
  Esecuzione:
    ▷ &lt;aliasName&gt;aa&lt;/aliasName&gt;
    ◁ &lt;varValue&gt;kick&lt;/varValue&gt; &lt;varValue&gt;Pluto&lt;/varValue&gt;

  Esecuzione con parameri:
    ▷ &lt;aliasName&gt;aa&lt;/aliasName&gt; Pippo
    ◁ &lt;varValue&gt;kick&lt;/varValue&gt; Pippo 
  
  L'ultima variabile viene sostituita dall'input. Il valore della variabile, in questo caso &lt;varName&gt;target&lt;/varName&gt;, non cambierà

&lt;yellow&gt;Esempio 4: Comandi multipli con input a posizione definita
  Dichiarazione:
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;dd&lt;/aliasName&gt; &lt;aliasOutput&gt;get&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; &lt;varName&gt;bag&lt;/varName&gt; ]]..ui.colors.separator..[[/&lt;r&gt; &lt;aliasOutput&gt;drink&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; ]]..ui.colors.separator..[[/&lt;r&gt; &lt;aliasOutput&gt;put&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; &lt;varName&gt;bag&lt;/varName&gt;
  
  Con &lt;varName&gt;bag&lt;/varName&gt; precedentemente inizializzata a &lt;varValue&gt;moltetasche&lt;/varValue&gt;

  Esecuzione con parameri:
    ▷ &lt;aliasName&gt;dd&lt;/aliasName&gt; limonata
    ◁ [1] &lt;aliasOutput&gt;get&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt; &lt;varValue&gt;moltetasche&lt;/varValue&gt;
    ◁ [2] &lt;aliasOutput&gt;drink&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt;
    ◁ [3] &lt;aliasOutput&gt;put&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt; &lt;varValue&gt;moltetasche&lt;/varValue&gt;
  
  Il carattere speciale &lt;input&gt;#&lt;/input&gt; verrà sostituito dall'imput. Si noti che in caso di mancanza di input, il carattere speciale &lt;input&gt;#&lt;/input&gt; verrà sostituito da uno spazio vuoto

&lt;yellow&gt;Esempio 5: Comandi multipli complessi con alias, variabili e input a posizione definita
  Dichiarazione (si faccia riferimento agli esempi precedenti):
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;gg&lt;/aliasName&gt; &lt;aliasOutput&gt;get&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; &lt;varName&gt;bag&lt;/varName&gt;
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;pp&lt;/aliasName&gt; &lt;aliasOutput&gt;put&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; &lt;varName&gt;bag&lt;/varName&gt;
    ▷ &lt;command&gt;uia&lt;/command&gt; &lt;aliasName&gt;dd&lt;/aliasName&gt; &lt;aliasName&gt;gg&lt;/aliasName&gt; &lt;input&gt;#&lt;/input&gt; ]]..ui.colors.separator..[[/&lt;r&gt; &lt;aliasOutput&gt;drink&lt;/aliasOutput&gt; &lt;input&gt;#&lt;/input&gt; ]]..ui.colors.separator..[[/&lt;r&gt; &lt;aliasName&gt;pp&lt;/aliasName&gt; &lt;input&gt;#&lt;/input&gt;
  
  Con &lt;varName&gt;bag&lt;/varName&gt; precedentemente inizializzata a &lt;varValue&gt;moltetasche&lt;/varValue&gt;

  Esecuzione con parameri:
    ▷ &lt;aliasName&gt;dd&lt;/aliasName&gt; limonata
    ◁ [1] &lt;aliasName&gt;gg&lt;/aliasName&gt; limonata
      ◁ &lt;aliasOutput&gt;get&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt; &lt;varValue&gt;moltetasche&lt;/varValue&gt;
    ◁ [2] &lt;aliasOutput&gt;drink&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt;
    ◁ [3] &lt;aliasName&gt;pp&lt;/aliasName&gt; limonata
      ◁ &lt;aliasOutput&gt;put&lt;/aliasOutput&gt; &lt;input&gt;limonata&lt;/input&gt; &lt;varValue&gt;moltetasche&lt;/varValue&gt;
  
&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt; ▷ Comando per la gestione dei tasti rapidi per aliases e targets
 
Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.buttons = [[
&lt;title&gt;Widget Button&lt;/title&gt;Il widget Button contiene dei pulsanti che posso essere assonciati ad un alias creato precedentemente. I pulsanti sono identificati da una lettera (&lt;red&gt;a&lt;r&gt;, &lt;green&gt;b&lt;r&gt; oppure &lt;blue&gt;c&lt;r&gt;) e un numero (da 0 a 9) per un totale di 30 pulsanti configurabili (da &lt;red&gt;a0&lt;r&gt; a &lt;red&gt;a9&lt;r&gt;, da &lt;green&gt;b0&lt;r&gt; a &lt;green&gt;b9&lt;r&gt; e da &lt;blue&gt;c0&lt;r&gt; a &lt;blue&gt;c9&lt;r&gt;).

I pulsanti sono ragruppati per lettera ed è possibile passare da un gruppo all'altro cliccando sui pulsanti a, b e c sulla barra del titolo del widget.

Tramite il comando &lt;link button&gt;uib[uttons]&lt;/link&gt; è possibile configurare i pusanti del widget.

Cliccare su un pulsante o richiamarlo per nome da console equivale a eseguire l'alias a cui è stato associato.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link button&gt;uib[uttons]&lt;/link&gt;  ▷ Comando per la gestione dei pulsanti del widget Button

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.button = [[
&lt;title&gt;Gestione dei pulsanti del widget Button&lt;/title&gt;Tramite il comando &lt;command&gt;uib[uttons]&lt;/command&gt; è possibile associare, cambiare o rimuovere un alias a uno dei 30 pulsanti del widget Button.

Una volta associato ad un alias, sul pulsante appariranno le informazioni relative al suo nome (in alto a sinistra), all'alias associato (al centro) e al tasto di scelta rapida associato all'alias (in basso a destra, se presente). Si noti che il tasto di scelta rapida va associato all'alias (tramite il comando &lt;link keybind&gt;uik[eibind]&lt;/link&gt;) e non al pulsante.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uib[uttons]&lt;/command&gt;                   Per visualizzare l'elenco dei pulsanti configurati
  &lt;command&gt;uib[uttons]&lt;/command&gt; &lt;button&gt;&lt;button&gt;&lt;/button&gt;          Per visualizzare il singolo pulsante
  &lt;command&gt;uib[uttons]&lt;/command&gt; &lt;button&gt;&lt;button&gt;&lt;/button&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt;  Per associare un alias al pusante
  &lt;command&gt;uib[uttons]&lt;/command&gt; &lt;button&gt;&lt;button&gt;&lt;/button&gt; &lt;command&gt;remove&lt;/command&gt;   Per eliminare l'alias associato al pulsante
  &lt;command&gt;uib[uttons] remove_all&lt;/command&gt;        Per eliminare gli aliases associati a tutti i pulsanti

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;button&gt;&lt;button&gt;&lt;/button&gt; o click             Per eseguire l'alias associato al pulsante

&lt;button&gt;&lt;button&gt;&lt;/button&gt; deve essere compreso tra uno dei 30 pulsanti disponibili (da &lt;red&gt;a0&lt;r&gt; a &lt;red&gt;a9&lt;r&gt;, da &lt;green&gt;b0&lt;r&gt; a &lt;green&gt;b9&lt;r&gt; e da &lt;blue&gt;c0&lt;r&gt; a &lt;blue&gt;c9&lt;r&gt;).

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link buttons&gt;Buttons&lt;/link&gt;     ▷ Widget bottoni per alias
  &lt;link alias&gt;uia[liases]&lt;/link&gt; ▷ Comando per gestire gli aliases

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.chat = [[
&lt;title&gt;Widget Chat&lt;/title&gt;Il widget Chat cattura e visualizza in modo automatico (via trigger) i testi di comunicazione privati (tel, send, etc) e pubblici (gossip, ot, etc).

Tramite il tasto nella barra del titolo è possibile scegliere se visualizzare solo i messaggi privati (private), solo i messagi pubblici (public) oppure tutti i messaggi (all). Nel caso in cui sia attiva la visualizzazione di tutti i messaggi, tramite il tasto "split" è possibile suddividere la visualizzazione dei messaggi privati\pubblici in orizzontale, verticale o ragruppati in un unica finestra.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.cooldowns = [[
&lt;title&gt;Widget Cooldowns&lt;/title&gt;Il widget Cooldowns visualizza automaticamente (via GMCP) i dati relativi ai cooldowns attivi sul personaggio. Ogni elemento del widget rappresenta un cooldownd attivo ed è composto dal suo nome (a sinistra) e il tempo di durata (a destra, generalmente in round).

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.color = [[
&lt;title&gt;Colori&lt;/title&gt;Tramite il comando &lt;command&gt;uiColors&lt;/command&gt; è possibile visualizzare l'elenco dei colori che si possono utilizzare negli &lt;link highlight&gt;highlight&lt;/link&gt;.  

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uic[olors]&lt;/command&gt;    Per visualizzare l'elenco dei colori

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.endowment = [[&lt;title&gt;Widget Endowment&lt;/title&gt;Il widget Endowment visualizza i dati relativi all'equipaggiamento e si aggiorna (via trigger) con il comando &lt;command&gt;equipment&lt;/command&gt;. Ogni elemento del widget rappresenta un pezzo dell'equipaggiamento indossato ed è composto dal suo nome (al centro), il numero dello slot che occupa (in alto a sinistra), il nome dello slot che occupa (i basso a sinistra, abbreviato a 3 lettere), il suo livello di potenza (in alto a destra) e la sua percentuale di usura (in basso a destra).

Tramite il pulsante SLOT/NOME posto sulla barra del titolo del widget è possibile passare dalla visualizzazione del nome alla visualizzazione dello slot, e viceversa. Alla pressione del pulsante vengono inviati al mud i comandi &lt;command&gt;equipment&lt;/command&gt; e &lt;command&gt;equipment statistic&lt;/command&gt; in modo da aggiornare automaticamente la visualizzazione del widget. 

Rimanendo con il cursore del mouse su un elemento è possibile visualizzare un tooltip con le caratteristiche principali del pezzo selezionato. Queste informazioni vengono ricaricate automaticamente con il comando &lt;command&gt;equipment statistic&lt;/command&gt;. Inoltre nella parte inferiore del tooltip verranno visualizzate anche le statistiche dell'ultimo oggetto identificato, per permettere un paragone veloce e diretto.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.fontsize = [[
&lt;title&gt;Impostare la dimensione del font dei widget&lt;/title&gt;Tramite il comando &lt;command&gt;uif[ontsize]&lt;/command&gt; è possibile cambiare la dimensione del font di alcuni widget dell'UI.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uif[ontsize]&lt;/command&gt; &lt;input&gt;&lt;widget&gt;&lt;/input&gt; &lt;input&gt;&lt;dimensione&gt;&lt;/input&gt;

I &lt;input&gt;&lt;widget&gt;&lt;/input&gt; a cui è possibile cambiare la &lt;input&gt;&lt;dimensione&gt;&lt;/input&gt; del font sono: &lt;input&gt;all&lt;/input&gt; (per tutti contemporaneamente), &lt;input&gt;chat&lt;/input&gt;, &lt;input&gt;help&lt;/input&gt; o &lt;input&gt;room&lt;/input&gt;.

La &lt;input&gt;&lt;dimensione&gt;&lt;/input&gt; del font deve essere un valore compreso tra &lt;varValue&gt;1&lt;/varValue&gt; e &lt;varValue&gt;30&lt;/varValue&gt;.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.go = [[
&lt;title&gt;Mapper: go&lt;/title&gt;Tramite il comando &lt;command&gt;uig[o]&lt;/command&gt; è possibile muoversi automaticamente verso una stanza che è stata mappata.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uif[go]&lt;/command&gt; &lt;input&gt;&lt;id&gt;&lt;/input&gt;|&lt;input&gt;&lt;nome&gt;&lt;/input&gt;

Il parametro di ricerca della destinazione può essere indistintamente l'&lt;input&gt;&lt;id&gt;&lt;/input&gt; o il &lt;input&gt;&lt;nome&gt;&lt;/input&gt; della stanza.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link info&gt;uii[nfo]&lt;/link&gt;   ▷ Comando avere informazioni su una stanza
  &lt;link search&gt;uis[earch]&lt;/link&gt; ▷ Comando per cercare una stanza
  &lt;link track&gt;uit[rack]&lt;/link&gt;  ▷ Comando per tracciare il percorso a una stanza

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.group = [[
&lt;title&gt;Widget Group&lt;/title&gt;Il widget Group visualizza automaticamente (via GMCP) i dati relativi ai componenti del gruppo a cui si partecipa. Il leader del gruppo viene evidenziato col simbolo 👑 a fianco al nome.

Cliccando su un elemento del gruppo, la variabile &lt;varName&gt;target&lt;/varName&gt; viene autimaticamente aggiornata con il nome del componente del gruppo cliccato.

Lo stesso effetto lo si ottiene digitanto il nome dell'elemento del gruppo (da &lt;button&gt;g0&lt;/button&gt; a &lt;button&gt;g9&lt;/button&gt;) oppure con la combinazione di tasti rapidi associata all'elemento del gruppo (visualizzata in basso a destra).

Questa funzionalità, combinata con gli alias, permette di eseguire comandi specifici sull'avversario.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link target&gt;g0..g9&lt;/link&gt;,
  &lt;link target&gt;o0&lt;/link&gt;,
  &lt;link target&gt;t1..t4&lt;/link&gt;       ▷ Comandi per la gestione della variabile &lt;var&gt;target&lt;/var&gt;
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt;  ▷ Comando per la gestione dei tasti rapidi per aliases e targets

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]        
--
ui.help.highlight = [[
&lt;title&gt;Highlights&lt;/title&gt;Gli Highlights permettono di evidenziare parole o frasi del mud cambiandone il colore. Questo può semplificare la visualizzazione di elementi importanti all'interno del testo come, ad esempio, evidenziare la presenza di una &lt;red&gt;cassa&lt;r&gt; o di una &lt;cyan&gt;chiave&lt;r&gt; nella descrizione di una stanza.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uihi[lights]&lt;/command&gt;                   Per visualizzare l'elenco degli highlights
  &lt;command&gt;uihi[lights]&lt;/command&gt; &lt;testo&gt;           Per visualizzare il colore del testo
  &lt;command&gt;uihi[lights]&lt;/command&gt; &lt;testo&gt; &lt;colore&gt;  Per associare un colore a un testo
  &lt;command&gt;uihi[lights]&lt;/command&gt; &lt;testo&gt; &lt;command&gt;remove&lt;/command&gt;    Per eliminare highlights associato al testo
  &lt;command&gt;uihi[lights] remove_all&lt;/command&gt;        Per eliminare gli aliases associati a tutti i pulsanti

E' possibile visualizzare un elenco dei colori disponibili per gli highlights utilizzando il comando &lt;link color&gt;uic[olors]&lt;/link&gt;.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.info = [[
&lt;title&gt;Mapper: info&lt;/title&gt;Tramite il comando &lt;command&gt;uii[nfo]&lt;/command&gt; è possibile ottenere informazioni su una stanza che è stata mappata.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uii[nfo]&lt;/command&gt; &lt;input&gt;&lt;id&gt;&lt;/input&gt;|&lt;input&gt;&lt;nome&gt;&lt;/input&gt;

Il parametro di ricerca della destinazione può essere indistintamente l'&lt;input&gt;&lt;id&gt;&lt;/input&gt; o il &lt;input&gt;&lt;nome&gt;&lt;/input&gt; della stanza.

Se non viene specificato nessun parametro di ricerca il comando restituirà informazioni sulla stanza in cui si trova attualmente il giocatore.

Se è selezionata una stanza sul widget Mappa (e viene specificato nessun parametro)uih u il comando restituirà informazioni sulla stanza selezionata.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link go&gt;uig[o]&lt;/link&gt;     ▷ Comando per muoversi automaticamente a una stanza 
  &lt;link search&gt;uis[earch]&lt;/link&gt; ▷ Comando per cercare una stanza
  &lt;link track&gt;uit[rack]&lt;/link&gt;  ▷ Comando per tracciare il percorso a una stanza

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.keybind = [[
&lt;title&gt;Tasti rapidi per aliases e target&lt;/title&gt;Tramite il comando &lt;command&gt;uik[eybind]&lt;/command&gt; è possibile associare una combinazione di tasti rapidi a un &lt;link alias&gt;alias&lt;/link&gt; o a un &lt;link target&gt;target&lt;/link&gt;.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uik[eybind]&lt;/command&gt;                           Per visualizzare l'elenco dei tasti rapidi
  &lt;command&gt;uik[eybind]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt;|&lt;button&gt;&lt;target&gt;&lt;/button&gt;          Per visualizzare i tasti dell'alias\del target
  &lt;command&gt;uik[eybind]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt;|&lt;button&gt;&lt;target&gt;&lt;/button&gt; &lt;keybind&gt;&lt;tasti&gt;&lt;/keybind&gt;  Per associare uun tasto all'alias\al target
  &lt;command&gt;uik[eybind]&lt;/command&gt; &lt;aliasName&gt;&lt;alias&gt;&lt;/aliasName&gt;|&lt;button&gt;&lt;target&gt;&lt;/button&gt; &lt;command&gt;remove&lt;/command&gt;   Per eliminare i tasti dell'alias\del target
  &lt;command&gt;uik[eybind] remove_all&lt;/command&gt;                Per eliminare tutti i tasti rapidi

I tasti utillizzabili possono essere o i tasti funzione (&lt;keybind&gt;f1&lt;/keybind&gt;, &lt;keybind&gt;f2&lt;/keybind&gt;, &lt;keybind&gt;f3&lt;/keybind&gt;, etc) o i caratteri dell'alfabeto (&lt;keybind&gt;a&lt;/keybind&gt;, &lt;keybind&gt;b&lt;/keybind&gt;, &lt;keybind&gt;c&lt;/keybind&gt;, etc) o i numeri (&lt;keybind&gt;0&lt;/keybind&gt;, &lt;keybind&gt;1&lt;/keybind&gt;, &lt;keybind&gt;2&lt;/keybind&gt;, etc), presi singolarmente oppure preceduti da &lt;keybind&gt;CTRL&lt;/keybind&gt; o &lt;keybind&gt;ALT&lt;/keybind&gt; (o entrambi).

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link target&gt;g0..g9&lt;/link&gt;,
  &lt;link target&gt;o0&lt;/link&gt;,
  &lt;link target&gt;t1..t4&lt;/link&gt;      ▷ Comandi per la gestione della variabile &lt;var&gt;target&lt;/var&gt;
  &lt;link alias&gt;uia[liases]&lt;/link&gt; ▷ Comando per gestire gli aliases
 
Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.mapper = [[
&lt;title&gt;Widget Mapper\Overland&lt;/title&gt;Il widget Mapper ha la doppia funzione di visualizzare le aree di gioco interne che sono state esplorate e di visualizzare le zone esterne dell'overland. Il passaggio tre le due visualizzazioni avviene automaticamente in base alla posizione del personaggio.

&lt;yellow&gt;Mapper&lt;r&gt;
Per la gestione delle aree interne il widget Mapper utilizza il componente &lt;cyan&gt;Geyser Mapper&lt;r&gt; di Mudlet che comprende funzionalità generiche per le gestione delle stanze esplorate accessibili dal menù che appare clickandoci sopra con il tasto destro (fare riferimento all'help on line di Mudlet), alle quali sono state aggiunte delle funzionalità personalizzate create su misura per Lumen et Umbra come la ricerca automatica del percorso più breve (ove possibile, facendo doppio click sulla stanza che si desidera raggiungere), la visualizzazione di portali, la visualizzazione di uscite speciali o la visualizzazione del percorso da seguire.

Le funzionalità del widget Mapper sono inoltre arricchite dai comandi testuali &lt;link go&gt;uig[o]&lt;/link&gt; per spostarsu ad una stanza specifica, &lt;link info&gt;uii[nfo]&lt;/link&gt; per avere informazioni sulla stanza attuale o una stanza specifica, &lt;link search&gt;uis[earch]&lt;/link&gt; per cercare una stanza partendo dal suo nome e &lt;link track&gt;uit[rack]&lt;/link&gt; per tracciare sulla mappa il percorso verso una stanza, ove possibile.

&lt;yellow&gt;Overland&lt;r&gt;
Per la gestione delle zone dell'overland il widget Mapper si aggiorna automaticamente con le informazioni ricevute dal server via GMCP. Non integra ulteriori funzioni speciali.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link go&gt;uig[o]&lt;/link&gt;     ▷ Comando per muoversi automaticamente a una stanza 
  &lt;link info&gt;uii[nfo]&lt;/link&gt;   ▷ Comando avere informazioni su una stanza
  &lt;link search&gt;uis[earch]&lt;/link&gt; ▷ Comando per cercare una stanza
  &lt;link track&gt;uit[rack]&lt;/link&gt;  ▷ Comando per tracciare il percorso a una stanza

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.opponent = [[
&lt;title&gt;Widget Opponent&lt;/title&gt;Il widget Opponent visualizza automaticamente (via GMCP) i dati dell'avversario contro cui si sta combattendo relativi a nome, livello e HP (barra rossa).

Cliccando sulla barra degli HP, la variabile &lt;varName&gt;target&lt;/varName&gt; viene autimaticamente aggiornata con il nome dell'avversario.

Lo stesso effetto lo si ottiene digitanto il nome del widget (&lt;button&gt;o0&lt;/button&gt;) oppure con la combinazione di tasti rapidi associata all'avversario (visualizzata in basso a destra).

Questa funzionalità, combinata con gli alias, permette di eseguire comandi specifici sull'avversario.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link target&gt;g0..g9&lt;/link&gt;,
  &lt;link target&gt;o0&lt;/link&gt;,
  &lt;link target&gt;t1..t4&lt;/link&gt;       ▷ Comandi per la gestione della variabile &lt;var&gt;target&lt;/var&gt;
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt;  ▷ Comando per la gestione dei tasti rapidi per aliases e targets

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.player = [[
&lt;title&gt;Widget Player&lt;/title&gt;Il widget Player visualizza automaticamente (via GMCP) i dati del personaggio in gioco relativi a nome, razza, classe, livello, HP (barra rossa), mana (barra blu) e energia (barra gialla). Inoltre è possibile tenere sotto controlo il tick counter (barra sopra la barra HP), il round counter (barra sotto la barra HP) e l'esperienza (barra sotto la barra del movimento).

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.setting = [[
&lt;title&gt;Setting&lt;/title&gt;Tramite l'utilizzo dei setting è possibile importare &lt;link alias&gt;alias&lt;/link&gt;, &lt;link highlight&gt;highlights&lt;/link&gt;, &lt;link targets&gt;target&lt;/link&gt; e &lt;link variable&gt;variables&lt;/link&gt; da un qualsiasi profilo di muddlet precedentemente salvato.
Il nome del personaggio con cui è stato effetuaro il login viene usato come nome del setting. I settings vengono creati automaticamente in ogni profilo Mudlet, per ogni personaggio. 
Dall'elenco dei settings è possibile visualizzare il nome del profilo Mudlet e il personaggio a cui fa riferimento.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uis[etting]&lt;/command&gt;                           Per visualizzare l'elenco di tutti i setting disponibili
  &lt;command&gt;uis[etting]&lt;/command&gt; &lt;profile&gt;&lt;numero profilo&gt;&lt;/profile&gt; &lt;command&gt;import&lt;/command&gt;   Per importare un setting

Il &lt;profile&gt;&lt;numero profilo&gt;&lt;/profile&gt; da uilizzare è il numero visibile nell'elenco dei setting.
Non è possibile importare i setting attualmente in uso, anche se viene visualizzato nell'elenco.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.room = [[
&lt;title&gt;Widget Room&lt;/title&gt;Il widget Room visualizza i dati relativi alla stanza in cui si trova attualmete il personaggio e si aggiorna automaticamente (via GMCP) ad ogni spostamento.

Il widget è composto da un quadrato in formato ASCII che rappresenta la stanza in cui ci si trova sul quale è possibile visualizzare le uscite disponibili (con frecce che indicano le direzioni nord, est, sud, ovest, su e giu) con gli ID delle stanze di destinazione, la posizione del personaggio all'interno della stanza (con un cerchio crociato, vedere il comando &lt;command&gt;sposta&lt;/command&gt;) e la direzione da cui si è entrati nella stanza (rombo pieno al posto della reccia di direzione).

A fianco al quadrato e riportata una legenda della stanza dalla quale è possibile visualizzare il nome e l'ID della stanza attuale e il nome delle stanze a cui fanno riferimento le uscite. Da questa leggenda è possibile spostarsi ad una stanza adiacente clickando sul nome della destinazione.

Sotto il quadrato vengono riportate altre informazioni relative alla stanza tra cui le uscite speciali o portali (nei quali si può entrare clickando sopra il nome), l'elendo degli &lt;i&gt;oggetti&lt;r&gt; (&lt;DimGrey&gt;o&lt;r&gt;), dei componenti del gruppo (&lt;green&gt;g&lt;r&gt;), dei giocatori (&lt;yellow&gt;p&lt;r&gt;) e dei &lt;b&gt;MOB&lt;r&gt; (&lt;red&gt;m&lt;r&gt;), in questo ordine.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.search = [[
&lt;title&gt;Mapper: search&lt;/title&gt;Tramite il comando &lt;command&gt;uis[earch]&lt;/command&gt; è possibile ricercare stanze che sono state mappate.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uis[earch]&lt;/command&gt; &lt;input&gt;&lt;id&gt;&lt;/input&gt;|&lt;input&gt;&lt;nome&gt;&lt;/input&gt;

Il parametro di ricerca della destinazione può essere indistintamente l'&lt;input&gt;&lt;id&gt;&lt;/input&gt; o il &lt;input&gt;&lt;nome&gt;&lt;/input&gt; della stanza.

Nell'elenco dei risultati oltre all'id, il nome e all'area della stanza, verranno riportati dei link iperattivi tramite i quali sarà possibile eseguire direttamente i comandi &lt;link info&gt;uii[nfo]&lt;/link&gt; (I), &lt;link track&gt;uit[rack]&lt;/link&gt; (T) e &lt;link go&gt;uig[o]&lt;/link&gt; (G).

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link go&gt;uig[o]&lt;/link&gt;     ▷ Comando per muoversi automaticamente a una stanza 
  &lt;link info&gt;uii[nfo]&lt;/link&gt;   ▷ Comando avere informazioni su una stanza
  &lt;link track&gt;uit[rack]&lt;/link&gt;  ▷ Comando per tracciare il percorso a una stanza

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.target = [[
&lt;title&gt;Target (g0..g9, o0, t1..t4)&lt;/title&gt;La variable &lt;varName&gt;target&lt;/varName&gt; è una variabile predefinita utilizzabile negli &lt;link alias&gt;uia[liases]&lt;/link&gt; e che è possibile impostare in modi differenti.

Oltre ad essere getibile come semplice variabile tramite il comando &lt;link variable&gt;uiv[ariables]&lt;/link&gt; è possibile impostarla utilizzando o i 4 tasti del widget Target (&lt;button&gt;t1&lt;/button&gt;, &lt;button&gt;t2&lt;/button&gt;, &lt;button&gt;t3&lt;/button&gt; e &lt;button&gt;t4&lt;/button&gt;), o cliccando sull'avversario ingaggiato dal widget Opponent (&lt;button&gt;o0&lt;/button&gt;) o ancora cliccando su uno dei componenti del gruppo dal widget Gruppo.
di gioco (da &lt;button&gt;g0&lt;/button&gt; a &lt;button&gt;g9&lt;/button&gt;).

I tasti del widget Target &lt;button&gt;t1&lt;/button&gt;, &lt;button&gt;t2&lt;/button&gt;, &lt;button&gt;t3&lt;/button&gt; e &lt;button&gt;t4&lt;/button&gt; sono configurabili, mentre &lt;button&gt;o0&lt;/button&gt; e da &lt;button&gt;g0&lt;/button&gt; a &lt;button&gt;g9&lt;/button&gt; sono preimpostati in base all'avversario ingaggiato o alla composizione attuale del gruppo.

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;t1&lt;/command&gt;|&lt;command&gt;t2&lt;/command&gt;|&lt;command&gt;t3&lt;/command&gt;|&lt;command&gt;t4&lt;/command&gt; &lt;valore&gt;        Per assegnare un valore a &lt;button&gt;t1&lt;/button&gt;, &lt;button&gt;t2&lt;/button&gt;, &lt;button&gt;t3&lt;/button&gt; o &lt;button&gt;t4&lt;/button&gt;
  &lt;command&gt;t1&lt;/command&gt;|&lt;command&gt;t2&lt;/command&gt;|&lt;command&gt;t3&lt;/command&gt;|&lt;command&gt;t4 remove&lt;/command&gt;          Per rimuovere il valore assegnato a &lt;command&gt;t1&lt;/command&gt;, &lt;command&gt;t2&lt;/command&gt;, &lt;command&gt;t3&lt;/command&gt; o &lt;command&gt;t4&lt;/command&gt;

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;g0&lt;/command&gt;| .. | &lt;command&gt;g9&lt;/command&gt; o click sul widget Group      Per assegnare a &lt;varName&gt;target&lt;/varName&gt; il nome del relativo componente del gruppo
  &lt;command&gt;o0&lt;/command&gt;          o click sul widget Opponent   Per assegnare a &lt;varName&gt;target&lt;/varName&gt; il nome dell'avversario ingaggiato
  &lt;command&gt;t1&lt;/command&gt;|&lt;command&gt;t2&lt;/command&gt;|&lt;command&gt;t3&lt;/command&gt;|&lt;command&gt;t4&lt;/command&gt; o click sug widget Targets    Per assegnare a &lt;varName&gt;target&lt;/varName&gt; il valore assegnato a &lt;button&gt;t1&lt;/button&gt;, &lt;button&gt;t2&lt;/button&gt;, &lt;button&gt;t3&lt;/button&gt; o &lt;button&gt;t4&lt;/button&gt;

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link group&gt;Group&lt;/link&gt;       ▷ Widget gruppo
  &lt;link opponent&gt;Opponent&lt;/link&gt;    ▷ Widget dati avversatrio 
  &lt;link targets&gt;Target&lt;/link&gt;      ▷ Widget bottoni per target 
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt; ▷ Comando per la gestione dei tasti rapidi per aliases e targets

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.targets= [[
&lt;title&gt;Widget Targets&lt;/title&gt;Il widget Target è coposto da 4 pulsanti personalizzabili sui quali è possibile memorizzare 4 target differenti. Clickando su uno dei pulsanti la variabile &lt;varName&gt;Target&lt;/varName&gt; viene aggiornata con il valore che è stato assegnato al pulsante.

Lo stesso effetto lo si ottiene digitanto il nome del pulsante (&lt;button&gt;t1&lt;/button&gt;, &lt;button&gt;t2&lt;/button&gt;, &lt;button&gt;t3&lt;/button&gt; e &lt;button&gt;t4&lt;/button&gt;) oppure con la combinazione di tasti rapidi associata al pulsante (visualizzata su ogni tasto, in basso a destra).

Questa funzionalità, combinata con gli alias, permette di passare velcemente da un target all'altro.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link target&gt;g0..g9&lt;/link&gt;,
  &lt;link target&gt;o0&lt;/link&gt;,
  &lt;link target&gt;t1..t4&lt;/link&gt;       ▷ Comandi per la gestione della variabile &lt;var&gt;target&lt;/var&gt;
  &lt;link keybind&gt;uik[eibind]&lt;/link&gt;  ▷ Comando per la gestione dei tasti rapidi per aliases e targets

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.track = [[
&lt;title&gt;Mapper: track&lt;/title&gt;Tramite il comando &lt;command&gt;uit[rack]&lt;/command&gt; è possibile tracciare un sentiero sulla mappa che porterà ad una stanza che sia stata mappata.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uit[rack]&lt;/command&gt; &lt;input&gt;&lt;id&gt;&lt;/input&gt;|&lt;input&gt;&lt;nome&gt;&lt;/input&gt;

Il parametro di ricerca della destinazione può essere indistintamente l'&lt;input&gt;&lt;id&gt;&lt;/input&gt; o il &lt;input&gt;&lt;nome&gt;&lt;/input&gt; della stanza.

&lt;yellow&gt;Per maggiori informazioni:&lt;r&gt;
  &lt;link go&gt;uig[o]&lt;/link&gt;     ▷ Comando per muoversi automaticamente a una stanza 
  &lt;link info&gt;uii[nfo]&lt;/link&gt;   ▷ Comando avere informazioni su una stanza
  &lt;link search&gt;uis[earch]&lt;/link&gt; ▷ Comando per cercare una stanza

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.variable = [[
&lt;title&gt;Variabili&lt;/title&gt;E' possibile definire delle variabili (retentive) da riutilizzare negli alias.
E' possibile richiamare una variabile all'interno di un alias facendo precedere al nome della variabile il carattere speciale &lt;command&gt;]]..ui.varID..[[&lt;/command&gt;.
Alcune delle variabili sono già dichiarate (variabili predefinite), e vengno utilizzate per gli elementi l'interfaccia.
Le variabili sono utilizzabili nel codice dei vostri script facendo accesso alla tabella LUA ui.variables[nomevariabile].

&lt;yellow&gt;Configurazione:&lt;r&gt;
  &lt;command&gt;uiv[ariable]&lt;/command&gt;|&lt;command&gt;]]..ui.varID..[[&lt;/command&gt;                       Per visualizzare l'elenco delle variabili
  &lt;command&gt;uiv[ariable]&lt;/command&gt;|&lt;command&gt;]]..ui.varID..[[&lt;/command&gt; &lt;varName&gt;&lt;nome&gt;&lt;/varName&gt;               Per visualizzare il valore di una variabile
  &lt;command&gt;uiv[ariable]&lt;/command&gt;|&lt;command&gt;]]..ui.varID..[[&lt;/command&gt; &lt;varName&gt;&lt;nome&gt;&lt;/varName&gt; &lt;varValue&gt;&lt;valore&gt;&lt;/varValue&gt;      Per creare o modificare una variabile
  &lt;command&gt;uiv[ariable]&lt;/command&gt;|&lt;command&gt;]]..ui.varID..[[&lt;/command&gt; &lt;varName&gt;&lt;nome&gt;&lt;/varName&gt; &lt;command&gt;remove&lt;/command&gt;        Per rimuovere una variabile
  &lt;command&gt;uiv[ariable]&lt;/command&gt;|&lt;command&gt;]]..ui.varID..[[&lt;/command&gt; &lt;command&gt;remove_all&lt;/command&gt;            Per rimuovere tutte le variabili

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.walk = [[
&lt;title&gt;Walk, Speedwalk e Backwalk&lt;/title&gt;Tramite il comandi "&lt;command&gt;.&lt;/command&gt;" è possibile percorrere un &lt;percorso&gt; espressi nel formato "ee2w4suuu9n".

Tramite il comando "&lt;command&gt;..&lt;/command&gt;" oltre che ripercorrere un &lt;percorso&gt; all'indietro. 

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;.&lt;/command&gt;&lt;percorso&gt;   Per eseguire il percorso specificato
  &lt;command&gt;..&lt;/command&gt;&lt;percorso&gt;  Per eseguire il percorso specificato all'indietro

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.widget = [[
&lt;title&gt;Ripristino dei widget chiusi&lt;/title&gt;E' possibile ripristinare i widget dell'UI che sono stati minimizzati o chiusi.

&lt;yellow&gt;Utilizzo:&lt;r&gt;
  &lt;command&gt;uiw[idget] &lt;nome_widget&gt;&lt;/command&gt;

I &lt;command&gt;&lt;nome_widget&gt;&lt;/command&gt; disponibili sono: &lt;exec uiwidget all&gt;all&lt;/exec&gt; (ripristina tutti i widgets), &lt;exec uiwidget affects&gt;affects&lt;/exec&gt;, &lt;exec uiwidget buttons&gt;buttons&lt;/exec&gt;, &lt;exec uiwidget chat&gt;chat&lt;/exec&gt;, &lt;exec uiwidget cooldowns&gt;cooldowns&lt;/exec&gt;, &lt;exec uiwidget endowment&gt;endowment&lt;/exec&gt;, &lt;exec uiwidget group&gt;group&lt;/exec&gt;, &lt;exec uiwidget help&gt;help&lt;/exec&gt;, &lt;exec uiwidget mapper&gt;mapper&lt;/exec&gt;, &lt;exec uiwidget opponent&gt;opponent&lt;/exec&gt;, &lt;exec uiwidget player&gt;player&lt;/exec&gt;, &lt;exec uiwidget room&gt;room&lt;/exec&gt; o &lt;exec uiwidget target&gt;target&lt;/exec&gt; per i relativi widgets.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
--
ui.help.widgets = [[
&lt;title&gt;Widgets&lt;/title&gt;I widget sono gli elementi a finestra che compongono l'interfaccia e permettono di interagire con il gioco per avere una visuale più completa delle informazioni che il gioco stesso mette a disposizione.

Tutti i widget hanno la possibilità di essere spostati, ridimensionato, chiusi (tasto &lt;cyan&gt;&lt;x&gt;&lt;r&gt; nella barra del titolo), nascosti (tasto &lt;cyan&gt;&lt;_&gt;&lt;r&gt; nella barra del titolo) o ripristinati (con il comando &lt;link widget&gt;uiw[idget]&lt;/link&gt;). Alcuni widget possono essere resi trasparenti (tasto &lt;cyan&gt;&lt;...&gt;&lt;r&gt; nella barra del titolo) per personalizare il più possibile la disposizione dei widget all'interno dell'area di gioco.

I widget sono creati utilizzando il componeti &lt;cyan&gt;Geyser Adjustable Container&lt;r&gt; di Mudlet (fare riferimento all'help on line di Mudlet) che integrano delle funzionalità comuni accessibili dal menù che appare cliccando con il tasto destro sulla barra del titolo.
Tra queste funzionalità merita di essere menzionata la possibilità di agganciare il widget a un bordo della finestra principale di gioco. Per fare questo è sufficente spostare il widget contro il bordo al quale lo si vuole agganciare, cliccare con tasto destro sulla barra del titolo e selezionare &lt;cyan&gt;&lt;Aggancia a:&gt;&lt;r&gt;. Apparirà un sottomenù con i nomi dei bordi della finestra principale (es: basso, destra, etc) ai quali sarà possibie agganciare il widget. Per sganciare il widget dal bordo è sufficiente spostare il widget lontano dal bordo al quale è stato agganciato.

Ritorna alla pagina principale dell'&lt;link help&gt;help&lt;/link&gt;.
]]
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Init - Structures</name>
				<packageName></packageName>
				<script>function ui.initStructures()
  ui.release = getPackageInfo("LeU_UI", "version")
  ui.echo = "&lt;blue&gt;[  &lt;DodgerBlue&gt;UI  &lt;blue&gt;] "
  ui.transparentID = '&lt;center&gt;⋯'
  ui.varID = "&amp;"
  --
  -- Colors
  ui.colors = {
    aliasButton  = "&lt;orange&gt;",
    aliasName    = "&lt;violet&gt;",
    aliasOutput  = "&lt;r&gt;",  -- "&lt;PaleGoldenrod&gt;"
    command      = "&lt;steel_blue&gt;",
    error        = "&lt;DarkOrange&gt;",
    input        = "&lt;bisque&gt;", -- #
    keybind      = "&lt;cyan&gt;",
    link         = "&lt;gold&gt;",
    operator     = "&lt;gold&gt;",         -- » or «
    settingName  = "&lt;green&gt;",
    separator    = "&lt;orange_red&gt;",     -- ; or /
    target       = "&lt;orange&gt;",
    text         = "&lt;r&gt;",
    title        = "&lt;white&gt;",
    varID        = "&lt;steel_blue&gt;",
    varName      = "&lt;LightBlue&gt;",
    varCont      = "&lt;MediumSeaGreen&gt;",
    widget       = "25,20,20",
    wBackground  = "30,24,24",
    wBorder      = "90,72,72",
    wButton      = "90,72,72",
    wButtonHover = "180,144,144",
    wText        = "69,69,69",
  }
  --
  local mudletHomeDir = getMudletHomeDir()
  --
  ui.files = {
    aliases = {
      path = mudletHomeDir.."/LeU_UI.data/settings/",
      name = "aliases.lua",
    },
    data = {
      path = mudletHomeDir.."/LeU_UI.data/",
    },
    highlights = {
      path = mudletHomeDir.."/LeU_UI.data/settings/",
      name = "highlights.lua",
    },
    icons = {
      path = mudletHomeDir.."/LeU_UI/icons/",
    },
    images = {
      path = mudletHomeDir.."/LeU_UI/images/",
    },
    map = {
      path = mudletHomeDir.."/LeU_UI/map/",
      name = "map.lua",
    },
    parameters = {
      path = mudletHomeDir.."/LeU_UI.data/",
      name = "parameters.lua",
    },
    settings = {
      path = mudletHomeDir.."/LeU_UI.data/settings/",
    },
    sounds = {
      path = mudletHomeDir.."/LeU_UI/sounds/",
    },
    targets    = {
      path = mudletHomeDir.."/LeU_UI.data/settings/",
      name = "targets.lua",
    },
    variables  = {
      path = mudletHomeDir.."/LeU_UI.data/settings/",
      name = "variables.lua",
    },
  }
  --
  -- Modifier for keybind
  ui.keyb_modifier = {
    CTRL = mudlet.keymodifier.Control,
    ALT  = mudlet.keymodifier.Alt,
  }
  --
  -- Keys for keybind
  ui.keyb_single = {
    ["0"] = mudlet.key["0"],
    ["1"] = mudlet.key["1"],
    ["2"] = mudlet.key["2"],
    ["3"] = mudlet.key["3"],
    ["4"] = mudlet.key["4"],
    ["5"] = mudlet.key["5"],
    ["6"] = mudlet.key["6"],
    ["7"] = mudlet.key["7"],
    ["8"] = mudlet.key["8"],
    ["9"] = mudlet.key["9"],
    --
    A = mudlet.key.A,
    B = mudlet.key.B,
    C = mudlet.key.C,
    D = mudlet.key.D,
    E = mudlet.key.E,
    F = mudlet.key.F,
    G = mudlet.key.G,
    H = mudlet.key.H,
    I = mudlet.key.I,
    J = mudlet.key.J,
    K = mudlet.key.k,
    L = mudlet.key.L,
    M = mudlet.key.M,
    N = mudlet.key.N,
    O = mudlet.key.O,
    P = mudlet.key.P,
    Q = mudlet.key.Q,
    R = mudlet.key.R,
    S = mudlet.key.S,
    T = mudlet.key.T,
    U = mudlet.key.U,
    V = mudlet.key.V,
    W = mudlet.key.W,
    X = mudlet.key.X,
    Y = mudlet.key.Y,
    Z = mudlet.key.Z,
    --
    F1  = mudlet.key.F1,
    F2  = mudlet.key.F2,
    F3  = mudlet.key.F3,
    F4  = mudlet.key.F4,
    F5  = mudlet.key.F5,
    F6  = mudlet.key.F6,
    F7  = mudlet.key.F7,
    F8  = mudlet.key.F8,
    F9  = mudlet.key.F9,
    F10 = mudlet.key.F10,
    F11 = mudlet.key.F11,
    F12 = mudlet.key.F12,
  }
  --
  ui.validExit = {
    down  = {short = "d", long = "down",  door = "down", reverse = "u", token = "⤦", tokenClose = "□", tokenAbsent = "└", tokenFrom = "◆", tokenSecret = "S", color = "&lt;white&gt;", dColor = "&lt;255,255,255:30,24,24&gt;",},
    east  = {short = "e", long = "east",  door = "e",    reverse = "w", token = "▷", tokenClose = "□", tokenAbsent = "│", tokenFrom = "◆", tokenSecret = "S", color = "&lt;yellow&gt;", dColor = "&lt;255,255,0:30,24,24&gt;",},
    north = {short = "n", long = "north", door = "n",    reverse = "s", token = "△", tokenClose = "□", tokenAbsent = "─", tokenFrom = "◆", tokenSecret = "S", color = "&lt;green&gt;", dColor = "&lt;0,255,0:30,24,24&gt;",},
    south = {short = "s", long = "south", door = "s",    reverse = "n", token = "▽", tokenClose = "□", tokenAbsent = "─", tokenFrom = "◆", tokenSecret = "S", color = "&lt;blue&gt;", dColor = "&lt;0,0,255:30,24,24&gt;",},
    up    = {short = "u", long = "up",    door = "up",   reverse = "d", token = "⤤", tokenClose = "□", tokenAbsent = "┐", tokenFrom = "◆", tokenSecret = "S", color = "&lt;cyan&gt;", dColor = "&lt;0,255,255:30,24,24&gt;",},
    west  = {short = "w", long = "west",  door = "w",    reverse = "e", token = "◁", tokenClose = "□", tokenAbsent = "│", tokenFrom = "◆", tokenSecret = "S", color = "&lt;magenta&gt;", dColor = "&lt;255,0,255:30,24,24&gt;",},
  }
  --
  ui.validExit["basso"] = ui.validExit.down
  ui.validExit["d"]     = ui.validExit.down
  --
  ui.validExit["est"]   = ui.validExit.east
  ui.validExit["e"]     = ui.validExit.east
  --
  ui.validExit["nord"]  = ui.validExit.north
  ui.validExit["n"]     = ui.validExit.north
  --
  ui.validExit["sud"]   = ui.validExit.south
  ui.validExit["s"]     = ui.validExit.south
  --
  ui.validExit["alto"]  = ui.validExit.up
  ui.validExit["u"]     = ui.validExit.up
  --
  ui.validExit["w"]     = ui.validExit.west
  ui.validExit["ovest"] = ui.validExit.west
  ui.validExit["o"]     = ui.validExit.west
  --
  -- Speedwalk
  ui.speedwalk = ui.speedwalk or {
    delay   = 0.01, -- (sec)
    path    = {},
    timeOut = 1,    -- (sec)
  }
  --
  -- Affects
  ui.affects = {}
  --
  -- Aliases
  ui.aliases = ui.aliases or {}
  ui.fRemoveAllAliases()
  ui.aliases = {}
  --
  -- Cooldowns
  ui.cooldowns = {}
  --
  -- Equipment
  ui.equipment = {}
  --
  -- Fast Affects
  ui.fastAffects = "";
  --
  -- Group
  ui.group = {}
  --
  -- Handlers
  ui.handlers = ui.handlers or {}
  --
  -- Highlights
  ui.highlights = ui.highlights or {}
  ui.fRemoveAllHighlights()
  ui.highlights = {}
  -- 
  -- Map coordinates
  ui.map = ui.map or {}
  --
  -- Opponent
  ui.opponent = {}
  --
  -- Player
  ui.player = {}
  --
  -- Previous
  ui.previous = {}
  --
  -- Setting
  ui.setting = nil
  -- 
  -- Targets
  ui.targets = {
    g0 = { mod1 = "CTRL", mod2 = "", key = "F10" },
    g1 = { mod1 = "CTRL", mod2 = "", key = "F1" },
    g2 = { mod1 = "CTRL", mod2 = "", key = "F2" },
    g3 = { mod1 = "CTRL", mod2 = "", key = "F3" },
    g4 = { mod1 = "CTRL", mod2 = "", key = "F4" },
    g5 = { mod1 = "CTRL", mod2 = "", key = "F5" },
    g6 = { mod1 = "CTRL", mod2 = "", key = "F6" },
    g7 = { mod1 = "CTRL", mod2 = "", key = "F7" },
    g8 = { mod1 = "CTRL", mod2 = "", key = "F8" },
    g9 = { mod1 = "CTRL", mod2 = "", key = "F9" },
    --
    o0 = { mod1 = "CTRL", mod2 = "", key = "0" },
    --
    t1 = { mod1 = "CTRL", mod2 = "", key = "1" },
    t2 = { mod1 = "CTRL", mod2 = "", key = "2" },
    t3 = { mod1 = "CTRL", mod2 = "", key = "3" },
    t4 = { mod1 = "CTRL", mod2 = "", key = "4" },
  }
  --
  -- Variables
  ui.variables = ui.variables or {}
  ui.fRemoveAllVariables()
  ui.variables = {}
  --
  --  Tracker
  ui.track = ""
  --
  -- GMCP
  gmcp = {}
  --
  --
  ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Structures") 
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Keybind</name>
				<packageName></packageName>
				<script>--
function ui.fGetKeybFormattedText(keybind)
  if (keybind) then
    return ui.colors.keybind.."&lt;"..keybind.."&gt;".."&lt;r&gt;"
  end
  return ""
end
--
-- Validate 3 keys for keybind (order: mod1 mod2 key)
function ui.fGetKeyb(key1, key2, key3)
  local isValid = false;
  local mod1 = "";
  local mod2 = "";
  local key = "";
  local keybind = ""
  --
  key1 = string.upper(key1 or "")
  key2 = string.upper(key2 or "")
  key3 = string.upper(key3 or "")
  if (key3 ~= "") then  -- es: key1=CTRL key2=ALT key3=F1
    if (key1 ~= key2) and
       (table.contains(ui.keyb_modifier, key1)) and
       (table.contains(ui.keyb_modifier, key2)) and
       (table.contains(ui.keyb_single,   key3)) then
      local idx1 = table.index_of(table.keys(ui.keyb_modifier), key1)
      local idx2 = table.index_of(table.keys(ui.keyb_modifier), key2)
      mod1 = idx1 &lt; idx2 and key2 or key1
      mod2 = idx1 &lt; idx2 and key1 or key2
      key = key3
      isValid = true
    end
  elseif (key2 ~= "") then  -- es: key1=CTRL key2=F1
    if (table.contains(ui.keyb_modifier, key1) and table.contains(ui.keyb_single, key2))then
      mod1 = key1
      mod2 = ""
      key = key2
      isValid = true
    end
  elseif (key1~= "") then -- es: key1=F1
    if (table.contains(ui.keyb_single, key1)) then
      mod1 = ""
      mod2 = ""
      key = key1
      isValid = true
    end
  else
    mod1 = ""
    mod2 = ""
    key = ""
    isValid = true
  end
  --
  if (mod2 ~= "") then
    keybind = string.gsub(mod1 or "", "(%a)([%w_']*)", ui.fTitleCase).."+"..
              string.gsub(mod2 or "", "(%a)([%w_']*)", ui.fTitleCase).."+"..
              string.gsub( key or "", "(%a)([%w_']*)", ui.fTitleCase)
  elseif (mod1 ~= "") then
    keybind = string.gsub(mod1 or "", "(%a)([%w_']*)", ui.fTitleCase).."+"..
              string.gsub( key or "", "(%a)([%w_']*)", ui.fTitleCase)
  elseif (key ~= "") then
    keybind = string.gsub( key or "", "(%a)([%w_']*)", ui.fTitleCase)
  end
  --
  return isValid, mod1, mod2, key, keybind
end
--
function ui.fSearchKeyb(table, keybind, excludeKey)
  keybind = keybind or ""
  excludeKey = excludeKey or ""
  if (keybind ~= "") and (table) then
    for key in pairs(table) do
      if (key ~= excludeKey) and (table[key].keybind == keybind) then
        return key
      end
    end
  end
  --
  return nil
end
--
function ui.fShowAllKeyb()
  local orderTable = {}
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllKeyb()")
  --
  -- Order Target keybind
  for target in pairs(ui.targets) do
    orderTable[#orderTable+1] = target
  end
  table.sort(orderTable, function (target1, target2) 
                           keybind1 = ui.targets[target1].keybind or ""
                           keybind2 = ui.targets[target2].keybind or ""                  
                           if (rex.match(keybind1, [[F\d$]])) then
                             keybind1 = keybind1:gsub("F%w", "F0%1")                             
                           end
                           if (rex.match(keybind2, [[F\d$]])) then
                             keybind2 = keybind2:gsub("F%w", "F0%1")                             
                           end
                           return keybind1 &lt; keybind2
                         end )
  --
  -- Show Target keybind
  cecho(ui.fTitle("Keybind associati ai Target"))
  for i,target in ipairs(orderTable) do
    if (ui.targets[target].keybId) then
      cecho(ui.fGetNumberFormattedText(i).." ")
      cechoLink(ui.cLink("X"), [[expandAlias("uikeybind ]]..target..[[ remove")]], "Rimuovi il keybind associato al target '"..target.."'", true)
      cecho(" "..ui.fGetTargetFormattedText(target, true)..ui.fGetOperatorFormattedText(" » "))
      if (ui.targets[target].target) then
        cecho(ui.fGetVarNameFormattedText("target")..ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.targets[target].target))
      else
        cecho("&lt;r&gt;non configurato")
      end
      cecho("\n")
    end
  end
  --
  -- Order Aliases keybind
  orderTable = {}
  for alias in pairs(ui.aliases) do
    if (ui.aliases[alias].keybId) then
      orderTable[#orderTable+1] = alias
    end
  end
  table.sort(orderTable, function (alias1, alias2) 
                           keybind1 = ui.aliases[alias1].keybind
                           keybind2 = ui.aliases[alias2].keybind                           
                           if (rex.match(keybind1, [[F\d$]])) then
                             keybind1 = keybind1:gsub("F%w", "F0%1")                             
                           end
                           if (rex.match(keybind2, [[F\d$]])) then
                             keybind2 = keybind2:gsub("F%w", "F0%1")                             
                           end
                           return keybind1 &lt; keybind2
                         end )
  --
  -- Show Aliases keybind
  cecho(ui.fTitle("Keybind associati agli Aliases"))
  for i,alias in ipairs(orderTable) do
      cecho(ui.fGetNumberFormattedText(i).." ")
      cechoLink(ui.cLink("X"), [[expandAlias("uikeybind ]]..alias..[[ remove")]], "Rimuovi il keybind associato all'alias '"..alias.."'", true)
      cecho(" "..ui.fGetKeybFormattedText(ui.aliases[alias].keybind)..ui.fGetOperatorFormattedText(" » "))
    ui.fLinkAlias(alias)
    cecho("\n")
  end
  if (#orderTable==0) then
    cecho("Per maggiori info "..ui.fGetCommandFormattedText("uihelp uikeybind").."\n\n")
  else
    echo("\n")
  end
end
--
-- Delete keybind from a table
function ui.fRemoveKeyb(element)
  if (element) then
    if (element.mod1) then
      element.mod1 = nil
    end
    if (element.mod2) then
      element.mod2 = nil
    end
    if (element.key) then
      element.key = nil
    end
    if (element.keybind) then
      element.keybind = nil
    end
    if (element.keybId) then
      killKey(element.keybId)
      element.keybId = nil
      --
      return 1 -- keyb removed
    end
    --
    return -1 -- Not keyb to remove
  end
  --
  return -2 -- Invalid element
end
--
function ui.fRemoveAllKeyb()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAllKeyb()")
  --
  for element in pairs(ui.aliases) do
    ui.fRemoveKeyb(ui.aliases[element])
  end
  --
  for element in pairs(ui.targets) do
    ui.fRemoveKeyb(ui.targets[element])
  end
end
--
-- Set, modify or delete a keybind
function ui.fSetKeyb(table, tKey, code, key1, key2, key3)
  local isValid, mod1, mod2, key, keybind = ui.fGetKeyb(key1, key2, key3)
  --
  if (table[tKey]) then
    if (isValid) then
      if (ui.fSearchKeyb(ui.targets, keybind, tKey) == nil) then
        if (ui.fSearchKeyb(ui.aliases, keybind, tKey) == nil) then
          --
          -- Remove old keybind
          ui.fRemoveKeyb(table[tKey]);
          --
          -- Create new keybind
          if (mod2 ~= "") then
            table[tKey].keybId = tempKey(ui.keyb_modifier[mod1] + ui.keyb_modifier[mod2], ui.keyb_single[key], code)
          elseif (mod1 ~= "") then
            table[tKey].keybId = tempKey(ui.keyb_modifier[mod1], ui.keyb_single[key], code)
          elseif (key ~= "") then
            table[tKey].keybId = tempKey(ui.keyb_single[key], code)
          else
            return 2, keybind -- keybind removed
          end
          --
          -- Save data
          table[tKey].mod1 = mod1
          table[tKey].mod2 = mod2
          table[tKey].key = key
          table[tKey].keybind = keybind
          --
          return 1, keybind -- keybind changed or created
        end
        --
        return -4, keybind -- keybind already used in an alias
      end
      --
      return -3, keybind -- keybind already used in a target
    end
    --
    return -2, keybind -- Not valid keys
  end
  --
  return -1, keybind -- Alias not exist
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Map \ Mapper</name>
				<packageName></packageName>
				<script>-- Based upon "generic GMCP mapping script for Mudlet" by Blizzard. https://worldofpa.in
-- based upon an MSDP script from the Mudlet forums in the generic mapper thread
-- with pieces from the generic mapper script and the mmpkg mapper by breakone9r
--
mudlet = mudlet or {}; 
mudlet.mapper_script = true
--
local iColor = {
  ["area"]      = '&lt;yellow&gt;',
  ["room"]      = '&lt;cyan&gt;',
  ["text"]      = '&lt;ansiMagenta&gt;',
  ["special"]   = '&lt;orange&gt;',
}
--
local terrain_types = {
  -- Used to make rooms of different terrain types have different colors
  -- add a new entry for each terrain type, and set the color with RGB values
  -- each id value must be unique, terrain types not listed here will use mapper default color
  ["Acque Basse"]      = {id =  18, r =   0, g = 153, b = 153 },
  ["Acque Profonde"]   = {id =  19, r =   0, g =   0, b = 153 },
  ["Costa"]            = {id =  20, r = 153, g = 153, b =   0 },
  ["Ghiacci"]          = {id =  21, r = 255, g = 255, b = 255 },
  ["Palude"]           = {id =  22, r =  64, g =  64, b =  64 },
  ["Sott'acqua"]       = {id =  23, r =   0, g =   0, b = 255 },
  ["Spiaggia"]         = {id =  24, r = 255, g = 255, b =   0 },
  ["Foresta"]          = {id =  25, r =   0, g = 255, b =   0 },
  ["Giungla"]          = {id =  26, r =   0, g = 153, b =   0 },
  ["Prato"]            = {id =  27, r =   0, g = 255, b =   0 },
  ["Taiga"]            = {id =  28, r =   0, g = 153, b = 153 },
  ["Tra gli Alberi"]   = {id =  29, r =   0, g = 153, b =   0 },
  ["Deserto"]          = {id =  30, r = 255, g =   0, b =   0 },
  ["Savana"]           = {id =  31, r = 255, g = 255, b =   0 },
  ["Steppa"]           = {id =  32, r = 153, g = 153, b =   0 },
  ["Tundra"]           = {id =  33, r =   0, g = 255, b = 255 },
  ["Collina"]          = {id =  34, r = 255, g = 255, b =   0 },
  ["Montagna"]         = {id =  35, r = 153, g = 153, b =   0 },
  ["Pianura"]          = {id =  36, r = 255, g = 255, b = 255 },
  ["Strada"]           = {id =  37, r = 128, g = 128, b = 128 },
  ["Citta'"]           = {id =  38, r = 128, g = 128, b = 128 },
  ["Citta' oscura"]    = {id =  39, r = 153, g =   0, b = 153 },
  ["Al chiuso"]        = {id =  40, r =  64, g =  64, b =  64 },
  ["Castello"]         = {id =  41, r = 128, g = 128, b = 128 },
  ["Cripta"]           = {id =  42, r =  64, g =  64, b =  64 },
  ["Maniero"]          = {id =  43, r = 128, g = 128, b = 128 },
  ["Negozio"]          = {id =  44, r = 153, g =   0, b = 153, c = "$" },
  ["Prigione"]         = {id =  45, r = 153, g =   0, b =   0 },
  ["Tempio"]           = {id =  46, r = 128, g = 128, b = 128 },
  ["Caverna"]          = {id =  47, r =  64, g =  64, b =  64 },
  ["Dungeon"]          = {id =  48, r =  64, g =  64, b =  64 },
  ["Sottosuolo"]       = {id =  49, r = 153, g =   0, b = 153 },
  ["Piano Astrale"]    = {id =  50, r =   0, g = 255, b = 255 },
  ["Piano Esterno"]    = {id =  51, r = 255, g = 255, b = 255 },
  ["Teletrasporto"]    = {id =  52, r = 255, g = 205, b = 255 },
  ["Vuoto cosmico"]    = {id =  53, r =  64, g =  64, b =  64 },
  ["Sconosciuto"]      = {id =  54, r =  64, g =  64, b =  64 },
  ["Sigil"]            = {id =  55, r = 255, g =   0, b =   0 },
  ["[Zona di Guerra]"] = {id =  56, r = 255, g =   0, b =   0 },
  ["A mezz'aria"]      = {id =  57, r =   0, g = 255, b = 255 },
  ["Veicolo"]          = {id =  58, r = 153, g = 153, b =   0 },
  ["Imbarcazione"]     = {id =  59, r = 153, g = 153, b =   0 },
}
--
function ui.fSearchRoom(room_or_id)
  local result = {}
  local s = searchRoom(room_or_id)
  --
  -- Search for ID: Convert search from ID in search from text (validate ID)
  if (type(s) == 'string') then
    if (not rex.match(s, [[searchRoom: (.*)]])) then
      room_or_id = tonumber(room_or_id)
      result[room_or_id] = s
    end
  else
    result = table.deepcopy(s);
  end
  --
  return result
end
--
-- Show a list of rooms
function ui.fShowRooms(rooms)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowRooms(...)")
  --
  cecho(ui.fTitle("Stanze"))
  --
  if (table.is_empty(rooms)) then
    cecho("Non ci sono stanze da mostrare\n\n")
  else
    local counter = 0;
    for k, v in ui.fOrderedPairs(rooms) do
      cecho(ui.fGetNumberFormattedText(k, 5).." ")
      cechoLink(ui.cLink("I"), [[expandAlias("uiinfo ]]..k..[[")]], "Info su '"..v.."'", true)
      echo(" ") 
      cechoLink(ui.cLink("T"), [[expandAlias("uitrack ]]..k..[[")]], "Traccia un sentiero per '"..v.."'", true)
      echo(" ") 
      cechoLink(ui.cLink("G"), [[expandAlias("uigo ]]..k..[[")]], "Vai a '"..v.."'", true)
      cecho(" "..iColor["room"]..ui.fConvertColorString(v).." "..iColor["text"].."Area: "..iColor["area"]..getRoomAreaName(getRoomArea(k)).."\n")
      counter = counter + 1;
    end
    echo("\n")
    ui.fEchon(iColor["text"].."Trovate &lt;white&gt;"..counter..iColor["text"].." stanze");
  end
end
--
-- Returns colored text based on door type
local function getDoorStatus(status)
  status = tonumber(status)
  --
  if (status == 1) then
    return "&lt;green&gt;Aperta&lt;r&gt;"
  elseif (status == 2) then
    return "&lt;yellow&gt;Chiusa&lt;r&gt;"
  elseif (status == 3) then
    return "&lt;red&gt;Chiusa a chiave&lt;r&gt;"
  end
  --
  return "&lt;white&gt;Non definita ("..status..")&lt;r&gt;"
end
--
-- Returns room information
function ui.fRoomInfo(id, infoType, onlyReturn)
  local outString = ""
  --
  -- id rom or map selected room or actual room
  id = id or getMapSelection()["center"] or getPlayerRoom()
  --
  if (not onlyReturn) then
    if (id == getMapSelection()["center"]) then
      outString = ui.fTitle("Informazioni &lt;yellow&gt;stanza selezionata sulla mappa&lt;r&gt; "..iColor["text"].."#"..iColor["room"]..id..iColor["text"])
    elseif (id == getPlayerRoom()) then
      outString = ui.fTitle("Informazioni &lt;green&gt;stanza attuale&lt;r&gt; "..iColor["text"].."#"..iColor["room"]..id..iColor["text"])
    else
      outString = ui.fTitle("Informazioni stanza "..iColor["text"].."#"..iColor["room"]..id..iColor["text"])
    end
  end
  --
  id = tonumber(id)
  --
  if (id) then
    local name = getRoomName(id)
    infoType = infoType or "all"
    onlyReturn = onlyReturn or false;
    --
    if (name) then
      local idAarea = getRoomArea(id)
      local nameAarea = getRoomAreaName(idAarea)
      local x, y, z = getRoomCoordinates(id)
      local exits = getRoomExits(id)
      local specialExits = getSpecialExits(id)
      local doors = getDoors(id)
      local entrances = getAllRoomEntrances(id)
      local userData = getAllRoomUserData(id)
      --
      if (infoType == "room") or (infoType == "all") then
        outString = outString..iColor["text"].."Room: "..iColor["room"]..name.." "..iColor["text"].."#"..iColor["room"]..id.." "..iColor["text"].."(x:&lt;white&gt;"..x..", "..iColor["text"].."y:&lt;white&gt;"..y..iColor["text"]..")\n" -- [&lt;white&gt;"..getRoomWeight(id).." - "..(roomLocked(id) and "Chiusa" or "Aperta")..iColor["text"].."]
      end
      --
      if (infoType == "area") or (infoType == "all") then
        outString = outString..iColor["text"].."Area: "..iColor["area"]..nameAarea.." "..iColor["text"].."#"..iColor["area"]..idAarea.."\n"
      end
      --
      if (infoType == "exit") or (infoType == "all") then
        if (table.is_empty(exits)) then
          outString = outString..iColor["text"].."Non ci sono uscite.\n"
        else
          outString = outString..iColor["text"].."Uscite:\n"
          for k,v in pairs(exits) do
            local exitIdArea = getRoomArea(v)
            outString = outString.."  "..ui.validExit[k].color..ui.validExit[k].token.." "..ui.validExit[k].long
            -- Doors
            if (doors[ui.validExit[k].short]) then
              outString = outString.." "..iColor["text"].."["..getDoorStatus(doors[ui.validExit[k].short])..iColor["text"].."]"
            end
            -- Name and ID
            outString = outString.." "..iColor["room"]..getRoomName(v).." "..iColor["text"].."#"..iColor["room"]..v            
            -- User Data
            if (userData[ui.validExit[k].short]) then
              outString = outString.." "..iColor["text"].."("..ui.validExit[k].color..userData[ui.validExit[k].short]..iColor["text"]..")"
            end
            -- Destination to different area
            if (exitIdArea ~= idAarea) then
              outString = outString.." "..iColor["text"].."Area: "..iColor["area"]..getRoomAreaName(exitIdArea).." "..iColor["text"].."#"..iColor["area"]..exitIdArea
            end      
            outString = outString.."\n"
          end
        end
      end 
      --
      if (infoType == "otherexit") or (infoType == "all") then
        if (table.is_empty(specialExits)) then
          outString = outString..iColor["text"].."Non ci sono uscite speciali.\n"
        else
          outString = outString..iColor["text"].."Uscite speciali:\n"
          for k,v in pairs(specialExits) do
            local exitIdArea = getRoomArea(k)
            for n, d in pairs(v) do
              outString = outString.."  "..iColor["text"].."'"..iColor["special"]..n..iColor["text"].."'"
              -- Door
              if (tonumber(d) &gt; 0) then
                outString = outString.." "..iColor["text"].."["..getDoorStatus(d)..iColor["text"].."]"
              end
              -- Name and ID
              outString = outString.." "..iColor["room"]..getRoomName(k).." "..iColor["text"].."#"..iColor["room"]..k
              -- Destination to different area
              if (exitIdArea ~= idAarea) then
                outString = outString.." "..iColor["text"].."Area: "..iColor["area"]..getRoomAreaName(exitIdArea).." "..iColor["text"].."#"..iColor["area"]..exitIdArea
              end      
              outString = outString.."\n"
            end
          end
        end
      end
      --
      if (infoType == "door") then
        if (table.is_empty(doors)) then
          outString = outString..iColor["text"].."Non ci sono porte.\n"
        else
          outString = outString..iColor["text"].."Porte:\n"
          for k,v in pairs(doors) do
            outString = outString.."  "..ui.validExit[k].color..ui.validExit[k].token.." "..ui.validExit[k].long
            if (v == 1) then
              outString = outString.." "..iColor["text"].."(&lt;green&gt;Aperta"..iColor["text"]..")\n"
            elseif (v == 2) then
              outString = outString.." "..iColor["text"].."(&lt;yellow&gt;Chiusa"..iColor["text"]..")\n"
            elseif (v == 3) then
              outString = outString.." "..iColor["text"].."(&lt;red&gt;Chiusa a chiave"..iColor["text"]..")\n"
            else
              outString = outString.." "..iColor["text"].."(&lt;orange&gt;Non definita"..iColor["text"]..") (&lt;white&gt;"..v..iColor["text"]..")\n"
            end     
          end
        end
      end
      --
      if (infoType == "entrance") or (infoType == "all") then
        if (table.is_empty(entrances)) then
          outString = outString..iColor["text"].."Non ci sono entrate.\n"
        else
          outString = outString..iColor["text"].."Entrate:\n"
          for k,v in pairs(entrances) do
            local entranceExits = getRoomExits(v)
            local entranceSpecialExits = getSpecialExits(v)
            local sEntrance = ""
            --
            if (not table.is_empty(entranceExits)) then
              for k2,v2 in pairs(entranceExits) do
                if (v2 == id) then
                  sEntrance = sEntrance..ui.validExit[k2].color..ui.validExit[k2].token.." "..ui.validExit[k2].long.." "
                end      
              end
            end 
            --
            if (not table.is_empty(entranceSpecialExits)) then
              for k2,v2 in pairs(entranceSpecialExits) do
                if (k2 == id) then
                  for n, d in pairs(v2) do
                    sEntrance = sEntrance.."&lt;orange&gt;▷ "..n.." "
                  end
                end
              end
            end
            --
            local entranceIdArea = getRoomArea(v)
            sEntrance = sEntrance..iColor["text"].."da "..iColor["room"]..getRoomName(v).." "..iColor["text"].."#"..iColor["room"]..v
            if (entranceIdArea ~= idAarea) then
              sEntrance = sEntrance.." "..iColor["text"].."Area: "..iColor["area"]..getRoomAreaName(entranceIdArea).." "..iColor["text"].."#"..iColor["area"]..entranceIdArea
            end
            outString = outString.."  "..sEntrance.."\n"
          end
        end
      end
      --
      if (infoType == "data") then
        if (table.is_empty(userData)) then
          outString = outString..iColor["text"].."Non ci sono note.\n"
        else
          local function readUserData(userData, direction)
            local dir = 'x';
            local name = '???';
            local action = '???';
            local key = '';
            --
            if (userData[direction]) then
              dir = ui.validExit[direction].token;
              name = userData[direction] 
            end
            
            if (userData[direction.."_action"]) then
              action = userData[direction.."_action"]
            end
            
            if (userData[direction.."_key"]) then
              key = " ("..userData[direction.."_key"]..")"
            end
                        
            return dir.." "..action.." "..name..key;
          end
          
          outString = outString..iColor["text"].."Note:\n"
          if (userData['u']) then
            outString = outString.."  "..readUserData(userData, 'u').."\n"
          end
          if (userData['n']) then
            outString = outString.."  "..readUserData(userData, 'n').."\n"
          end
          if (userData['e']) then
            outString = outString.."  "..readUserData(userData, 'e').."\n"
          end
          if (userData['s']) then
            outString = outString.."  "..readUserData(userData, 's').."\n"
          end
          if (userData['w']) then
            outString = outString.."  "..readUserData(userData, 'w').."\n"
          end
          if (userData['d']) then
            outString = outString.."  "..readUserData(userData, 'd').."\n"
          end
          --for k,v in pairs(userData) do
          --  outString = outString.."  "..iColor["room"]..k..iColor["text"].." = &lt;white&gt;"..v.."&lt;r&gt;\n"
          --end
        end
      end
    else
      outString = outString..iColor["text"].."La stanza (&lt;white&gt;"..(id or "nil")..iColor["text"]..") non esiste o non è stata ancora esplorata.\n"
    end
  else
    outString = outString..iColor["text"].."L'indice della stanza non è valido.\n"
  end
  --
  if (onlyReturn) then
    return string.gsub(outString, "\&lt;%w+\&gt;", "")
  else
    cecho(ui.fConvertColorString(outString.."\n"))
  end
end
--
-- Highlight a single room
function ui.fHighlightRoom(roomId)
  local specialExits = getSpecialExits(roomId)
  local actualRoomId = tonumber(ui.room.id or "-1")
  --
  roomId = tonumber(roomId)
  --
  local memberRoom = {}
  --
  if (gmcp) and (gmcp.char) and (gmcp.char.group) then
    for member in pairs(gmcp.char.group) do
      if (gmcp.char.group[member].inRoomVNum) then
        local inRoomVNum = gmcp.char.group[member].inRoomVNum
        inRoomVNum = tonumber(inRoomVNum)
        if (inRoomVNum ~= actualRoomId) then        
          table.insert(memberRoom, gmcp.char.group[member].inRoomVNum)
        end
      end
    end
  end  
  --
  if (table.contains(memberRoom, roomId)) then
    --
    -- Highlight a member group in other room...
    highlightRoom(roomId, 0,255,0, 0,255,0, 1.5, 128, 128)
  --
  elseif (table.contains(ui.speedwalk.path, roomId)) then
    --
    -- Highlight speedWalk path...
    highlightRoom(roomId, 255,255,255, 255,255,255, 1.5, 128, 128)
  else
    --
    -- Unhighlight rooms
    unHighlightRoom(roomId)
  end
end
--
-- Highlight Area
function ui.fHighlightArea(areaID)
  local rooms = getAreaRooms(areaID)
  --
  for _,id in ipairs(rooms) do
    ui.fHighlightRoom(id)
  end
end
--
--
function ui.fMapAreaChanged(event, areaId, areaId_from)
  areaId = tonumber(areaId);
  --
  ui.fHighlightArea(areaId);
end
--
-- Performs speedwalk recursively checking for individual rooms reached
function ui.fSpeedWalk(path, dirs)
  local roomId = ui.room.id or getPlayerRoom()
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSpeedWalk(..)")
  --
  if (ui.handlers.fSpeedWalk) then 
    killTimer(ui.handlers.fSpeedWalk)
    ui.handlers.fSpeedWalk = nil; 
  end
  --
  -- if arrive at next room
  if (tonumber(path[1]) == tonumber(roomId)) then
    --
    -- Go to next room
    if (#dirs &gt; 0) then
      local dir = dirs[1];
      --
      if (ui.validExit[dir]) then
        ui.fEchon("Prosegui lungo il percorso andando verso "..ui.validExit[dir].color..ui.validExit[dir].long)
      else
        -- May be special exit or door
        ui.fEchon(dir)
      end
      -- Send command
      expandAlias(dir, false)
      --
      table.remove(dirs, 1)
      table.remove(path, 1)
      --
      -- Recall to check time out and send next command if necessary
      ui.speedwalk.timer = 0
      ui.handlers.fSpeedWalk = tempTimer(ui.speedwalk.delay, function() ui.fSpeedWalk(path, dirs) end)
    else
      ui.fEchon("Sei arrivato alla fine del percorso")    
    end
  --
  -- Recall if not time out
  elseif (ui.speedwalk.timer &lt; ui.speedwalk.timeOut) then
    ui.speedwalk.timer = ui.speedwalk.timer + ui.speedwalk.delay;
    ui.handlers.fSpeedWalk = tempTimer(ui.speedwalk.delay, function() ui.fSpeedWalk(path, dirs) end)
  --
  -- Time out
  else
    ui.fEchon("Speedwalk interrotto.")
  end
end
--
-- Pharse speedwalk
function ui.fPrepareSpeedWalk(path, dirs)
  local roomId = ui.room.id or getPlayerRoom()
  local p = table.deepcopy(path) or {}
  local d = table.deepcopy(dirs) or {}
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fPrepareSpeedWalk(..)")
  --
  if (#p ~= 0) then
    --
    -- Insert actual\start position
    table.insert(p, 1, roomId)
    --
    -- Go through dirs to find doors that need opened, etc
    -- add in necessary extra commands to dirs table
    for k = 1, #p do
      --local id, dir = p[k], d[k]
      --if (ui.validExit[dir]) then
      --  local userData = getAllRoomUserData(id)
      --  --
      --  if (userData[ui.validExit[dir].short]) then
      --    table.insert(p, k, id)
      --    table.insert(d, k, userData[ui.validExit[dir].short])
      --    k = k + 1
      --  end
      --end
      p[k] = tonumber(p[k])
    end
  end
  --
  ui.speedwalk.path = {} 
  ui.speedwalk.path = table.deepcopy(p)
  --
  return p, d
end
--
-- System function called when double-click on a single map room 
function doSpeedWalk()
  local path, dirs = ui.fPrepareSpeedWalk(speedWalkPath, speedWalkDir)
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] doSpeedWalk()")
  --
  -- Execute speedwalk
  if (#path ~= 0) then
    ui.speedwalk.timer = 0;
    ui.fSpeedWalk(path, dirs)
  end
  --
  ui.fHighlightArea(ui.room.areaId)
end
--
--
function ui.fExpandArea(areaName)
  local areas = getAreaTable()
  local areaId = areas[areaName] 
  --
  if (areaId) then
    local rooms = getAreaRooms(areaId)
    local min_x, min_y, max_x, max_y = getAreaDimension(areaId)
    --
    local x = (max_x - min_x)
    --
    for i = max_x, min_x, -1 do
      local y = (max_y - min_y)
      for j = max_y, min_y, -1 do
        roomsByPosition = getRoomsByPosition(areaId, i, j, 0)
        for _, roomId in pairs(roomsByPosition) do
          setRoomCoordinates(roomId, x*2, y*2, 0)
        end
        y = y - 1
      end
      x = x - 1
    end
    --
    ui.fDebug('Area expanded ('..areaName..')')
  else
    ui.fDebug('Area non trovata ('..areaName..')')
  end
end
--
function ui.fCreateRoomSpace(areaId, roomId, x, y, entry)
  local min_x, min_y, max_x, max_y = getAreaDimension(areaId)
  --
  -- OverLap
  local overlap = not table.is_empty(getRoomsByPosition(areaId, x, y, 0))
  local is_path = false;
  --
  if (entry == "north") or (entry == "south") then
    local lRoomId
    local lr_x = x-1
    --
    -- Cerco prima room a sinistra sulla linea
    while (lr_x &gt;= min_x) and (lRoomId == nil) do
      local RoomsByPosition = getRoomsByPosition(areaId, lr_x, y, 0)
      if (not table.is_empty(RoomsByPosition)) then
        lRoomId = RoomsByPosition[0]
      end
      lr_x = lr_x - 1;
    end
    -- Se trovo una room
    if (lRoomId) then
      -- verifico se ha un uscita a est
      local exits = getRoomExits(lRoomId)
      if (exits["east"]) then
        local rr_x, rr_y, rr_z = getRoomCoordinates(exits["east"])
        if rr_x &gt; x then
          -- Il percorso tra le due stanze è sul punto di inserimento
          is_path = true;
        end
      end
    end
  elseif (entry == "west") or (entry == "east") then
    local bRoomId
    local br_y = y-1
    --
    -- Cerco prima room sopra la linea
    while (br_y &gt;= min_y) and (yRoomId == nil) do
      local RoomsByPosition = getRoomsByPosition(areaId, x, br_y, 0)
      if (not table.is_empty(RoomsByPosition)) then
        bRoomId = RoomsByPosition[0]
      end
      br_y = br_y - 1;
    end
    -- Se trovo una room
    if (bRoomId) then
      -- verifico se ha un uscita a est
      local exits = getRoomExits(bRoomId)
      if (exits["north"]) then
        local rr_x, rr_y, rr_z = getRoomCoordinates(exits["north"])
        if rr_y &gt; y then
          -- Il percorso tra le due stanze è sul punto di inserimento
          is_path = true;
        end
      end
    end
  end
  -- 
  -- Se la posizione è già occupata da un altra stanza
  if (overlap) or (is_path) then
    -- TODO: convertire ui.fEchon in ui.fDebug
    if (overlap) then
      ui.fEchon("&lt;orange&gt;Room "..roomId.." (from "..(entry or "&lt;red&gt;nil&lt;orange&gt;")..") OVERLAP")
    else
      ui.fEchon("&lt;orange&gt;Room "..roomId.." (from "..(entry or "&lt;red&gt;nil&lt;orange&gt;")..") IS ON PATH")
    end
    -- Se la room ha una direzione di entrata valida...
    if (entry ~= nil) and (table.contains(ui.validExit, entry)) then
      -- ... sposto la mappa già disegnata nel lato opposto al lato di entrata di una posizione per creare lo spazio 
      for rd_id in pairs(roomDrawed) do
        local rd_x, rd_y, rd_z = getRoomCoordinates(rd_id)
        --
        if (entry == "north") and (rd_y &lt;= y) then
          ui.fEchon("  &lt;magenta&gt;Muovo "..rd_id.." in giu'")          
          setRoomCoordinates(rd_id, rd_x, rd_y-1, 0)
        elseif (entry == "south") and (rd_y &gt;= y) then -- ok
          ui.fEchon("  &lt;magenta&gt;Muovo "..rd_id.." in su")          
          setRoomCoordinates(rd_id, rd_x, rd_y+1, 0)
        elseif (entry == "west") and (rd_x &lt;= x) then -- ok
          ui.fEchon("  &lt;magenta&gt;Muovo "..rd_id.." a destra")          
          setRoomCoordinates(rd_id, rd_x-1, rd_y, 0)
        elseif (entry == "east") and (rd_x &gt;= x) then
          ui.fEchon("  &lt;magenta&gt;Muovo "..rd_id.." a sinistra")          
          setRoomCoordinates(rd_id, rd_x+1, rd_y, 0)
        end
      end
      --
      ui.fDebug("&lt;magenta&gt;Moved sub-area to "..ui.validExit[entry].reverse)
    else
      -- ... altrimenti posto la stanza verso sud-est, fino a trovare una posizione libera.
      x = max_x + 1
      y = max_y + 1
      ui.fDebug("&lt;yellow&gt;Sub-Area started to S-E")
    end
  end
  --
  return x, y
end
--
function ui.fDrawRoom(areaId, roomId, x, y, entry, maxLevel)
  if (maxLevel ~= nil) then
    if (level &lt; maxLevel) then    
      ui.fDebug(ui.fAddSpace(""..(level+1)..") ", level+4, 'r'));
    else
      return
    end
  end
  --
  -- Se la stanza non è già stata disegnata...
  if (roomDrawed[roomId] == nil) then
    local roomAreaId = getRoomArea(roomId)
    --
    if (roomAreaId == areaId) then
      x, y = ui.fCreateRoomSpace(areaId, roomId, x, y, entry)
      --
      setRoomCoordinates(roomId, x, y, 0)
      roomDrawed[roomId] = true;
      level = level + 1;
      ui.fDebug("&lt;green&gt;Room "..roomId.." (from &lt;red&gt;"..(entry or "nil").."&lt;green&gt;) drowed in pos(x:"..x..", y:"..y..")");
      --
      -- Disegno le stanza adiacenti alle uscite
      local exits = getRoomExits(roomId)
      if (exits["east"]) and (exits["east"] ~= roomId) then
        ui.fDrawRoom(areaId, exits["east"], x+1, y, "west", maxLevel)
      end
      --
      if (exits["west"]) and (exits["west"] ~= roomId) then
        ui.fDrawRoom(areaId, exits["west"], x-1, y, "east", maxLevel)
      end
      --
      if (exits["north"]) and (exits["north"] ~= roomId) then
        ui.fDrawRoom(areaId, exits["north"], x, y+1, "south", maxLevel)
      end
      --
      if (exits["south"]) and (exits["south"] ~= roomId) then
        ui.fDrawRoom(areaId, exits["south"], x, y-1, "north", maxLevel)
      end
      --
      -- Disegno le stanza adiacenti alle entrate alla room
      local entrances = getAllRoomEntrances(roomId)
      for _,entranceId in pairs(entrances) do
        if (roomDrawed[entranceId] == nil) then
          local entranceAreaId = getRoomArea(entranceId)
          --
          if (entranceAreaId == areaId) then
            local entranceExits = getRoomExits(entranceId)
            --
            if (entranceExits["east"]) and (entranceExits["east"] == roomId) then
              ui.fDrawRoom(areaId, entranceId, x-1, y, "east", maxLevel)
            end
            --
            if (entranceExits["west"]) and (entranceExits["west"] == roomId) then
              ui.fDrawRoom(areaId, entranceId, x+1, y, "west", maxLevel)
            end
            --
            if (entranceExits["north"]) and (entranceExits["north"] == roomId) then
              ui.fDrawRoom(areaId, entranceId, x, y-1, "north", maxLevel)
            end
            --
            if (entranceExits["south"]) and (entranceExits["south"] == roomId) then
              ui.fDrawRoom(areaId, entranceId, x, y+1, "south", maxLevel)
            end
          end
        end
      end   
    end
--  else
--    TODO: verifica le coordinate    
  end
end
--
function ui.fRedrawArea(areaName, expand, maxLevel)
  local areas = getAreaTable()
  local areaId = areas[areaName] 
  --
  if (areaId) then
    local rooms = getAreaRooms(areaId)
    --
    -- Sposto tutte le stanze sul livello 1
    for _, roomId in pairs(rooms) do
      local x, y, z = getRoomCoordinates(roomId)
      setRoomCoordinates(roomId, x, y, 1)
    end
    --
    -- Riposiziono maxLevel room sul livello 0
    level = 0
    roomDrawed = {}
    for _, roomId in pairs(rooms) do
      ui.fDrawRoom(areaId, roomId, 0, 0, nil, maxLevel)
    end
    --
    if (expand) then
      ui.fExpandArea(areaName)
    end
    --
    ui.fDebug('Area redrawed ('..areaName..')')
  else
    ui.fDebug('Area non trovata ('..areaName..')')
  end
end
--
-- Create a room and try to place it in a valid position
local function fUpdateRoom(room, prev)
  local coords = { 0, 0, 0 }
  local areas = getAreaTable()
  local areaID = areas[string.trim(room.area)]
  local move_vectors = {
    --         X   Y   Z
    north = {  0,  1,  0},
    south = {  0, -1,  0},
    east  = {  1,  0,  0},
    west  = { -1,  0,  0},
    up    = {  1,  1,  0},
    down  = { -1, -1,  0}
  }
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] fUpdateRoom(..)")
  --
  -- Create Room
  addRoom(room.id)
  --
  -- Set room name (remove colors)
  local name = string.gsub(room.name, "$C", "$c")
  name = string.gsub(name, "$c%d%d%d%d", "")
	setRoomName(room.id, name)
  --
  if (not areaID) then
    -- Create Area if not exist
    areaID = addAreaName(room.area)
  end
  --
  -- Positions from file
  if (ui.map[room.id] ~= nil ) then
    --
    -- Get room positions among pre-stored positions
    ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] fUpdateRoom(..) - Get room positions among pre-stored positions")
    coords = { 
      ui.map[room.id].x or 0,
      ui.map[room.id].y or 0,
      ui.map[room.id].z or 0
    }
  --
  elseif (room.area == prev.area) then
    local shift = { 0, 0, 0 }
    --
    -- Determinate room position (if last room is from same area)
    ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] fUpdateRoom(..) - Determinate room position")
    coords = { getRoomCoordinates(prev.id) }
    for k,v in pairs(room.exits) do
      if v == prev.id and move_vectors[k] then
        --
        -- C'è almeno un collegamento con la staza di provenienza a "..k.."... ricalcolo shift
        for n = 1,3 do
          shift[n] = shift[n] + move_vectors[k][n]
        end
      end
    end
    --
    -- Shift = 0 0 0
    if (shift[1] == 0) and (shift[2] == 0) and (shift[3] == 0)then
      --
      -- Aggiungo direzione di provenienza = ui.origins
      if (#ui.origins &gt; 0) then
        for _, dir in pairs(ui.origins) do
          if (exitValid[dir]) then
            shift[1] = shift[1] + move_vectors[dir][1]
            shift[2] = shift[2] + move_vectors[dir][2]
            shift[3] = shift[3] + move_vectors[dir][3]
          end
        end
      end
    end
    --
    -- Again Shift = 0 0 0
    if (shift[1] == 0) and (shift[2] == 0) and (shift[3] == 0)then
      --
      -- Force top-right position
      shift = {-1,-1,0} 
    end
    --
    coords[1] = coords[1] - shift[1]
    coords[2] = coords[2] - shift[2]
    coords[3] = coords[3] - shift[3]
    --
    -- map stretching
    local overlap = getRoomsByPosition(areaID,coords[1],coords[2],coords[3])
    if not table.is_empty(overlap) then
      local rooms = getAreaRooms(areaID)
      local rcoords
      for _,id in ipairs(rooms) do
        rcoords = {getRoomCoordinates(id)}
        for n = 1,3 do
          if shift[n] ~= 0 and (rcoords[n] - coords[n]) * shift[n] &lt;= 0 then
            rcoords[n] = rcoords[n] - shift[n]
          end
        end
        setRoomCoordinates(id,rcoords[1],rcoords[2],rcoords[3])
      end
    end
  end
  --
  -- Associate area to room
  setRoomArea(room.id, areaID)
  --
  -- Set coordinates
  setRoomCoordinates(room.id, coords[1], coords[2], coords[3])
end
--
--
function ui.fUpdateMapper()
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateMapper(..)")
  --
  if (ui.room) and (not ui.room.isOnMap) then
    --
    -- Invalid ui.room
    if (ui.room.id == nil) then
      return
    --
    -- Service room
    elseif (ui.room.id &lt;= 0) then
      ui.room.id = 10; -- not used room
    end
    --
    -- Create new room if not exist
    if (not getRoomName(ui.room.id)) then
      fUpdateRoom(ui.room, ui.previous.room)
    end
    --
    -- Save areaId (after fUpdateRoom() it will surely exist)
    ui.room.areaId = getAreaTable()[string.trim(ui.room.area)]
    --
    -- if area changed...
    if (ui.room.area ~= ui.previous.room.area) then
      local zoom = getMapZoom(ui.previous.room.areaId or ui.room.areaId)
      --
      -- Set map zoom
      setMapZoom(zoom, ui.room.areaId)
      -- 
      -- if is mutable area
      if (ui.room.area == 'Il Dungeon di Bosco Verde ') or -- need end space
         (ui.room.area == 'Instancing') or
         (ui.room.area == 'Random Dungeons') then 
        local rooms = getAreaRooms(ui.room.areaId)
        --
        -- Clear area
        for _, roomId in pairs(rooms) do
          deleteRoom(roomId)
        end
      end
    end
    --
    -- Update color and character from terrain
    setRoomChar(ui.room.id, "");
    if (terrain_types[ui.room.terrain]) then
      setRoomEnv(ui.room.id, tonumber(terrain_types[ui.room.terrain].id))
      -- Assign a char if available
      if (terrain_types[ui.room.terrain].c) then
        setRoomChar(ui.room.id, terrain_types[ui.room.terrain].c)
      end
    end
    --
    -- Update exits
    for dir, id in pairs(ui.room.exits) do
      setExitStub(ui.room.id, dir, true)
      if getRoomName(id) then
        setExit(ui.room.id, id, dir)
      end
    end
    --
    -- Update exit to prew
    for _, dir in pairs(ui.origins or {}) do
      if (ui.validExit[dir]) then
        setExit(ui.previous.room.id, ui.room.id, ui.validExit[dir].reverse)
      end
    end
    --
    -- Update special exits
    setExitStub(ui.room.id, "out", false)
    if not (table.is_empty(ui.room.otherExits)) then
      for dir, id in pairs(ui.room.otherExits) do
        addSpecialExit(ui.room.id, id, "ent "..dir)
        if (ui.enDebug&gt;=1) then
          ui.fLog(ui.room.area..": "..dir.." per "..(getRoomName(id) or "???").." ("..id..")")
        end
      end
      setExitStub(ui.room.id, "out", true)
    end
    --
    -- if area changed...
    if (ui.room.area ~= ui.previous.room.area) then
      ui.fHighlightArea(ui.room.areaId);
    end
    -- 
    -- Redraw Area
    if (ui.room.area == 'Random Dungeons') then 
      --
      -- redraw area
      ui.fRedrawArea(ui.room.area, true)
    end
    --
    centerview(ui.room.id)
    --
    GUI.Mapper:setTitle(ui.room.area.." - "..ui.room.name)
    --
    if (ui.enDebug&gt;=1) then
      ui.fLog("&lt;255,255,0:"..ui.colors.wBackground.."&gt;"..ui.room.area.."\n".."&lt;255,255,255:"..ui.colors.wBackground.."&gt;"..ui.room.id.." &lt;0,255,255:"..ui.colors.wBackground.."&gt;"..ui.room.name)
    end
  end
end
--
function ui.fInitMapper()
  local file = ui.files.map.path..ui.files.map.name
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitMapper()")
  --
  -- Load pre-stored rooms positions
  if (io.exists(file)) then
    table.load(file, ui.map)
  end
  --
  -- Load terrain colors
  for k,v in pairs(terrain_types) do
    setCustomEnvColor(tonumber(v.id), v.r, v.g, v.b, 255)
  end
  --
  -- Special mapper room info
  registerMapInfo("Area",          function(...) return ui.fRoomInfo(nil,      "area", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("Room",          function(...) return ui.fRoomInfo(nil,      "room", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("Exits",         function(...) return ui.fRoomInfo(nil,      "exit", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("Special exits", function(...) return ui.fRoomInfo(nil, "otherexit", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("Doors",         function(...) return ui.fRoomInfo(nil,      "door", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("Entrance",      function(...) return ui.fRoomInfo(nil,  "entrance", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  registerMapInfo("User data",     function(...) return ui.fRoomInfo(nil,      "data", true) --[[ Text ]], false --[[ Bold ]], false --[[ Italic ]], 255, 255, 255 --[[ RGB text color ]]; end)
  --
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Map \ Overland</name>
				<packageName></packageName>
				<script>function ui.fUpdateOverand()
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateOverand()")
  --
  if (gmcp.overland) and (gmcp.overland.map) and (gmcp.overland.map.size) then
    --
    local fw, fh = calcFontSize("GUI.Mapper.Main.Overland")
    local size = tonumber(gmcp.overland.map.size)
    local maxChar = math.floor(GUI.Mapper.Main.Overland:get_width() / fw)
    local spacesCnt = math.floor(maxChar / 2) - size
    local spaces = "" -- white spaces
    --
    clearWindow("GUI.Mapper.Main.Overland")
    --
    for i = 1, spacesCnt do
      spaces = spaces.." "
    end 
    --
    GUI.Mapper.Main.Overland:cecho("&lt;white&gt;"..ui.fAddSpace(ui.room.subArea, maxChar).."\n"..
                                   "&lt;cyan&gt;"..ui.fAddSpace(ui.room.name, maxChar).."\n\n")
    --
    for i = 0, size do
      if gmcp.overland.map["r"..i] then
        GUI.Mapper.Main.Overland:decho(spaces..ansi2decho(gmcp.overland.map["r"..i]).."\n")
      end
    end
    --
    -- Room name
    GUI.Mapper:setTitle(ui.room.area.." - "..ui.room.terrain);
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Opponent</name>
				<packageName></packageName>
				<script>--
function ui.fDifTimerOpponent(time_left)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fDifTimerOpponent(&lt;white&gt;"..(time_left or "nil").."&lt;r&gt;)", 3)
  --
  if (ui.handlers.fDifTimerOpponent) then
    killTimer(ui.handlers.fDifTimerOpponent)
    ui.handlers.fDifTimerOpponent = nil;
  end
  --
  if (time_left &gt; 0) then
    ui.handlers.fDifTimerOpponent = tempTimer(time_left, function() ui.fDifTimerOpponent(0.0) end)
    GUI.Opponent.Main.Health.dif:show()
  else
    GUI.Opponent.Main.Health.dif:hide()
  end
end
--
function ui.fUpdateOpponent()
  local title
  local hpGaugeWidthDif = GUI.Opponent.Main.Health.front:get_width()
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateOpponent()")
  --
  -- init
  ui.opponent       = {}
  ui.opponent.hp    = 0
  ui.opponent.hpmax = 100
  ui.opponent.level = 0
  ui.opponent.name  = ""
  ui.opponent.desc  = ""
  --
  if (ui.enDebug &gt;= 2) then
    ui.opponent.hp         = math.random(0, 100)
    ui.opponent.level      = math.random(1, 60)
    ui.opponent.name       = "C4tt1v0ne"
    ui.opponent.desc       = "Il C4tt1v0ne di d3bug"
  elseif (gmcp) and (gmcp.char) and (gmcp.char.vitals) and (gmcp.char.vitals.fighting) then
    ui.opponent.hp         = gmcp.char.vitals.fighting.hp or ui.opponent.hp
    ui.opponent.level      = gmcp.char.vitals.fighting.level or ui.opponent.level
    ui.opponent.name       = gmcp.char.vitals.fighting.name or ui.opponent.name
    ui.opponent.desc       = gmcp.char.vitals.fighting.desc or ui.opponent.desc
  end
  --
  if (hpGaugeWidthDif == 0) and (ui.opponent.hp &gt; 0) then
    -- Engage
    hpGaugeWidthDif = GUI.Opponent.Main.Health.back:get_width()
  end
  --
  ui.opponent.hp = tonumber(ui.opponent.hp) or 0
  --
  if (ui.opponent.name ~= "") then
    --
    -- Showed name
    title = ui.opponent.name;
    --
    -- Name
    ui.opponent.name = string.gsub(ui.opponent.name, "(\$c%d+)", "")
    ui.opponent.name = string.gsub(ui.opponent.name, "$crk%d%d%d%d%d%d%d%d", "")
    ui.opponent.name = ui.fRemoveArticle(ui.opponent.name)
    ui.opponent.name = string.gsub(ui.opponent.name, " ", "-")
    --
    GUI.Opponent.Main.Health.front:echo(ui.opponent.name)
    --
    -- Level
    GUI.Opponent.Level:setFgColor(ui.fLevelColor(ui.opponent.level, ui.player.level))
    GUI.Opponent.Level:echo("&lt;center&gt;"..ui.opponent.level)
    GUI.Opponent.Level:show()
    --
    -- HP
    GUI.Opponent.Main.Health:setValue(math.max(0, ui.opponent.hp), ui.opponent.hpmax, "&lt;p align=right&gt;"..ui.opponent.hp.."%  &lt;/p&gt;")
    --
    -- Keybind
    ui.fAssignTargetButton("o0", ui.opponent.name)    
  else
    --
    -- reset showed name
    title = "* nessuno *"    --
    --
    -- Remove name
    GUI.Opponent.Main.Health.front:echo("")
    --
    -- Hide level
    GUI.Opponent.Level:hide()
    --
    -- Reset HP
    GUI.Opponent.Main.Health:setValue(0, 100, "")
    --
    -- Remove Keybind
    ui.fAssignTargetButton("o0", nil)
  end
  --
  ui.fUpdateAllTargetButtons()
  --
  -- Diff. hp
  hpGaugeWidthDif = GUI.Opponent.Main.Health.front:get_width() - hpGaugeWidthDif
  --
  if (hpGaugeWidthDif ~= 0) then
    local x, y, w, h, txt, CSS
    --
    if (hpGaugeWidthDif &lt; 0) then
      x = GUI.Opponent.Main.Health.front:get_x() - GUI.Opponent.Main:get_x() + GUI.Opponent.Main.Health.front:get_width() - 3
      y = GUI.Opponent.Main.Health.front:get_y() - GUI.Opponent.Main:get_y()
      w = -hpGaugeWidthDif
      h = GUI.Opponent.Main.Health.front:get_height()
      txt = "- -"
      CSS = GUI.CSS.GaugeFront..[[
        qproperty-alignment: 'AlignRight';
        border: 1px solid rgba(255, 0, 0, 0.8);
        background-color: rgba(255, 0, 0, 0.4);
      ]]
    else
      x = GUI.Opponent.Main.Health.front:get_x() - GUI.Opponent.Main:get_x() + GUI.Opponent.Main.Health.front:get_width() - hpGaugeWidthDif
      y = GUI.Opponent.Main.Health.front:get_y() - GUI.Opponent.Main:get_y()
      w = hpGaugeWidthDif
      h = GUI.Opponent.Main.Health.front:get_height()
      txt = "++"
      CSS = GUI.CSS.GaugeFront..[[
        qproperty-alignment: 'AlignRight';
        border: 1px solid rgba(0, 255, 0, 0.8);
        background-color: rgba(0, 255, 0, 0.4);
      ]]
    end
    --
    x = math.max(0, x);
    --
    GUI.Opponent.Main.Health.dif:move(x, y);
    GUI.Opponent.Main.Health.dif:resize(w, h)
    GUI.Opponent.Main.Health.dif:echo(txt)
    GUI.Opponent.Main.Health.dif:setStyleSheet(CSS)
    --
    ui.fDifTimerOpponent(1.5)
  end
  --
  -- Target on title
  if (ui.variables.target) and (ui.variables.target ~= "") then
    title = title.." (T:"..ui.variables.target..")"
  end
  GUI.Opponent:setTitle(title)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Options</name>
				<packageName></packageName>
				<script>-- Read Variables data from file
function ui.fReadFileOptions()
  local file = ui.files.options.path..ui.files.options.name
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileOptions()")
  --
  -- Remove actual Variables
  ui.options = {}
  --
  -- Load Variables
  if (io.exists(file)) then
    table.load(file, ui.options)
  end
  --
  -- Merge pre defined variables
  ui.options = table.update(ui.pre_defined_options, ui.options)
  --
  -- Save
  table.save(file, ui.options)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Parameters</name>
				<packageName></packageName>
				<script>--
function ui.fGetPreDefinitedParameters()
  return {
    widgets = {
      affects = {
        transparent = false,
      },
      aliasButton ={
        transparent = false,
      },
      chat = {
        split = "vertical",
        collapsePrivate = true,
        collapsePublic = true,    
        fontSize = 10,
      },
      cooldowns = {
        transparent = false,
      },
      endowment = {
        type = "name",
        transparent = false,
      },
      group = {
        transparent = false,
      },
      help = {
        fontSize = 10,
      },
      keybind = {
        fontSize = 7,
      },
      mapper = {
        transparent = false,
      },
      opponent = {
        transparent = false,
      },
      overland = {
        fontSize = 10,
      },
      player = {
        transparent = false,
      },
      room = {
        fontSize = 10,
        transparent = false,
      },
      targets = {
        transparent = false,
      },
    },
    page = "a",
  }
end
--
-- Save Parameters data to file
function ui.fSaveFileParameters()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSaveFileParameters()")
  --
  local file = ui.files.parameters.path..ui.files.parameters.name
  --
  table.save(file, ui.parameters)
end
--
-- Read Parameters data from file
function ui.fReadFileParameters()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileParameters()")
  --
  local file = ui.files.parameters.path..ui.files.parameters.name
  --
  -- Load parameters
  ui.parameters = ui.parameters or {}
  if (io.exists(file)) then
    table.load(file, ui.parameters)
  end
  ui.parameters = table.update(ui.fGetPreDefinitedParameters(), ui.parameters)
  --
  ui.fSaveFileParameters()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Player</name>
				<packageName></packageName>
				<script>--
function ui.fSoftenRound(time_left)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSoftenRound(&lt;white&gt;"..(time_left or "nil").."&lt;r&gt;)", 3)
  --
  if (ui.handlers.fSoftenRound) then
    killTimer(ui.handlers.fSoftenRound);
    ui.handlers.fSoftenRound = nil;
  end
  --
  -- Elapsed time
  ui.epoch = getEpoch();
  ui.previous.epoch = ui.previous.epoch or ui.epoch;
  ui.elapsed = ui.epoch - ui.previous.epoch;
  ui.previous.epoch = ui.epoch;
  --
  -- Round soften
  GUI.Player.Main.Round:setValue(math.max(0, time_left), ui.player.roundMax + 1, "")
  time_left = math.max(0, time_left - ui.elapsed);
  --
  ui.handlers.fSoftenRound = tempTimer(0.10, function() ui.fSoftenRound(time_left) end)
end
--
function ui.fDifTimerPlayer(time_left)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fDifTimerPlayer(&lt;white&gt;"..(time_left or "nil").."&lt;r&gt;)", 3)
  --
  if (ui.handlers.fDifTimerPlayer) then
    killTimer(ui.handlers.fDifTimerPlayer)
    ui.handlers.fDifTimerPlayer = nil;
  end
  --
  if (time_left &gt; 0) then
    ui.handlers.fDifTimerPlayer = tempTimer(time_left, function() ui.fDifTimerPlayer(0.0) end)
    GUI.Player.Main.Health.textDif:show();
    GUI.Player.Main.Health.dif:show()
  else
    GUI.Player.Main.Health.textDif:hide();
    GUI.Player.Main.Health.dif:hide()
  end
end
--
function ui.fUpdatePlayer()
  local hpGaugeWidthDif = GUI.Player.Main.Health.front:get_width()
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdatePlayer()")
  --
  -- init vars
  ui.player = {
    class          = "",
    experience     = 1,
    gold           = 0,
    level          = 0,
    name           = "",
    race           = "",
    toNext         = 1,

    hp             = 1,
    maxhp          = 1,
    mana           = 1,
    maxmana        = 1,
    pow            = 1,
    maxpow         = 1,
    
    roundMax       = 4,
    roundTicker    = 0,
    
    secsToTick     = 0,
    
    roomPos        = ui.player.roomPos or 5,
  }
  --
  ui.previous.player = ui.previous.player or ui.player;
  ui.previous.fastAffects = ui.previous.fastAffects or ui.fastAffects;
  --
  -- for debug
  if (ui.enDebug &gt;= 2) then
    ui.player.class          = "debugger"
    ui.player.experience     = math.random(0, 100000000)
    ui.player.gold           = math.random(0, 100000000)
    ui.player.level          = math.random(0, 60)
    ui.player.name           = "D3Bu4 M0D3"
    ui.player.race           = "bot"
    ui.player.toNext         = math.random(0, ui.player.experience)
  
    ui.player.hp             = math.random(0, 100)
    ui.player.maxhp          = 100
    ui.player.mana           = math.random(0, 100)
    ui.player.maxmana        = 100
    ui.player.pow            = math.random(0, 100)
    ui.player.maxpow         = 100
    
    ui.player.roundMax       = 5
    ui.player.roundTicker    = math.random(0, ui.player.roundMax)
    
    ui.player.secsToTick     = math.random(0, 74)
    
  elseif (gmcp) and (gmcp.char) then
    if (gmcp.char.base) then
      ui.player.class          = gmcp.char.base.class or ui.player.class
      ui.player.experience     = gmcp.char.base.experience or ui.player.experience
      ui.player.gold           = gmcp.char.base.gold or ui.player.gold
      ui.player.level          = gmcp.char.base.level or ui.player.level
      ui.player.name           = gmcp.char.base.name or ui.player.name
      ui.player.race           = gmcp.char.base.race or ui.player.race
      ui.player.toNext         = gmcp.char.base.toNext or ui.player.toNext
    end
    
    if (gmcp.char.vitals) then
      ui.player.hp             = gmcp.char.vitals.hp or ui.player.hp
      ui.player.maxhp          = gmcp.char.vitals.maxhp or ui.player.maxhp
      ui.player.mana           = gmcp.char.vitals.mana or ui.player.mana
      ui.player.maxmana        = gmcp.char.vitals.maxmana or ui.player.maxmana
      ui.player.pow            = gmcp.char.vitals.pow or ui.player.pow
      ui.player.maxpow         = gmcp.char.vitals.maxpow or ui.player.maxpow
      
      ui.player.roundMax       = gmcp.char.vitals.roundMax or ui.player.roundMax
      ui.player.roundTicker    = gmcp.char.vitals.roundTicker or ui.player.roundTicker
      
      ui.player.secsToTick     = gmcp.char.vitals.secsToTick or ui.player.secsToTick
    end
  end
  --
  -- Tittle
  if (ui.player.name ~= ui.previous.player.name) or
     (ui.player.race ~= ui.previous.player.race) or
     (ui.player.class ~= ui.previous.player.class) or
     (ui.fastAffects ~= ui.previous.fastAffects) then
    if (ui.fastAffects == '') then
      GUI.Player:setTitle(ui.player.name.." "..ui.player.race.." "..ui.player.class);
    else
      GUI.Player:setTitle(ui.player.name..ui.fastAffects);
    end
  end
  --
  -- Level
  if (ui.player.level ~= ui.previous.player.level) then
    GUI.Player.Level:echo("&lt;center&gt;"..ui.player.level);
  end
  --
  -- Tick
  ui.player.secsToTick = tonumber(ui.player.secsToTick)
  if (ui.player.secsToTick ~= ui.previous.player.secsToTick) then
    GUI.Player.Main.Tick:setValue(math.max(0, ui.player.secsToTick), 74, "")
    GUI.Player.Main.TickLabel:echo("&lt;p align=right&gt;"..ui.player.secsToTick.."&lt;/p&gt;")
    --
    -- Cooldowns soften (every seconds)
    if (not table.is_empty(ui.cooldowns)) then
      for cooldown in pairs(ui.cooldowns) do
        ui.cooldowns[cooldown].duration = math.max(0, ui.cooldowns[cooldown].duration - 1/4);
      end
      ui.fRefreshCooldownsWidget()
    end
  end
  --
  -- HP
  local hpDif = 0;
  ui.player.hp = tonumber(ui.player.hp)
  ui.player.maxhp = tonumber(ui.player.maxhp)
  if (ui.player.hp  ~= ui.previous.player.hp) or
     (ui.player.maxhp  ~= ui.previous.player.maxhp) then
    local hpPerc = math.floor(100 * ui.player.hp / ui.player.maxhp); 
    --
    hpDif = ui.player.hp - ui.previous.player.hp
    if (hpPerc &lt;= 40) and (ui.player.hp &lt; ui.previous.player.hp) then
      playSoundFile(ui.files.sounds.path..[[hurt.wav]], 10)
    end
    --
    GUI.Player.Main.Health:setValue(math.min(math.max(0, ui.player.hp), ui.player.maxhp), ui.player.maxhp,"&lt;p align=right&gt;"..ui.player.hp.."/"..ui.player.maxhp.." - "..hpPerc.."% &lt;/p&gt;")
  end
  --
  -- Round counter
  ui.player.roundTicker = tonumber(ui.player.roundTicker)
  ui.player.roundMax = tonumber(ui.player.roundMax)
  ui.player.roundMax = math.max(ui.player.roundMax, 1)  
  if (ui.player.roundTicker ~= ui.previous.player.roundTicker) or
     (ui.player.roundMax ~= ui.previous.player.roundMax) then
    if (ui.player.roundTicker == ui.player.roundMax + 1) then
      ui.fSoftenRound(ui.player.roundTicker)
    end
  end
  --
  -- Mana
  ui.player.mana = tonumber(ui.player.mana)
  ui.player.maxmana = tonumber(ui.player.maxmana)
  if (ui.player.mana ~= ui.previous.player.mana) or (ui.player.maxmana ~= ui.previous.player.maxmana) then
    local manaPerc = math.floor(100 * ui.player.mana / ui.player.maxmana); 
    --
    if (ui.player.mana &lt; ui.previous.player.mana) then
      playSoundFile(ui.files.sounds.path..[[cast.wav]], 10)
    end
    --
    GUI.Player.Main.Mana:setValue(math.min(math.max(0, ui.player.mana), ui.player.maxmana), ui.player.maxmana, "&lt;p align=right&gt;"..ui.player.mana.."/"..ui.player.maxmana.." - "..manaPerc.."% &lt;/p&gt;")
  end
  --
  -- Power
  ui.player.pow = tonumber(ui.player.pow)
  ui.player.maxpow = tonumber(ui.player.maxpow)
  if (ui.player.pow ~= ui.previous.player.pow) or
     (ui.player.maxpow  ~= ui.previous.player.maxpow) then
      local powerPerc = math.floor(100 * ui.player.pow / ui.player.maxpow);
      --
      GUI.Player.Main.Power:setValue(math.min(math.max(0, ui.player.pow), ui.player.maxpow), ui.player.maxpow, "&lt;p align=right&gt;"..ui.player.pow.."/"..ui.player.maxpow.." - "..powerPerc.."% &lt;/p&gt;")
  end
  --
  -- Experience
  ui.player.experience = tonumber(ui.player.experience)
  if (ui.player.experience &gt;= 200000000) then
    ui.player.experience = -tonumber(ui.player.toNext)
    ui.player.toNext = 100000000
  else
    ui.player.toNext = tonumber(ui.player.toNext) + ui.player.experience
    ui.player.toNext = math.max(ui.player.toNext, ui.player.experience)  
  end
  --
  if (ui.player.experience ~= ui.previous.player.experience) or
     (ui.player.toNext  ~= ui.previous.player.toNext) then
    GUI.Player.Main.Experience:setValue(math.min(math.max(0, ui.player.experience), ui.player.toNext), ui.player.toNext, "")
    GUI.Player.Main.ExperienceLabel:echo("&lt;p align=right&gt;"..ui.player.experience.."&lt;/p&gt;")
  end
  --
  hpGaugeWidthDif = GUI.Player.Main.Health.front:get_width() - hpGaugeWidthDif
  if (hpGaugeWidthDif ~= 0) then
    local x, y, w, h, CSS
    --
    if (hpGaugeWidthDif &lt; 0) then
      x = GUI.Player.Main.Health.front:get_x() - GUI.Player.Main:get_x() + GUI.Player.Main.Health.front:get_width() - 3
      y = GUI.Player.Main.Health.front:get_y() - GUI.Player.Main:get_y()
      w = -hpGaugeWidthDif
      h = GUI.Player.Main.Health.front:get_height()
      CSS = GUI.CSS.GaugeFront..[[
        qproperty-alignment: 'AlignRight';
        border: 1px solid rgba(255, 0, 0, 0.8);
        background-color: rgba(255, 0, 0, 0.4);
      ]]
      GUI.Player.Main.Health.textDif:setFgColor("red")
    else
      x = GUI.Player.Main.Health.front:get_x() - GUI.Player.Main:get_x() + GUI.Player.Main.Health.front:get_width() - hpGaugeWidthDif
      y = GUI.Player.Main.Health.front:get_y() - GUI.Player.Main:get_y()
      w = hpGaugeWidthDif
      h = GUI.Player.Main.Health.front:get_height()
      CSS = GUI.CSS.GaugeFront..[[
        qproperty-alignment: 'AlignRight';
        border: 1px solid rgba(0, 255, 0, 0.8);
        background-color: rgba(0, 255, 0, 0.4);
      ]]
      GUI.Player.Main.Health.textDif:setFgColor("green")
    end
    --
    GUI.Player.Main.Health.textDif:echo(hpDif)
    --
    GUI.Player.Main.Health.dif:move(x, y);
    GUI.Player.Main.Health.dif:resize(w, h)
    --GUI.Player.Main.Health.dif:echo("")
    GUI.Player.Main.Health.dif:setStyleSheet(CSS)
    --
    ui.fDifTimerPlayer(1.5)
  end
  --
  ui.previous.player = {}
  ui.previous.player = table.deepcopy(ui.player);
  ui.previous.fastAffects = {}
  ui.previous.fastAffects = table.deepcopy(ui.fastAffects);
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Room</name>
				<packageName></packageName>
				<script>local cPo   = "&lt;orange&gt;۩&lt;r&gt;"     -- Portals 
local cO    = "&lt;DimGrey&gt;o&lt;r&gt;"    -- Objects
local cM    = "&lt;red&gt;m&lt;r&gt;"        -- Mobs
local cG    = "&lt;green&gt;g&lt;r&gt;"      -- Groupe member
local cP    = "&lt;white&gt;◯&lt;r&gt;"      -- Player ●⬤◉◯○◯○◯
local cOp   = "&lt;yellow&gt;p&lt;r&gt;"     -- Other Players
local cPOpM = "&lt;orange&gt;ⓧ&lt;r&gt;"    -- Player, Other Players and Mobs 🅧 Ⓧ ⓧ
local cPM   = "&lt;red&gt;ⓜ&lt;orange&gt;"  -- Player and Mobs 🅜 Ⓜ ⓜ
local cPOp  = "&lt;yellow&gt;ⓟ&lt;r&gt;"    -- Player and Other Players 🅟 Ⓟ ⓟ
local cOpM  = "&lt;orange&gt;x&lt;r&gt;"     -- Other PLayers and Mobs
--
function ui.fDrawRoomPosition(position)
  local isPlayerPos = (ui.player.roomPos == position)
  local isOPlayersPos = false
  local isMobPos = false 
  -- Players
  for _, player in pairs(ui.room.players) do
    if (player.roomPos == position) then
      isOPlayersPos = true
    end
  end
  --
  -- Mobs
  for _, mob in pairs(ui.room.mobs) do
    if (mob.roomPos == position) then
      isMobPos = true
    end
  end
  --
  --
  if (isPlayerPos) and (isMobPos) and (isOPlayersPos) then -- Player, others players anc mob(s)
    return cPOpM
  elseif (isPlayerPos) and (isMobPos) then                -- Player anc mob(s)
    return cPM
  elseif (isPlayerPos) and (isOPlayersPos) then            -- Player and others players
    return cPOp
  elseif (isPlayerPos) then                               -- Player only
    return cP
  elseif (isOPlayersPos) and (isMobPos) then               -- others players anc mob(s)
    return cOpM
  elseif (isMobPos) then                                  -- Mob(s) only
    return cM
  elseif (isOPlayersPos) then                              -- Others players only
    return cOp
  else
    return "&lt;DimGrey&gt;"..position.."&lt;r&gt;"                   -- Others ??
  end
end
--
function ui.fDrawRoomLine(line)
  local position = ""
  --
  -- Line 1
  if (line == 1) then
    position = ui.fDrawRoomPosition(7).."  "..ui.fDrawRoomPosition(8).."  "..ui.fDrawRoomPosition(9)
  --
  -- Line 2
  elseif (line == 2) then
    position = ui.fDrawRoomPosition(4).."  "..ui.fDrawRoomPosition(5).."  "..ui.fDrawRoomPosition(6)
  --
  -- Line 3
  elseif (line == 3) then
    position = ui.fDrawRoomPosition(1).."  "..ui.fDrawRoomPosition(2).."  "..ui.fDrawRoomPosition(3)
  --
  else
    position = "X  X  X"
  end
  --
  return position
end
--
function ui.fGetToken(exits, exit)
  local token = ""
  --
  exit = string.lower(exit)
  if (ui.validExit[exit]) then
    if (table.contains(exits, exit)) then
      --
      -- From direction
      if (table.contains(ui.origins, ui.validExit[exit].short)) then
        token = ui.validExit[exit].color..ui.validExit[exit].tokenFrom.."&lt;r&gt;"
      --
      -- Normal exit
      else
        token = ui.validExit[exit].color..ui.validExit[exit].token.."&lt;r&gt;"
      end
    --
    -- No exit
    elseif (ui.validExit[exit]) then
      token = ui.validExit[exit].tokenAbsent
    end
  end
  --
  return token
end
--
function ui.fNextTrack(id)
  id = tonumber(id)
  --
  -- On SpeedWalk
  if (table.contains(ui.speedwalk.path, id)) and (ui.speedwalk.path[#ui.speedwalk.path] ~= id) then
   for i in ipairs(ui.speedwalk.path) do
     if (ui.speedwalk.path[i] == id) then
       while (ui.speedwalk.path[i] == id) do
         i = i + 1;
       end
       return ui.speedwalk.path[i]
     end
   end
  end
  --
  return -1;
end
--
local function getExitNumber(exits, number)
  local n = 0
  local exitOrder = { [1] = "up", [2] = "north", [3] = "west", [4] = "east", [5] = "south", [6] = "down" }
  --
  for i=1, 6 do
    if (exits[exitOrder[i]] ~= nil) then
      n = n + 1;
    end
    --
    if (n == number) then
      local ret
      if (exits[exitOrder[i]] == ui.fNextTrack(ui.room.id)) then
        ret = "&lt;b&gt;&lt;white&gt;("..ui.validExit[exitOrder[i]].color..ui.validExit[exitOrder[i]].token.."&lt;white&gt;) "
      else
        ret = " "..ui.validExit[exitOrder[i]].color..ui.validExit[exitOrder[i]].token.."&lt;r&gt; "
      end
      ret = ret..ui.fConvertColorString(getRoomName(exits[exitOrder[i]]) or "???").."&lt;r&gt;"
      
      return ret
    end
  end
  return "";
end
--
function ui.fUpdateRoom()
  local token
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateRoom()")
  --
  if (gmcp) and (gmcp.room) and (gmcp.room.info) then
    local trackText = "&lt;red&gt;[&lt;orange&gt;T&lt;red&gt;]&lt;r&gt;"
    --
    clearWindow("GUI.Room.Main.Console")
    --  
    ui.previous.room = {}
    ui.previous.room = table.deepcopy(ui.room) or {}
    ui.previous.room.exits = ui.previous.room.exits or {}
    ui.previous.room.otherExits = ui.previous.room.otherExits or {}
    --
    ui.room = {
      id      = -1,
      name    = "",
      area    = "",
      subArea = "",
      terrain = "",
      isOnMap = false,
      mobs = {},
      exits = {},
      otherExits = {},  
      objects = {},
      players = {},
    }
    --
    ui.room.id      = tonumber(gmcp.room.info.num) or ui.room.id
    ui.room.name    = ui.fConvertColorString(gmcp.room.info.name or "") or ui.room.name
    ui.room.area    = ui.fConvertColorString(gmcp.room.info.zone or "") or ui.room.area
    ui.room.subArea = ui.fConvertColorString(gmcp.room.info.subzone or "") or ui.room.subArea
    ui.room.terrain = ui.fConvertColorString(gmcp.room.info.terrain or "") or ui.room.terrain
    ui.room.isOnMap = gmcp.room.info.isOnMap or ui.room.isOnMap
    ui.room.areaId = getAreaTable()[string.trim(ui.room.area)]
    --
    -- ui.player.roomPos = ui.player.roomPos or 5
    --
    -- Origins
    if (ui.room.id ~= ui.previous.room.id) then
      ui.origins = {}
      --
      -- origins from previous exits
      for exit, id in pairs(ui.previous.room.exits) do
        if (ui.room.id == id) then
          table.insert(ui.origins, ui.validExit[exit].reverse)
        end
      end
      --
      -- origins from previous special exits
      for exit, id in pairs(ui.previous.room.otherExits) do
        if (ui.room.id == id) then
          table.insert(ui.origins, exit)
        end
      end
    end
    --
    --  Exits and Other exits
    if (gmcp.room.info.exits) then
      for exit in pairs(gmcp.room.info.exits) do
        exit = string.lower(exit)
        if (gmcp.room.info.exits[exit] &gt; 0) and (gmcp.room.info.exits[exit] ~= ui.room.id) then
          if (ui.validExit[exit]) then
            ui.room.exits[exit] = tonumber(gmcp.room.info.exits[exit])
          else
            ui.room.otherExits[exit] = tonumber(gmcp.room.info.exits[exit])
          end
        end
      end
    end
    --
    --  Mobs and Players
    if (gmcp.room.info.characters) then
      for _, character in pairs(gmcp.room.info.characters) do
        --
        -- Player
        if (character.player) then
          local name = character.level.."_"..character.desc
          if (ui.room.players[name]) then
            ui.room.players[name].counter = ui.room.players[name].counter + 1 
          else
            ui.room.players[name] = {}
            ui.room.players[name].desc = character.desc;
            ui.room.players[name].level = ui.fdigitNumber(character.level);
            ui.room.players[name].roomPos = character.roomPos;
            ui.room.players[name].counter = 1;
          end
        --
        -- Mob
        else
          local name = character.level.."_"..character.desc.."_"..character.key
          if (ui.room.mobs[name]) then
            ui.room.mobs[name].counter = ui.room.mobs[name].counter + 1 
          else
            ui.room.mobs[name] = {}
            ui.room.mobs[name].desc = character.desc;
            ui.room.mobs[name].key = character.key;
            ui.room.mobs[name].level = ui.fdigitNumber(character.level);
            ui.room.mobs[name].roomPos = character.roomPos;
            ui.room.mobs[name].counter = 1;
          end
        end   
      end
    end
    --
    -- Objects
    if (gmcp.room.info.objects) then
      for _, object in pairs(gmcp.room.info.objects) do
        local name = object.desc.."_"..object.key;
        if (ui.room.objects[name]) then
          ui.room.objects[name].counter = ui.room.objects[name].counter + 1 
        else
          ui.room.objects[name] = {}
          if (object.desc == "") then
            ui.room.objects[name].desc = "["..object.key.."]";
          else
            ui.room.objects[name].desc = object.desc;
          end
          ui.room.objects[name].key = object.key;
          ui.room.objects[name].counter = 1;
        end   
      end
    end    
    --
    if (ui.room.isOnMap) then
      --
      -- Outland
      GUI.Room.Main.Console:cecho("                        "..ui.room.name.."&lt;r&gt;\n")
      GUI.Room.Main.Console:cecho("      ┌       ┐\n")
      GUI.Room.Main.Console:cecho("       "..ui.fDrawRoomLine(1).."\n")
      GUI.Room.Main.Console:cecho("       "..ui.fDrawRoomLine(2).."\n")
      GUI.Room.Main.Console:cecho("       "..ui.fDrawRoomLine(3).."\n")
      GUI.Room.Main.Console:cecho("      └       ┘\n\n")
      --
      GUI.Mapper.Main.Mapper:hide();
      GUI.Mapper.Main.Overland:show();
    else
      --
      -- Mapper
      local showId = false;
      local whiteSpace = ""
      local fw, fh = calcFontSize("GUI.Room.Main.Console")
      local maxChar = math.floor(GUI.Room.Main.Console:get_width() / fw)
      local exitId = {}
      local str = ""
      --
      if (showId) then
        whiteSpace = "     "
        exitId = { 
          u = ui.fAddSpace(""..(   ui.room.exits["up"] or whiteSpace), 5, 'l'), 
          n = ui.fAddSpace(""..(ui.room.exits["north"] or whiteSpace), 5, 'c'),
          w = ui.fAddSpace(""..( ui.room.exits["west"] or whiteSpace), 5, 'r'),
          e = ui.fAddSpace(""..( ui.room.exits["east"] or whiteSpace), 5, 'l'),
          s = ui.fAddSpace(""..(ui.room.exits["south"] or whiteSpace), 5, 'c'),
          d = ui.fAddSpace(""..( ui.room.exits["down"] or whiteSpace), 5, 'r') }
      else
        whiteSpace = ""
        exitId = { u = whiteSpace, n = whiteSpace, w = whiteSpace, e = whiteSpace, s = whiteSpace, d = whiteSpace }
      end
      --
      -- Player icon or track direction
      local icon = cP
      if (ui.track) and (ui.track ~= "") then
        icon = ui.validExit[ui.track].token
      end
      --
      if (ui.speedwalk.path[#ui.speedwalk.path] == ui.room.id) then
        str = "&lt;white&gt;&lt;b&gt;(&lt;r&gt;"..icon.."&lt;white&gt;&lt;b&gt;)&lt;r&gt; &lt;cyan&gt;&lt;b&gt;"..ui.room.name.."&lt;r&gt;";
      else
        str = "&lt;white&gt;"..icon.."&lt;r&gt; &lt;cyan&gt;"..ui.room.name.."&lt;r&gt;";
      end
      --
      if (showId) then
        str = str.." &lt;ansiMagenta&gt;#&lt;white&gt;"..ui.room.id.."&lt;r&gt;";
      end
      GUI.Room.Main.Console:cecho(str.."\n")          
      --
      --
      GUI.Room.Main.Console:cecho(" "..whiteSpace.."   "..exitId["n"].."   "..exitId["u"].."\n")          
      GUI.Room.Main.Console:cecho(" "..whiteSpace.." ┌───"..ui.fGetToken(ui.room.exits, "north").."───"..ui.fGetToken(ui.room.exits, "up").." "..whiteSpace.." "..getExitNumber(ui.room.exits, 1).."\n");
      GUI.Room.Main.Console:cecho(" "..whiteSpace.." │"..ui.fDrawRoomLine(1).."│ "..whiteSpace.." "..getExitNumber(ui.room.exits, 2).."\n");
      GUI.Room.Main.Console:cecho(" "..exitId["w"].." "..ui.fGetToken(ui.room.exits, "west")..ui.fDrawRoomLine(2)..ui.fGetToken(ui.room.exits, "east").." "..exitId["e"].." "..getExitNumber(ui.room.exits, 3).."\n");
      GUI.Room.Main.Console:cecho(" "..whiteSpace.." │"..ui.fDrawRoomLine(3).."│ "..whiteSpace.." "..getExitNumber(ui.room.exits, 4).."\n");
      GUI.Room.Main.Console:cecho(" "..whiteSpace.." "..ui.fGetToken(ui.room.exits, "down").."───"..ui.fGetToken(ui.room.exits, "south").."───┘ "..whiteSpace.." "..getExitNumber(ui.room.exits, 5).."\n");
      GUI.Room.Main.Console:cecho(" "..exitId["d"].."   "..exitId["s"].."         "..getExitNumber(ui.room.exits, 6).."\n");
      --
      GUI.Mapper.Main.Mapper:show();
      GUI.Mapper.Main.Overland:hide();
    end
    --
    -- Other exits
    if (table.size(ui.room.otherExits) &gt; 0) then
      for otherExit, idOtherExit in pairs(ui.room.otherExits) do
        otherExit = string.gsub(otherExit, "(%a)([%w_']*)", ui.fTitleCase)
        -- Next step in path
        if (ui.fNextTrack(ui.room.id) == idOtherExit) then
          GUI.Room.Main.Console:cechoLink("&lt;b&gt;&lt;white&gt;(&lt;r&gt;"..cPo.."&lt;b&gt;&lt;white&gt;)"..
                                          " &lt;orange&gt;"..otherExit.."&lt;r&gt;", [[expandAlias("ent ]]..otherExit..[[")]], "Entra in '"..otherExit.."'", true)
          GUI.Room.Main.Console:cecho(" &lt;b&gt;"..ui.fConvertColorString(getRoomName(idOtherExit) or "???").."&lt;r&gt;\n")
        else
          GUI.Room.Main.Console:cechoLink(cPo..
                                          " &lt;orange&gt;"..otherExit.."&lt;r&gt;", [[expandAlias("ent ]]..otherExit..[[")]], "Entra in '"..otherExit.."'", true)
          GUI.Room.Main.Console:cecho(" "..ui.fConvertColorString(getRoomName(idOtherExit) or "???").."\n")
        end
      end
      GUI.Room.Main.Console:echo("\n")
    end
    --
    -- Room name
    GUI.Room:setTitle(ui.room.area.." - "..ui.room.terrain)
    --  
    local function fGetCounter(counter)
      if (counter) and (tonumber(counter) &gt; 1) then
        return counter;
      end
      return '-'
    end
    --
    -- Objects
    if (table.size(ui.room.objects) &gt; 0) then
      for _, object in pairs(ui.room.objects) do
        if (object.counter == 1) then
          GUI.Room.Main.Console:cecho(cO..
                                      " &lt;i&gt;"..ui.fConvertColorString(object.desc).."&lt;r&gt;\n")
        else
          GUI.Room.Main.Console:cecho(cO..
                                      " &lt;ansiMagenta&gt;[&lt;white&gt;"..fGetCounter(object.counter).."&lt;ansiMagenta&gt;]&lt;r&gt;"..
                                      " &lt;i&gt;"..ui.fConvertColorString(object.desc).."&lt;r&gt;\n")
        end
      end
    end
    --
    -- Group
    if (table.size(ui.group) &gt; 0) then
      for _, member in pairs(ui.group) do
        -- between Charapter
        if (table.size(ui.room.players) &gt; 0) then
          for _, player in pairs(ui.room.players) do
            if (member.name == player.desc) then
              GUI.Room.Main.Console:cecho(cG..
                                          " "..ui.fConvertColorString(player.desc)..
                                          " [&lt;cyan&gt;Liv&lt;r&gt; &lt;white&gt;"..ui.fdigitNumber(player.level).."&lt;r&gt;]\n")
              player.counter = player.counter - 1
              break
            end
          end
        end
        -- between mobs
        if (table.size(ui.room.mobs) &gt; 0) then
          for _, mob in pairs(ui.room.mobs) do
            if (member.name == mob.desc) then
              GUI.Room.Main.Console:cecho(cG..
                                          " "..ui.fConvertColorString(mob.desc)..
                                          " [&lt;cyan&gt;Liv&lt;r&gt; &lt;"..ui.fLevelColor(mob.level, ui.player.level).."&gt;"..ui.fdigitNumber(mob.level).."&lt;r&gt;]\n")
              mob.counter = mob.counter - 1
              break
            end
          end
        end
      end
    end
    --
    -- Charapter
    if (table.size(ui.room.players) &gt; 0) then
      for _, player in pairs(ui.room.players) do
        if (player.counter &gt; 0) then
          if (player.counter == 1) then
            GUI.Room.Main.Console:cecho(cOp..
                                        " "..ui.fConvertColorString(player.desc)..
                                        " [&lt;cyan&gt;Liv&lt;r&gt; &lt;white&gt;"..ui.fdigitNumber(player.level).."&lt;r&gt;]\n")
          else
            GUI.Room.Main.Console:cecho(cOp..
                                        " &lt;ansiMagenta&gt;[&lt;white&gt;"..fGetCounter(player.counter).."&lt;ansiMagenta&gt;]&lt;r&gt;"..
                                        " "..ui.fConvertColorString(player.desc)..
                                        " [&lt;cyan&gt;Liv&lt;r&gt; &lt;white&gt;"..ui.fdigitNumber(player.level).."&lt;r&gt;]\n")
          end
        end
      end
    end  
    --
    -- Mobs
    if (table.size(ui.room.mobs) &gt; 0) then
      for _, mob in pairs(ui.room.mobs) do
        if (mob.counter &gt; 0) then
          if (mob.counter == 1) then
            GUI.Room.Main.Console:cecho(cM..
                                        " &lt;b&gt;"..ui.fConvertColorString(mob.desc).."&lt;r&gt;"..
                                        " [&lt;cyan&gt;Liv&lt;r&gt; &lt;"..ui.fLevelColor(mob.level, ui.player.level).."&gt;"..ui.fdigitNumber(mob.level).."&lt;r&gt;]\n")
          else
            GUI.Room.Main.Console:cecho(cM..
                                        " &lt;ansiMagenta&gt;[&lt;white&gt;"..fGetCounter(mob.counter).."&lt;ansiMagenta&gt;]&lt;r&gt;"..
                                        " &lt;b&gt;"..ui.fConvertColorString(mob.desc).."&lt;r&gt;"..
                                        " [&lt;cyan&gt;Liv&lt;r&gt; &lt;"..ui.fLevelColor(mob.level, ui.player.level).."&gt;"..ui.fdigitNumber(mob.level).."&lt;r&gt;]\n")
          end
        end
      end
    end
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Settings</name>
				<packageName></packageName>
				<script>--
function ui.fGetSettingNameFormattedText(setting)
  return ui.colors.settingName..setting.."&lt;r&gt;"
end
--
--
function ui.fInitDataDirectory()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitDataDirectory()")
  --
  if (ui.fFolderExists(ui.files.data.path)) then
    ui.fEchon("&lt;orange&gt; - Cartella &lt;white&gt;dati&lt;orange&gt; inizializzata correttamente.")
    return true
  elseif (lfs.mkdir(ui.files.data.path)) then
    ui.fEchon("&lt;orange&gt; - Cartella &lt;white&gt;dati&lt;orange&gt; creata correttamente.")
    return true
  else
    ui.fEchon("&lt;red&gt; - Impossibile caricare la cartella &lt;white&gt;dati&lt;red&gt;.")
  end
  return false
end
--
--
function ui.fInitSettings()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitSettings()")
  --
  if (ui.fFolderExists(ui.files.settings.path)) then
    ui.fEchon("&lt;orange&gt; - Cartella "..ui.colors.settingName.."settings&lt;orange&gt; inizializzata correttamente.&lt;r&gt;")
    return true
  elseif (lfs.mkdir(ui.files.settings.path)) then
    ui.fEchon("&lt;orange&gt; - Cartella "..ui.colors.settingName.."settings&lt;orange&gt; creata correttamente.&lt;r&gt;")
    return true
  else
    ui.fEchon("&lt;red&gt; - Impossibile caricare la cartella "..ui.colors.settingName.."Settings&lt;red&gt;.&lt;r&gt;")
  end
  return false
end
--
-- Get saved settings  list
function ui.fGetSettingsList()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fGetSettingsList()")
  --
  local settings = {}
  ui.setting = ui.setting or ""
  --
  -- Overcome saved settings version (for retro-compatibility)
  local settingsDir = getMudletHomeDir().."/../../profilesLeu/"
  if (ui.fFolderExists(settingsDir)) then
    for s in lfs.dir(settingsDir) do
      if (s ~= ".") and (s ~= "..") and (ui.fFolderExists(settingsDir..s)) then
        local index = #settings+1 
        settings[index] = {}
        settings[index].setting = s
        settings[index].profile = "profilesLeu"
        settings[index].path = settingsDir..s.."/"
        settings[index].overcome = true          
      end
    end
  end 
  --
  local mudletProfileDir = getMudletHomeDir().."/../"
  if (ui.fFolderExists(mudletProfileDir)) then
    for p in lfs.dir(mudletProfileDir) do
      if (p ~= ".") and (p ~= "..") and (ui.fFolderExists(mudletProfileDir..p)) then
        --
        -- Actual overcome settings version (for retro-compatibility)
        settingsDir = mudletProfileDir..p.."/Lumen et Umbra UI/"
        if (ui.fFolderExists(settingsDir)) then
          local index = #settings+1 
          settings[index] = {}
          settings[index].setting = "&lt;senza nome&gt;"
          settings[index].profile = p
          settings[index].path = settingsDir
          settings[index].overcome = true          
        end
        --
        -- Actual settings version
        settingsDir = mudletProfileDir..p.."/LeU_UI.data/settings/"
        if (ui.fFolderExists(settingsDir)) then
          for s in lfs.dir(settingsDir) do
            if (s ~= ".") and (s ~= "..") and (ui.fFolderExists(settingsDir..s)) then
              local index = #settings+1 
              settings[index] = {}
              settings[index].setting = s
              settings[index].profile = p
              settings[index].path = settingsDir..s.."/"
              if (p == getProfileName()) and (s == ui.setting) then
                settings[index].actual = true
              end
            end
          end
        end
        --
      end
    end
  end
  --
  return settings
end
--
-- List all aliases
function ui.fShowAllSettings()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllSettings()")
  --
  local settings = ui.fGetSettingsList()
  local n = 0
  --
  cecho(ui.fTitle("Settings"))
  for s in ui.fOrderedPairs(settings) do
    n = n + 1
    cecho(ui.fGetNumberFormattedText(n).." "..ui.fGetSettingNameFormattedText(settings[s].setting).." in &lt;yellow&gt;"..settings[s].profile.."&lt;r&gt;")
    if (settings[s].overcome) then
      cecho(" &lt;orange&gt;(overcame)&lt;r&gt;")
    end
    if (settings[s].actual) then
      cecho(" &lt;cyan&gt;(attuale)&lt;r&gt;")
    end
    cecho("\n")
  end
  --
  if (n&gt;0) then
    echo("\n")
  else
    cecho("Non ci sono settings.\n\n")
  end
end
--
function ui.fContainSetting(settings, profile, setting)
  for _, s in pairs(settings) do
    if (s.profile == profile) and (s.setting == setting) then
      return s.path
    end
  end
  --
  return nil;
end
--
function ui.fLoadLocalSetting(setting)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fLoadLocalSetting()")
  --
  local path = ui.fContainSetting(ui.fGetSettingsList(), getProfileName(), setting)
  --
  if (path) then
    --
    -- Init structures
    ui.initStructures()
    ui.setting = setting
    --
    -- Load variables
    ui.fReadFileVariables()
    --
    -- Load targets
    ui.fReadFileTargets()
    --
    -- Load Aliases
    ui.fReadFileAliases()
    --
    -- Load Highlights
    ui.fReadFileHighlights()
    --
    return true
  end
  --
  return nil
end
--
function ui.fRemoveSetting(number)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveSetting("..(number or "nil")..")")
  --
  local settings = ui.fGetSettingsList()
  number = tonumber(number or 0)
  --
  if (number &gt; 0) and (number &lt;= #settings) and (settings[number]) and (not settings[number].actual) then
    ui.fDeleteDirectory(settings[number].path)
    --
    return true
  end
  --
  return nil
end
--
function ui.fImportSetting(number)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fImportSetting("..(number or "nil")..")")
  --
  local settings = ui.fGetSettingsList()
  number = tonumber(number or 0)
  --
  if (ui.setting) and (number &gt; 0) and (number &lt;= #settings) and (settings[number]) and (not settings[number].actual) then
    ui.fCopyFile(settings[number].path..ui.files.aliases.name,    ui.files.settings.path..ui.setting.."/"..ui.files.aliases.name)
    ui.fCopyFile(settings[number].path..ui.files.highlights.name, ui.files.settings.path..ui.setting.."/"..ui.files.highlights.name)
    ui.fCopyFile(settings[number].path..ui.files.targets.name,    ui.files.settings.path..ui.setting.."/"..ui.files.targets.name)
    ui.fCopyFile(settings[number].path..ui.files.variables.name,  ui.files.settings.path..ui.setting.."/"..ui.files.variables.name)
    --
    ui.fRemoveAllHighlights()
    ui.fRemoveAllAliasButtons()
    ui.fRemoveAllKeyb()
    ui.fRemoveAllAliases()
    ui.fRemoveAllVariables()
    --
    ui.fLoadLocalSetting(ui.setting)
    --
    return true
  end
  --
  return nil
end
--
function ui.fCreateSetting(setting)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fCreateSetting()")
  --
  local path = ui.fContainSetting(ui.fGetSettingsList(), getProfileName(), setting)
  --
  if (path ~= nil) then
    ui.fDeleteDirectory(path)
  end
  --
  if (lfs.mkdir(ui.files.settings.path..setting)) then
    --
    -- Init structures
    ui.initStructures()
    ui.setting = setting
    --
    -- Load variables
    ui.fReadFileVariables()
    --
    -- Load targets
    ui.fReadFileTargets()
    --
    -- Load Aliases
    ui.fReadFileAliases()
    --
    -- Load Highlights
    ui.fReadFileHighlights()
    --
    return true
  end
  --
  return nil
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Targets</name>
				<packageName></packageName>
				<script>--
function ui.fClickTarget(sender, data)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fClickTarget("..(sender or "nil")..")")
  --
  if (sender) then
    local type, number = ui.fExpandButton(sender)
    --
    if (data.button == "LeftButton") and ((type == "g") or (type == "o")) then
      ui.fExecuteTargetButton(sender)
    --
    elseif (data.button == "RightButton") and (type == "g") then
      local clickedMember = ui.targets[sender].target
      for _, member in pairs(ui.group) do
        local name = string.gsub(member.name, "(\$c%d+)", "")
        name = ui.fRemoveArticle(name)
        if (name == clickedMember) then
          if (member.inRoomVNum) then
            expandAlias("uisearch "..member.inRoomVNum)
          end
        end
      end
    --elseif (data.button == "MidButton") and (type == "g")  then
    --  display ("MidButton")
    end
  end
end
--
function ui.fGetTargetChild(type, number)
  if (type == "g") then
    return GUI.Group.Main[type..number];
  elseif (type == "o") then
    return GUI.Opponent.Main
  elseif (type == "t") then
    return GUI.TargetButtons.Main[type..number]
  else
    return nil
  end
end
--
function ui.fGetTargetFormattedText(target, keybind)
  local str = ui.colors.target..target
  keybind = keybind or false
  --
  if (keybind) and (ui.targets[target]) and (ui.targets[target].keybId) then
    str = ui.fGetKeybFormattedText(ui.targets[target].keybind)..ui.fGetOperatorFormattedText(" » ")..str
  end
  --
  return str.."&lt;r&gt;"
end
--
function ui.fRefreshTargetButtonsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRefreshTargetButtonsWidget()")
  --
  local distance = 3; 
  local w_h = GUI.TargetButtons.Main:get_height() - distance;
  local w_w = GUI.TargetButtons.Main:get_width() -  distance;
  local h = distance + 25;
  local w = distance + 120;
  local x = 0
  local y = 0
  local r = 1
  local c = 1
  local tot_r, tot_c
  local total = 4
  --
  tot_c = math.max(1, math.min(math.floor(w_w / w), total));
  -- When working with negative numbers math.floor() returns the closest integer less than or equal to a given value
  tot_r = -math.floor(-total/tot_c);
  --
  -- Recalc w if possible
  w = w_w / tot_c
  --
  -- Recalc h if possible
  h = w_h / tot_r
  --
  for i = 1, 4 do
    if (r &gt; tot_r) then
      GUI.TargetButtons.Main["t"..i]:hide();
    else
      GUI.TargetButtons.Main["t"..i]:resize(w - distance, h - distance)
      GUI.TargetButtons.Main["t"..i]:move(distance + (c-1)*w, distance + (r-1)*h)
      GUI.TargetButtons.Main["t"..i]:show();
      --
      c = c + 1
      if (c &gt; tot_c) then
        c = 1;
        r = r + 1
      end
    end
  end
end
--
-- Refresh target button
function ui.fUpdateSingleTargetButton(button)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateSingleTargetButton("..(button or "nil")..")")
  --
  local type, number = ui.fExpandButton(button)
  local child = ui.fGetTargetChild(type, number)
  --
  if (child ~= nil) then
    button = type..number 
    if (ui.targets[button]) then
      local mod1 = ui.targets[button].mod1 or "";
      local mod2 = ui.targets[button].mod2 or "";
      local key = ui.targets[button].key or "";
      local result, keybind
      local target
      local CCS, bgColor, bgColorHover
      --
      -- Target
      if (ui.targets[button].target) and (ui.targets[button].target ~= "") then
        target = ui.targets[button].target
      else
        target = "'"..button.."'";
      end
      --
      -- Keybind
      if (mod2 ~= "") then
        result, keybind = ui.fSetKeyb(ui.targets, button, [[ui.fExecuteTargetButton("]]..button..[[")]], mod2, mod1, key)
      elseif (mod1 ~= "") then
        result, keybind = ui.fSetKeyb(ui.targets, button, [[ui.fExecuteTargetButton("]]..button..[[")]], mod1, key)
      elseif (key ~= "") then
        result, keybind = ui.fSetKeyb(ui.targets, button, [[ui.fExecuteTargetButton("]]..button..[[")]], key)
      else
        result, keybind = ui.fSetKeyb(ui.targets, button, [[ui.fExecuteTargetButton("]]..button..[[")]])
      end
      --
      if (result &lt;= 0) then
        ui.fRemoveKeyb(ui.targets[button])
      end
      --
      -- Echo
      child.keybind:echo("&lt;p align=right&gt;"..keybind.."&lt;/p&gt;")
      --
      -- CCS
      if (type == "g") then
        CCS = [[
          border-radius: 4px; 
        ]]
        bgColor      = "0, 128, 0, 0.3"
        bgColorHover = "0, 128, 0, 0.8"
      --
      elseif (type == "o") then
        CCS = [[
          border-radius: 4px; 
        ]]
        bgColor      = "150, 0, 0, 0.3"
        bgColorHover = "150, 0, 0, 0.8"
      --
      elseif (type == "t") then
        GUI.TargetButtons.Main[button]:echo("&lt;center&gt;"..target)
        CCS = GUI.CSS.Button;
        bgColor      = "75, 0, 0, 1"
        bgColorHover = "150, 0, 0, 1"
      end
      --
      if (target == ui.variables["target"]) then
        child:setStyleSheet([[
          QLabel{
            ]]..CCS..[[
            background-color: rgba(]]..bgColorHover..[[);
          }
        ]])
      else
        child:setStyleSheet([[
          QLabel{
            ]]..CCS..[[
            background-color: rgba(]]..bgColor..[[);
          }
          QLabel::hover{
            ]]..CCS..[[
            background-color: rgba(]]..bgColorHover..[[);
          }
        ]])
      end
      --
      return true
    end
  end
  --
  return false
end
-- 
-- Refresh all target button
function ui.fUpdateAllTargetButtons()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateAllTargetButtons()")
  --
  for i=0, 9 do
    if (i &gt;= 1) and (i &lt;= 4) then
      ui.fUpdateSingleTargetButton("t"..i)
    end
    ui.fUpdateSingleTargetButton("g"..i)
  end
  ui.fUpdateSingleTargetButton("o0")
  --
  ui.fRefreshTargetButtonsWidget()
  ui.fSaveFileTarges()
end
--
-- Refresh Target
function ui.fUpdateTargetButtonsTitle()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fUpdateTargetButtonsTitle()")
  --
  if (not ui.variables.target) or (ui.variables.target == "") then
    GUI.TargetButtons:setTitle("Target")
  else
    GUI.TargetButtons:setTitle("Target: "..ui.variables["target"])
  end
end
--
-- Assign Target button
function ui.fAssignTargetButton(button, value)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fAssignTargetButton("..(button or "nil")..", "..(value or "nil")..")")
  --
  local ret = 0;
  local type, number = ui.fExpandButton(button)
  --
  if (type == "g") or (type == "o") or (type == "t") then
    button = type..number
    ui.targets[button] = ui.targets[button] or {}
    ui.targets[button].target = value
    --
    return 1 -- Value assigned (can be nil)
  end
  --
  return -1 -- Invaid button
end
--
-- Execute Target button
function ui.fExecuteTargetButton(button)
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fExecuteTargetButton("..(button or "nil")..")")
  --
  local type, number = ui.fExpandButton(button)
  --
  if (type == "g") or (type == "o") or (type == "t") then
    button = type..number
    if (ui.targets[button]) and (ui.targets[button].target) then
      if (ui.variables["target"] == ui.targets[button].target) then
        ui.variables["target"] = ""
        ui.fEcho2n(ui.fGetTargetFormattedText(button)..ui.fGetOperatorFormattedText(" » ").."nessun "..ui.fGetVarNameFormattedText("target").." selezionato")
      else
        ui.variables["target"] = ui.targets[button].target
        ui.fEcho2n(ui.fGetTargetFormattedText(button)..ui.fGetOperatorFormattedText(" » ")..ui.fGetVarNameFormattedText("target").." impostato su "..ui.fGetVarValueFormattedText(ui.variables.target).."&lt;r&gt;.")
      end
      ui.fUpdateTargetButtonsTitle()
    elseif (type == "g") then
      ui.fEcho2n("Nessun componente del gruppo da associare a "..ui.fGetTargetFormattedText(button)..".")
    elseif (type == "o") then
      ui.fEcho2n("Nessun avversario ingaggiato da associare a "..ui.fGetTargetFormattedText(button)..".")
    elseif (type == "t") then
      ui.fEcho2n(ui.fGetTargetFormattedText(button).." non configurato. Usare il comanto "..ui.fGetCommandFormattedText(button.." &lt;testo&gt;").." per configurare.")
    end
    -- Save target
    ui.fUpdateAllTargetButtons()
    ui.fSaveFileVariables()
    -- ui.fUpdateOpponent()
  else
    ui.fEcho2n(ui.fGetTargetFormattedText(button).." pulsante non valido.")
  end
end
--
-- Save buttons data from file
function ui.fSaveFileTarges()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSaveFileTarges()")
  --
  if (ui.setting) then
    local file = ui.files.targets.path..ui.setting.."/"..ui.files.targets.name
    local targetsDataToSave = {}
    --
    for button in pairs(ui.targets) do
      targetsDataToSave[button] = {}
      targetsDataToSave[button].target = ui.targets[button].target
      targetsDataToSave[button].mod1 = ui.targets[button].mod1
      targetsDataToSave[button].mod2 = ui.targets[button].mod2
      targetsDataToSave[button].key = ui.targets[button].key
    end
    table.save(file, targetsDataToSave)
  end
end
--
-- Read Targets data from file
function ui.fReadFileTargets()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileTargets()")
  --
  if (ui.setting) then
    --
    local file = ui.files.targets.path..ui.setting.."/"..ui.files.targets.name
    --
    -- Pre defined target buttons
    local pre_defined_target_buttons = {
      g0 = { mod1 = "CTRL", mod2 = "", key = "F10" },
      g1 = { mod1 = "CTRL", mod2 = "", key = "F1" },
      g2 = { mod1 = "CTRL", mod2 = "", key = "F2" },
      g3 = { mod1 = "CTRL", mod2 = "", key = "F3" },
      g4 = { mod1 = "CTRL", mod2 = "", key = "F4" },
      g5 = { mod1 = "CTRL", mod2 = "", key = "F5" },
      g6 = { mod1 = "CTRL", mod2 = "", key = "F6" },
      g7 = { mod1 = "CTRL", mod2 = "", key = "F7" },
      g8 = { mod1 = "CTRL", mod2 = "", key = "F8" },
      g9 = { mod1 = "CTRL", mod2 = "", key = "F9" },
      --
      o0 = { mod1 = "CTRL", mod2 = "", key = "0" },
      --
      t1 = { mod1 = "CTRL", mod2 = "", key = "1" },
      t2 = { mod1 = "CTRL", mod2 = "", key = "2" },
      t3 = { mod1 = "CTRL", mod2 = "", key = "3" },
      t4 = { mod1 = "CTRL", mod2 = "", key = "4" },
    }
    --
    -- Remove actual Targets
    ui.targets = {}
    --
    -- Load Targets
    if (io.exists(file)) then
      table.load(file, ui.targets)
    else
      -- Update only if file targets not exist otherwise it would reassign any removed keys
      ui.targets = table.update(pre_defined_target_buttons, ui.targets)
    end
    --
    -- Save
    table.save(file, ui.targets)
  end
 end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Variables</name>
				<packageName></packageName>
				<script>--
function ui.fGetPreDefinitedVariables()
  return {
    target = "",
  }
end
--
function ui.fGetVarNameFormattedText(varName)
  return ui.colors.varID..ui.varID..ui.colors.varName..varName.."&lt;r&gt;"
end
--
function ui.fGetVarValueFormattedText(varValue)
  return ui.colors.varCont..tostring(varValue)
end
--
function ui.fGetVarFormattedText(variable)
  if (ui.variables[variable]) then
    if (ui.variables[variable] == "") then
      return ui.fGetVarNameFormattedText(variable)
    end
    --
    return ui.fGetVarNameFormattedText(variable)..ui.fGetOperatorFormattedText("=")..ui.fGetVarValueFormattedText(ui.variables[variable])
  end
  --
  return ""
end
--
function ui.fRemoveAllVariables()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fRemoveAllVariables()")
  --
  ui.variables = {}
  ui.variables = table.deepcopy(ui.fGetPreDefinitedVariables())
end
--
function ui.fShowAllVar()
  local app = {}
  local idx = 0
  --
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fShowAllVar()")
  --
  cecho(ui.fTitle("Variabili predefinite"))
  for variable in pairs(ui.variables) do
    if (ui.variables[variable]) and (ui.fGetPreDefinitedVariables()[variable]) then
      idx = idx + 1
      cecho(ui.fGetNumberFormattedText(idx).." "..ui.fGetVarNameFormattedText(variable))
      if (ui.variables[variable]  ~= "") then
        cecho(ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.variables[variable]))
      end
      cecho("\n")
    end
  end
  --
  cecho(ui.fTitle("Variabili"))
  idx = 0
  for variable in pairs(ui.variables) do
    if (ui.variables[variable]) and (ui.fGetPreDefinitedVariables()[variable] == nil) then
      idx = idx + 1
      cecho(ui.fGetNumberFormattedText(idx).." ")
      cechoLink(ui.cLink("X"), [[expandAlias("uiv ]]..variable..[[ remove]]..getCommandSeparator()..[[uiv")]], "Rimuovi la variabile '"..variable.."'", true)
      checho(" "..ui.fGetVarNameFormattedText(variable))
      if (ui.variables[variable]  ~= "") then
        cecho(ui.fGetOperatorFormattedText(" = ")..ui.fGetVarValueFormattedText(ui.variables[variable]))
      end
      cecho("\n")
    end
  end
  --
  if (idx &gt; 0) then
    echo("\n")
  else
    cecho("Per maggiori info "..ui.fGetCommandFormattedText("uihelp uivariables").."\n\n")
  end
end
--
-- Save Variables data to file
function ui.fSaveFileVariables()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fSaveFileVariables()")
  --
  if (ui.setting) then
    local file = ui.files.variables.path..ui.setting.."/"..ui.files.variables.name
    -- Save
    table.save(file, ui.variables)
  end
end
--
-- Read Variables data from file
function ui.fReadFileVariables()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fReadFileVariables()")
  --
  if (ui.setting) then
    --
    local file = ui.files.variables.path..ui.setting.."/"..ui.files.variables.name
    --
    -- Remove actual Variables
    ui.variables = {}
    --
    -- Load Variables
    if (io.exists(file)) then
      table.load(file, ui.variables)
    end
    --
    -- Merge pre defined variables
    ui.variables = table.update(ui.fGetPreDefinitedVariables(), ui.variables)
    --
    -- Save
    table.save(file, ui.variables)
  end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Graphic elements</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Affects Widget</name>
				<packageName></packageName>
				<script>function ui.fInitAffectsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitAffectsWidget()")
  --
  -- Affects
  GUI.Affects = Adjustable.Container:new2({
    name = "GUI.Affects",
    x = -730,
    y = 340,
    width = 200,
    height = 300,
    titleText ="Effetti",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Affects:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Affects, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Affects, ui.parameters.widgets.affects.transparent)
  --
  -- Button "Hide"
  GUI.Affects.Button_hide = Geyser.Label:new2({
    name = "GUI.Affects.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Affects)
  GUI.Affects.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Affects.Button_hide:setFontSize(5)
  GUI.Affects.Button_hide:echo(ui.transparentID);
  GUI.Affects.Button_hide:setClickCallback(function() 
                                                   local mode = ui.parameters.widgets.affects.transparent or false;
                                                   ui.fSetBorderMode(GUI.Affects, not mode)
                                                   ui.parameters.widgets.affects.transparent = not mode;
                                                   ui.fSaveFileParameters()
                                                end)
  GUI.Affects.Button_hide:setToolTip("Transparent", 10)
  --
  -- 20x Affects
  local i
  for i=1, 20 do
    local col = (i-1) % 10;
    local row = (i&lt;=10)and(0)or(1)
    --
    GUI.Affects.Main["Affect"..i] = Geyser.Label:new2({
      name = "GUI.Affects.Main.Affect"..i,
      x = 30*col,
      y = 30*row,
      width = 100,
      height = 26,
    }, GUI.Affects.Main)
    GUI.Affects.Main["Affect"..i]:setStyleSheet(GUI.CSS.Item);
    --
    -- Duration
    GUI.Affects.Main["Affect"..i].duration = Geyser.Label:new2({
      name = "GUI.Affects.Main.Affect"..i..".duration",
      x = 2, y = 2,
      width = 26,
      height = -2,
    }, GUI.Affects.Main["Affect"..i])
    GUI.Affects.Main["Affect"..i].duration:enableClickthrough() -- for tooltip
    GUI.Affects.Main["Affect"..i].duration:setStyleSheet(GUI.CSS.ItemLeft)
    GUI.Affects.Main["Affect"..i].duration:setFontSize(7);
    --
    -- Text
    GUI.Affects.Main["Affect"..i].text = Geyser.Label:new2({
      name = "GUI.Affects.Main.Affect"..i..".text",
      x = 28,
      y = 2,
      width = -28,
      height = -2,
    }, GUI.Affects.Main["Affect"..i])
    GUI.Affects.Main["Affect"..i].text:enableClickthrough() -- for tooltip
    GUI.Affects.Main["Affect"..i].text:setStyleSheet(GUI.CSS.ItemText)
    GUI.Affects.Main["Affect"..i].text:setFontSize(7);
    --
    -- Dispel Resistance
    GUI.Affects.Main["Affect"..i].dispelResistance = Geyser.Label:new2({
      name = "GUI.Affects.Main.Affect"..i..".dispelResistance",
      x = -28,
      y = 2,
      width = 26,
      height = "50%-2",
    }, GUI.Affects.Main["Affect"..i])
    GUI.Affects.Main["Affect"..i].dispelResistance:enableClickthrough() -- for tooltip
    GUI.Affects.Main["Affect"..i].dispelResistance:setStyleSheet(GUI.CSS.ItemTopRight)
    GUI.Affects.Main["Affect"..i].dispelResistance:setFgColor("cyan")
    GUI.Affects.Main["Affect"..i].dispelResistance:setFontSize(7);
    --
    -- Stacks
    GUI.Affects.Main["Affect"..i].stacks = Geyser.Label:new2({
      name = "GUI.Affects.Main.Affect"..i..".stacks",
      x = -28, y = "50%",
      width = 26,
      height = "50%-2",
    }, GUI.Affects.Main["Affect"..i])
    GUI.Affects.Main["Affect"..i].stacks:enableClickthrough() -- for tooltip
    GUI.Affects.Main["Affect"..i].stacks:setStyleSheet(GUI.CSS.ItemBottomRight)
    GUI.Affects.Main["Affect"..i].stacks:setFgColor("orange")
    GUI.Affects.Main["Affect"..i].stacks:setFontSize(7);
    --
    GUI.Affects.Main["Affect"..i]:hide()
  end
  --
  -- Wrapping function
  local Minimize = GUI.Affects.minimize
  local Restore = GUI.Affects.restore
  local Resize = GUI.Affects.resize
  --
  function GUI.Affects:minimize(...)
    local ret = Minimize(GUI.Affects)
    GUI.Affects.Main:hide()
    return ret
  end
  --
  function GUI.Affects:restore(...)
    local ret = Restore(GUI.Affects)
    GUI.Affects.Main:show()
    return ret
  end
  --
  function GUI.Affects:resize(...)
    local ret = Resize(GUI.Affects, ...)
    ui.fUpdateAffects()
    return ret
  end
  --
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Alias Buttons Widget</name>
				<packageName></packageName>
				<script>function ui.fInitAliasButtonsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitAliasButtonsWidget()")
  --
  -- Alias buttons 
  GUI.AliasButtons = Adjustable.Container:new2({
    name = "GUI.AliasButtons",
    attached = "right",
    x = -500,
    y = "87%",
    width = 500,
    height = "13%",
    titleText ="Pulsanti alias",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.AliasButtons:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.AliasButtons, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.AliasButtons, ui.parameters.widgets.aliasButton.transparent)
  --
  -- Button "Hide"
  GUI.AliasButtons.Button_hide = Geyser.Label:new2({
    name = "GUI.AliasButtons.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.AliasButtons)
  GUI.AliasButtons.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.AliasButtons.Button_hide:setFontSize(5)
  GUI.AliasButtons.Button_hide:echo(ui.transparentID);
  GUI.AliasButtons.Button_hide:setClickCallback(function() 
                                                   local mode = ui.parameters.widgets.aliasButton.transparent or false;
                                                   ui.fSetBorderMode(GUI.AliasButtons, not mode)
                                                   ui.parameters.widgets.aliasButton.transparent = not mode;
                                                   ui.fSaveFileParameters()
                                                end)
  GUI.AliasButtons.Button_hide:setToolTip("Transparent", 10)
  --
  -- Button "A"
  GUI.AliasButtons.Button_a = Geyser.Label:new2({
    name = "GUI.AliasButtons.Button_a",
    x = -106, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.AliasButtons)
  GUI.AliasButtons.Button_a:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.AliasButtons.Button_a:setFontSize(6)
  GUI.AliasButtons.Button_a:echo("&lt;center&gt;a");
  GUI.AliasButtons.Button_a:setClickCallback("ui.fOptionButton", "a")
  --
  -- Button "B"
  GUI.AliasButtons.Button_b = Geyser.Label:new2({
    name = "GUI.AliasButtons.Button_b",
    x = -91, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.AliasButtons)
  GUI.AliasButtons.Button_b:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.AliasButtons.Button_b:setFontSize(6)
  GUI.AliasButtons.Button_b:echo("&lt;center&gt;b");
  GUI.AliasButtons.Button_b:setClickCallback("ui.fOptionButton", "b")
  --
  -- Button "C"
  GUI.AliasButtons.Button_c = Geyser.Label:new2({
    name = "GUI.AliasButtons.Button_c",
    x = -76, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.AliasButtons)
  GUI.AliasButtons.Button_c:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.AliasButtons.Button_c:setFontSize(6)
  GUI.AliasButtons.Button_c:echo("&lt;center&gt;c");
  GUI.AliasButtons.Button_c:setClickCallback("ui.fOptionButton", "c")
  --
  -- Buttons
  for order=1,10 do
    local i = order % 10
    --
    -- Name
    GUI.AliasButtons.Main["Button"..i] = Geyser.Label:new2({
      name = "GUI.AliasButtons.Main.Button"..i,
      x = (10*i).."%", 
      y = 0,
      width = "10%",
      height = "100%",
    },GUI.AliasButtons.Main)
    GUI.AliasButtons.Main["Button"..i]:setClickCallback("ui.fClickAliasButton", i, nil)
    --
    -- Icon
    GUI.AliasButtons.Main["Button"..i].icon = Geyser.Label:new2({
      name = "GUI.AliasButtons.Main.Button"..i..".icon",
      x = 5, y = 5,
      width = -5,
      height = -5,
    }, GUI.AliasButtons.Main["Button"..i])
    GUI.AliasButtons.Main["Button"..i].icon:enableClickthrough()
    GUI.AliasButtons.Main["Button"..i].icon:setFgColor("violet")
    GUI.AliasButtons.Main["Button"..i].icon:setFontSize(9)
    --
    -- Index
    GUI.AliasButtons.Main["Button"..i].index = Geyser.Label:new2({
      name = "GUI.AliasButtons.Main.Button"..i..".index",
      x = 5, 
      y = 1,
      width = "15",
      height = "15",
    }, GUI.AliasButtons.Main["Button"..i])
    GUI.AliasButtons.Main["Button"..i].index:enableClickthrough()
    GUI.AliasButtons.Main["Button"..i].index:setFontSize(ui.parameters.widgets.keybind.fontSize)
    GUI.AliasButtons.Main["Button"..i].index:setStyleSheet(GUI.CSS.Keybind);
    GUI.AliasButtons.Main["Button"..i].index:echo("")
    --
    -- Keybid
    GUI.AliasButtons.Main["Button"..i].keybind = Geyser.Label:new2({
      name = "GUI.AliasButtons.Main.Button"..i..".keybind",
      x = 5, 
      y = -15,
      width = -10,
      height = 15,
    }, GUI.AliasButtons.Main["Button"..i])
    GUI.AliasButtons.Main["Button"..i].keybind:enableClickthrough()
    GUI.AliasButtons.Main["Button"..i].keybind:setStyleSheet(GUI.CSS.Keybind);
    GUI.AliasButtons.Main["Button"..i].keybind:setFontSize(ui.parameters.widgets.keybind.fontSize);
  end
  --
  -- Wrapping function
  local Minimize = GUI.AliasButtons.minimize
  local Restore = GUI.AliasButtons.restore
  local Resize = GUI.AliasButtons.resize
  --
  function GUI.AliasButtons:minimize(...)
    local ret = Minimize(GUI.AliasButtons)
    GUI.AliasButtons.Main:hide()
    return ret
  end
  --
  function GUI.AliasButtons:restore(...)
    local ret = Restore(GUI.AliasButtons)
    GUI.AliasButtons.Main:show()
    return ret
  end
  --
  function GUI.AliasButtons:resize(...)
    local ret = Resize(GUI.AliasButtons, ...)
    ui.fUpdateAliasButton()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Chat Widget</name>
				<packageName></packageName>
				<script>function ui.fInitChatWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitChatWidget()")
  --
  -- Private messages
  GUI.Chat = Adjustable.Container:new2({
    name = "GUI.Chat",
    attached = "left",
    x = 0,
    y = 0,
    width = 300,
    height = "55%",
    titleText ="Canale privato",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Chat:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Chat, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Button "Split"
  GUI.Chat.Button_split = Geyser.Label:new2({
    name = "GUI.Chat.Button_split",
    x = -75, 
    y = 4,
    width = 40,
    height = 12,
  },GUI.Chat)
  GUI.Chat.Button_split:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Chat.Button_split:setFontSize(6)
  GUI.Chat.Button_split:echo("&lt;center&gt;Split");
  GUI.Chat.Button_split:setClickCallback("ui.fChatSplitClicked")
  --
  -- Console "All"
  GUI.Chat.Main.All = Geyser.MiniConsole:new2({
    name = 'GUI.Chat.Main.All',
    x=0,
    y=0,
    width = "100%", 
    height = "100%",
    autoWrap = true,
    scrollBar = true,
  }, GUI.Chat.Main)
  GUI.Chat.Main.All:setColor(30, 24, 24)
  GUI.Chat.Main.All:setBgColor(30, 24, 24)
  GUI.Chat.Main.All:setFontSize(ui.parameters.widgets.chat.fontSize)
  --
  -- Header "Private"
  GUI.Chat.Main.PrivateHeader = Geyser.Label:new2(
  {
    name = "GUI.Chat.Main.PrivateHeader",
    x = 0, 
    y = 0,
    width = "100%", 
    height = 20,
  }, GUI.Chat.Main)
  GUI.Chat.Main.PrivateHeader:setStyleSheet(GUI.CSS.ChatHeader)
  GUI.Chat.Main.PrivateHeader:echo("[-] Private")
  GUI.Chat.Main.PrivateHeader:setClickCallback(ui.fClickHandler, "Private")
  --
  -- Console "Private"
  GUI.Chat.Main.Private = Geyser.MiniConsole:new2({
    name = 'GUI.Chat.Main.Private',
    x=0,
    y=0,
    width = "100%", 
    height = "100%",
    autoWrap = true,
    scrollBar = true,
  }, GUI.Chat.Main)
  GUI.Chat.Main.Private:setColor(30, 24, 24)
  GUI.Chat.Main.Private:setBgColor(30, 24, 24)
  GUI.Chat.Main.Private:setFontSize(ui.parameters.widgets.chat.fontSize)
  --
  -- Header "Public"
  GUI.Chat.Main.PublicHeader = Geyser.Label:new2(
  {
    name = "GUI.Chat.Main.PublicHeader",
    x = 0, 
    y = 0,
    width = "100%", 
    height = 20,
  }, GUI.Chat.Main)
  GUI.Chat.Main.PublicHeader:setStyleSheet(GUI.CSS.ChatHeader)
  GUI.Chat.Main.PublicHeader:echo("[-] Public")
  GUI.Chat.Main.PublicHeader:setClickCallback(ui.fClickHandler, "Public")
  --
  -- Console "Public"
  GUI.Chat.Main.Public = Geyser.MiniConsole:new2({
    name = 'GUI.Chat.Main.Public',
    x=0,
    y=0,
    width = "100%", 
    height = "100%",
    autoWrap = true,
    scrollBar = true,
  }, GUI.Chat.Main)
  GUI.Chat.Main.Public:setColor(30, 24, 24)
  GUI.Chat.Main.Public:setBgColor(30, 24, 24)
  GUI.Chat.Main.Public:setFontSize(ui.parameters.widgets.chat.fontSize)
  --
  -- Wrapping function
  local Minimize = GUI.Chat.minimize
  local Restore = GUI.Chat.restore
  --
  function GUI.Chat:minimize(...)
    local ret = Minimize(GUI.Chat)
    GUI.Chat.Main:hide()
    return ret
  end
  --
  function GUI.Chat:restore(...)
    local ret = Restore(GUI.Chat)
    GUI.Chat.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Cooldowns Widget</name>
				<packageName></packageName>
				<script>function ui.fInitCooldownsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitCooldownsWidget()")
  --
  -- Equip
  GUI.Cooldowns = Adjustable.Container:new2({
    name = "GUI.Cooldowns",
    x = 300,
    y = 0,
    width = 500,
    height = 100,
    titleText ="Cooldowns",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Cooldowns:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Cooldowns, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Cooldowns, ui.parameters.widgets.cooldowns.transparent)
  --
  -- Button "Hide"
  GUI.Cooldowns.Button_hide = Geyser.Label:new2({
    name = "GUI.Cooldowns.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Cooldowns)
  GUI.Cooldowns.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Cooldowns.Button_hide:setFontSize(5)
  GUI.Cooldowns.Button_hide:echo(ui.transparentID);
  GUI.Cooldowns.Button_hide:setClickCallback(function() 
                                            local mode = ui.parameters.widgets.cooldowns.transparent or false;
                                            ui.fSetBorderMode(GUI.Cooldowns, not mode)
                                            ui.parameters.widgets.cooldowns.transparent = not mode;
                                            ui.fSaveFileParameters()
                                          end)
  GUI.Cooldowns.Button_hide:setToolTip("Transparent", 10)
  --
  -- 10x Slot
  for i=1, 10 do
    GUI.Cooldowns.Main["Item"..i] = Geyser.Gauge:new2({
      name = "GUI.Cooldowns.Main.Item"..i,
      x = 5,
      y = 5,
      width = 100,
      height = 10,
    },GUI.Cooldowns.Main)
    GUI.Player.Main.Health:setValue(0, 100)
    --
  GUI.Cooldowns.Main["Item"..i].back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: DimGrey;
  ]])
  --
  GUI.Cooldowns.Main["Item"..i].front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: DarkSlateGrey;
  ]])
    --GUI.Cooldowns.Main["Item"..i].back:setStyleSheet(GUI.CSS.GaugeBack..[[
    --  background-color: rgba(150, 0, 0, 0.5);
    --]])
    --
    --GUI.Cooldowns.Main["Item"..i].front:setStyleSheet(GUI.CSS.GaugeFront..[[
    --  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ee0000, stop: 0.65 #990000, stop: 1 #bb0000);
    --]])
    --
    GUI.Cooldowns.Main["Item"..i]:echo("Item"..i)
    --
    GUI.Cooldowns.Main["Item"..i]:hide()
  end
  --
  -- Wrapping function
  local Minimize = GUI.Cooldowns.minimize
  local Restore = GUI.Cooldowns.restore
  local Resize = GUI.Cooldowns.resize
  --
  function GUI.Cooldowns:minimize(...)
    local ret = Minimize(GUI.Cooldowns)
    GUI.Cooldowns.Main:hide()
    return ret
  end
  --
  function GUI.Cooldowns:restore(...)
    local ret = Restore(GUI.Cooldowns)
    GUI.Cooldowns.Main:show()
    return ret
  end
  --
  function GUI.Cooldowns:resize(...)
    local ret = Resize(GUI.Cooldowns, ...)
    ui.fUpdateCooldowns()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Endowment Widget</name>
				<packageName></packageName>
				<script>function ui.fInitEndowmentWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitEndowmentWidget()")
  --
  -- Equip
  GUI.Endowment = Adjustable.Container:new2({
    name = "GUI.Endowment",
    attached = "right",
    x = -500,
    y = "58%",
    width = 500,
    height = "29%",
    titleText ="Equipaggiamento",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Endowment:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Endowment, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Endowment, ui.parameters.widgets.endowment.transparent)
  --
  -- Button "Hide"
  GUI.Endowment.Button_hide = Geyser.Label:new2({
    name = "GUI.Endowment.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Endowment)
  GUI.Endowment.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Endowment.Button_hide:setFontSize(5)
  GUI.Endowment.Button_hide:echo(ui.transparentID);
  GUI.Endowment.Button_hide:setClickCallback(function() 
                                            local mode = ui.parameters.widgets.endowment.transparent or false;
                                            ui.fSetBorderMode(GUI.Endowment, not mode)
                                            ui.parameters.widgets.endowment.transparent = not mode;
                                            ui.fSaveFileParameters()
                                          end)
  GUI.Endowment.Button_hide:setToolTip("Transparent", 10)
  --
  -- Button "Refresh"
  GUI.Endowment.Button_refresh = Geyser.Label:new2({
    name = "GUI.Endowment.Button_refresh",
    x = -89, 
    y = 4,
    width = 40,
    height = 12,
  },GUI.Endowment)
  GUI.Endowment.Button_refresh:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Endowment.Button_refresh:setFontSize(6)
  GUI.Endowment.Button_refresh:setClickCallback("ui.fEndowmentTypeClicked")
  if (ui.parameters.widgets.endowment.type == "name") then
    GUI.Endowment.Button_refresh:echo("&lt;center&gt;Name");
  else
    GUI.Endowment.Button_refresh:echo("&lt;center&gt;Slot");
  end  --
  -- 25x Slot
  for i=1, 25 do
    --
    GUI.Endowment.Main["Item"..i] = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i,
      width = 100,
      height = 26,
    }, GUI.Endowment.Main)
    GUI.Endowment.Main["Item"..i]:setStyleSheet(GUI.CSS.Item);
    --
    -- Index
    GUI.Endowment.Main["Item"..i].Index = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i..".Index",
      x = 2,
      y = 2,
      width = 30,
      height = "50%-2",
    }, GUI.Endowment.Main["Item"..i])
    GUI.Endowment.Main["Item"..i].Index:enableClickthrough() -- for tooltip
    GUI.Endowment.Main["Item"..i].Index:setStyleSheet(GUI.CSS.ItemTopLeft)
    GUI.Endowment.Main["Item"..i].Index:setFgColor("white")
    GUI.Endowment.Main["Item"..i].Index:setFontSize(7);
    --
    -- Slot
    GUI.Endowment.Main["Item"..i].Slot = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i..".Slot",
      x = 2,
      y = "50%",
      width = 30,
      height = "50%-2",
    }, GUI.Endowment.Main["Item"..i])
    GUI.Endowment.Main["Item"..i].Slot:enableClickthrough() -- for tooltip
    GUI.Endowment.Main["Item"..i].Slot:setStyleSheet(GUI.CSS.ItemBottomLeft)
    GUI.Endowment.Main["Item"..i].Slot:setFgColor("orange")
    GUI.Endowment.Main["Item"..i].Slot:setFontSize(7);
    --
    -- Text
    GUI.Endowment.Main["Item"..i].Text = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i..".Text",
      x = 32,
      y = 2,
      width = -32,
      height = -2,
    }, GUI.Endowment.Main["Item"..i])
    GUI.Endowment.Main["Item"..i].Text:enableClickthrough() -- for tooltip
    GUI.Endowment.Main["Item"..i].Text:setStyleSheet(GUI.CSS.ItemText)
    GUI.Endowment.Main["Item"..i].Text:setFontSize(7);
    GUI.Endowment.Main["Item"..i].Text:setFgColor("black")
    --
    -- Level
    GUI.Endowment.Main["Item"..i].Level = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i..".Level",
      x = -32,
      y = 2,
      width = 30,
      height = "50%-2",
    }, GUI.Endowment.Main["Item"..i])
    GUI.Endowment.Main["Item"..i].Level:enableClickthrough() -- for tooltip
    GUI.Endowment.Main["Item"..i].Level:setStyleSheet(GUI.CSS.ItemTopRight)
    GUI.Endowment.Main["Item"..i].Level:setFgColor("LimeGreen")
    GUI.Endowment.Main["Item"..i].Level:setFontSize(7);
    --
    -- Status
    GUI.Endowment.Main["Item"..i].Status = Geyser.Label:new2({
      name = "GUI.Endowment.Main.Item"..i..".Status",
      x = -32,
      y = "50%",
      width = 30,
      height = "50%-2",
    }, GUI.Endowment.Main["Item"..i])
    GUI.Endowment.Main["Item"..i].Status:enableClickthrough() -- for tooltip
    GUI.Endowment.Main["Item"..i].Status:setStyleSheet(GUI.CSS.ItemBottomRight)
    GUI.Endowment.Main["Item"..i].Status:setFgColor("orange")
    GUI.Endowment.Main["Item"..i].Status:setFontSize(7);
    --
    GUI.Endowment.Main["Item"..i]:hide()
  end
  --
  -- Wrapping function
  local Minimize = GUI.Endowment.minimize
  local Restore = GUI.Endowment.restore
  local Resize = GUI.Endowment.resize
  --
  function GUI.Endowment:minimize(...)
    local ret = Minimize(GUI.Endowment)
    GUI.Endowment.Main:hide()
    return ret
  end
  --
  function GUI.Endowment:restore(...)
    local ret = Restore(GUI.Endowment)
    GUI.Endowment.Main:show()
    return ret
  end
  --
  function GUI.Endowment:resize(...)
    local ret = Resize(GUI.Endowment, ...)
    ui.fUpdateEndowment()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Group Widget</name>
				<packageName></packageName>
				<script>function ui.fInitGroupWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitGroupWidget()")
  --
  -- Group Members
  GUI.Group = Adjustable.Container:new2({
    name = "GUI.Group",
    x = -730,
    y = 20,
    width = 200,
    height = 300,
    titleText ="Gruppo",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Group:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Group, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Group, ui.parameters.widgets.group.transparent)
  --
  -- Button "Hide"
  GUI.Group.Button_hide = Geyser.Label:new2({
    name = "GUI.Group.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Group)
  GUI.Group.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Group.Button_hide:setFontSize(5)
  GUI.Group.Button_hide:echo(ui.transparentID);
  GUI.Group.Button_hide:setClickCallback(function() 
                                                   local mode = ui.parameters.widgets.group.transparent or false;
                                                   ui.fSetBorderMode(GUI.Group, not mode)
                                                   ui.parameters.widgets.group.transparent = not mode;
                                                   ui.fSaveFileParameters()
                                                end)
  GUI.Group.Button_hide:setToolTip("Transparent", 10)
  --
  -- Members
  for i=1, 10 do
    local mod = i % 10
    --
    -- Member
    GUI.Group.Main["g"..mod] = Geyser.Label:new2({
      name = "GUI.Group.Main.g"..mod
    }, GUI.Group.Main)
    GUI.Group.Main["g"..mod]:setClickCallback("ui.fClickTarget", "g"..mod)
    --
    -- Index
    GUI.Group.Main["g"..mod].index = Geyser.Label:new2({
      name = "GUI.Group.Main.g"..mod..".index",
      x = 2, 
      y = 0,
      width = 20,
      height = 10,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].index:enableClickthrough()
    GUI.Group.Main["g"..mod].index:setStyleSheet(GUI.CSS.Keybind);
    GUI.Group.Main["g"..mod].index:setFontSize(ui.parameters.widgets.keybind.fontSize)
    GUI.Group.Main["g"..mod].index:echo("g"..mod.."")
    --
    -- Member
    GUI.Group.Main["g"..mod].Member = Geyser.Label:new2({
      name = "GUI.Group.Main.g"..mod..".Member",
      x = 22, 
      y = 0,
      width = "100%-44",
      height = 10,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].Member:enableClickthrough()
    GUI.Group.Main["g"..mod].Member:setStyleSheet(GUI.CSS.Keybind);
    GUI.Group.Main["g"..mod].Member:setFontSize(7)
    GUI.Group.Main["g"..mod].Member:echo("")
    --
    -- Member Health Gauges
    GUI.Group.Main["g"..mod].Health = Geyser.Gauge:new2({
      name = "GUI.Group.Main.g"..mod..".Health",
      x = 2,
      y = 11,
      width = -2,
      height = 18,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].Health:setValue(0, 100)
    GUI.Group.Main["g"..mod].Health:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Health.back:setStyleSheet(GUI.CSS.GaugeBack..[[
      background-color: rgba(0, 0, 0, 0.3);
    ]])
    GUI.Group.Main["g"..mod].Health.back:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Health.front:setStyleSheet(GUI.CSS.GaugeFront..[[
      background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ee0000, stop: 0.65 #990000, stop: 1 #bb0000);
    ]])
    GUI.Group.Main["g"..mod].Health.front:enableClickthrough()
    --
    -- Member Mana Gauges
    GUI.Group.Main["g"..mod].Mana = Geyser.Gauge:new2({
      name = "GUI.Group.Main.g"..mod..".Mana",
      x = 2,
      y = 30,
      width = "50%-3",
      height = 5,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].Mana:setValue(0, 100)
    GUI.Group.Main["g"..mod].Mana:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Mana.back:setStyleSheet(GUI.CSS.GaugeBack..[[
      background-color: rgba(0, 0, 250, .3);
      border-radius: 2px;
    ]])
    GUI.Group.Main["g"..mod].Mana.back:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Mana.front:setStyleSheet(GUI.CSS.GaugeFront..[[
      background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0000ee, stop: 0.65 #000099, stop: 1 #0000bb);
      border-radius: 1px;
    ]])
    GUI.Group.Main["g"..mod].Mana.front:enableClickthrough()
    --
    -- Member Stamina Gauges
    GUI.Group.Main["g"..mod].Stamina = Geyser.Gauge:new2({
      name = "GUI.g"..mod..".Stamina",
      x = "50%+1",
      y = 30,
      width = -2,
      height = 5,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].Stamina:setValue(0, 100)
    GUI.Group.Main["g"..mod].Stamina:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Stamina.back:setStyleSheet(GUI.CSS.GaugeBack..[[
      background-color: rgba(204, 85, 0, .2);
      border-radius: 2px;
    ]])
    GUI.Group.Main["g"..mod].Stamina.back:enableClickthrough()
    --
    GUI.Group.Main["g"..mod].Stamina.front:setStyleSheet(GUI.CSS.GaugeFront..[[
      background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa500, stop: 0.65 #e86100, stop: 1 #ff8c00);
      border-radius: 1px;
    ]])
    GUI.Group.Main["g"..mod].Stamina.front:enableClickthrough()
    --
    -- inRoomName
    GUI.Group.Main["g"..mod].inRoomName = Geyser.Label:new2({
      name = "GUI.Group.Main.g"..mod..".inRoomName",
      x = 2,
      y = -12,
      width = -10,
      height = 12,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].inRoomName:enableClickthrough()
    GUI.Group.Main["g"..mod].inRoomName:setStyleSheet(GUI.CSS.Keybind);
    GUI.Group.Main["g"..mod].inRoomName:setFontSize(ui.parameters.widgets.keybind.fontSize);
    GUI.Group.Main["g"..mod].inRoomName:setFgColor("yellow");
    GUI.Group.Main["g"..mod].inRoomName:echo("--")
    --
    -- Keybid
    GUI.Group.Main["g"..mod].keybind = Geyser.Label:new2({
      name = "GUI.Group.Main.g"..mod..".keybind",
      x = 30,
      y = -12,
      width = -10,
      height = 12,
    }, GUI.Group.Main["g"..mod])
    GUI.Group.Main["g"..mod].keybind:enableClickthrough()
    GUI.Group.Main["g"..mod].keybind:setStyleSheet(GUI.CSS.Keybind);
    GUI.Group.Main["g"..mod].keybind:setFontSize(ui.parameters.widgets.keybind.fontSize);
    GUI.Group.Main["g"..mod].keybind:echo("keybind")
  end
  --
  -- Wrapping function
  local Minimize = GUI.Group.minimize
  local Restore = GUI.Group.restore
  local Resize = GUI.Group.resize
  --
  function GUI.Group:minimize(...)
    local ret = Minimize(GUI.Group)
    GUI.Group.Main:hide()
    return ret
  end
  --
  function GUI.Group:restore(...)
    local ret = Restore(GUI.Group)
    GUI.Group.Main:show()
    return ret
  end
  --
  function GUI.Group:resize(...)
    local ret = Resize(GUI.Group, ...)
    ui.fUpdateGroup()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Help Widget</name>
				<packageName></packageName>
				<script>function ui.fInitHelpWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitHelpWidget()")
  --
  -- Public messages
  GUI.Help = Adjustable.Container:new2({
    name = "GUI.Help",
    x = 100,
    y = 100,
    width = -100,
    height = -100,
    titleText ="Lumen et Umbra UI rel. "..ui.release.." - Help",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Help:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Help, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Console
  GUI.Help.Main.Console = Geyser.MiniConsole:new2({
    name = 'GUI.Help.Main.Console',
    x=0,
    y=0,
    width = "100%", 
    height = "100%",
    autoWrap = true,
    scrollBar = true,
  }, GUI.Help.Main)
  GUI.Help.Main.Console:setColor(30, 24, 24)
  GUI.Help.Main.Console:setBgColor(30, 24, 24)
  GUI.Help.Main.Console:setFontSize(ui.parameters.widgets.help.fontSize)
  --
  -- Wrapping function
  local Minimize = GUI.Help.minimize
  local Restore = GUI.Help.restore
  --
  function GUI.Help:minimize(...)
    local ret = Minimize(GUI.Help)
    GUI.Help.Main:hide()
    return ret
  end
  --
  function GUI.Help:restore(...)
    local ret = Restore(GUI.Help)
    GUI.Help.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Mapper Widget</name>
				<packageName></packageName>
				<script>function ui.fInitMapperWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitMapperWidget()")
  --
  -- Public messages
  GUI.Mapper = Adjustable.Container:new2({
    name = "GUI.Mapper",
    attached = "right",
    x = -500,
    y = 0,
    width = 500,
    height = "29%",
    titleText ="Mapper",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Mapper:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Mapper, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Mapper
  GUI.Mapper.Main.Mapper = Geyser.Mapper:new2({
    name = 'GUI.Mapper.Main.Mapper',
    x=0,
    y=0,
    width = "100%", 
    height = "100%",
  }, GUI.Mapper.Main)
  --
  -- Overland
  GUI.Mapper.Main.Overland = Geyser.MiniConsole:new2({ 
    name = 'GUI.Mapper.Main.Overland',
    x=0,
    y=0,
    width = "100%", 
    height = "100%", 
    autoWrap = false,
    scrollBar = false,
  }, GUI.Mapper.Main)
  GUI.Mapper.Main.Overland:setColor(0,0,0)
  GUI.Mapper.Main.Overland:setBgColor(0,0,0)
  GUI.Mapper.Main.Overland:setFontSize(ui.parameters.widgets.overland.fontSize)
  GUI.Mapper.Main.Overland:hide()
  --
  -- Wrapping function
  local Minimize = GUI.Mapper.minimize
  local Restore = GUI.Mapper.restore
  --
  function GUI.Mapper:minimize(...)
    local ret = Minimize(GUI.Mapper)
    GUI.Mapper.Main:hide()
    return ret
  end
  --
  function GUI.Mapper:restore(...)
    local ret = Restore(GUI.Mapper)
    GUI.Mapper.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Opponent Widget</name>
				<packageName></packageName>
				<script>function ui.fInitOpponentWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitOpponentWidget()")
  --
  -- Opponent
  GUI.Opponent = Adjustable.Container:new2({
    name = "GUI.Opponent",
    attached = "left",
    x = 0,
    y = "70%",
    width = 300,
    height = "10%",
    titleText = "Avversario",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  });
  GUI.Opponent:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Opponent, GUI.CSS.Border, GUI.CSS.Main)
  GUI.Opponent.Main:disableClickthrough()
  GUI.Opponent.Main:setClickCallback("ui.fExecuteTargetButton", "o0", nil)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Opponent, ui.parameters.widgets.opponent.transparent)
  --
  -- Button "Hide"
  GUI.Opponent.Button_hide = Geyser.Label:new2({
    name = "GUI.Opponent.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Opponent)
  GUI.Opponent.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Opponent.Button_hide:setFontSize(5)
  GUI.Opponent.Button_hide:echo(ui.transparentID);
  GUI.Opponent.Button_hide:setClickCallback(function() 
                                                   local mode = ui.parameters.widgets.opponent.transparent or false;
                                                   ui.fSetBorderMode(GUI.Opponent, not mode)
                                                   ui.parameters.widgets.opponent.transparent = not mode;
                                                   ui.fSaveFileParameters()
                                                end)
  GUI.Opponent.Button_hide:setToolTip("Transparent", 10)
  --
  -- Opponent Level
  GUI.Opponent.Level = Geyser.Label:new2({
    name = "GUI.Opponent.Level",
    x = -74,
    y = "0%-3",
    width = 25,
    height = 25,
    fontSize = 8,
  }, GUI.Opponent)
  GUI.Opponent.Level:setStyleSheet(GUI.CSS.Level);
  GUI.Opponent.Level:enableClickthrough()
  --
  -- Opponent Health Gauges
  GUI.Opponent.Main.Health = Geyser.Gauge:new2({
    name = "GUI.Opponent.Main.Health",
    x = 2,
    y = 2,
    width = -2,
    height = -10,
  },GUI.Opponent.Main)
  GUI.Opponent.Main.Health:setValue(0, 100)
  GUI.Opponent.Main.Health:enableClickthrough()
  --
  GUI.Opponent.Main.Health.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(0, 0, 0, 0.3);
  ]]);
  GUI.Opponent.Main.Health.back:enableClickthrough()
  --
  GUI.Opponent.Main.Health.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ee0000, stop: 0.65 #990000, stop: 1 #bb0000);
  ]])
  GUI.Opponent.Main.Health.front:enableClickthrough()
  --
  -- Health difference
  GUI.Opponent.Main.Health.dif = Geyser.Label:new2({
    name = "GUI.Opponent.Main.Health.dif",
    x = 0,
    y = 0,
    width = "10",
    height = "10",
  }, GUI.Opponent.Main)
  GUI.Opponent.Main.Health.dif:enableClickthrough()
  GUI.Opponent.Main.Health.dif:setFontSize(5)
  GUI.Opponent.Main.Health.dif:hide()
  --
  -- Keybid
  GUI.Opponent.Main.keybind = Geyser.Label:new2({
    name = "GUI.Opponent.Main.keybind",
    x = 5, y = -10,
    width = -5,
    height = 10,
  }, GUI.Opponent.Main)
  GUI.Opponent.Main.keybind:enableClickthrough()
  GUI.Opponent.Main.keybind:setStyleSheet(GUI.CSS.Keybind);
  GUI.Opponent.Main.keybind:setFontSize(ui.parameters.widgets.keybind.fontSize);
  --
  -- Wrapping function
  local Minimize = GUI.Opponent.minimize
  local Restore = GUI.Opponent.restore
  --
  function GUI.Opponent:minimize(...)
    local ret = Minimize(GUI.Opponent)
    GUI.Opponent.Main:hide()
    return ret
  end
  --
  function GUI.Opponent:restore(...)
    local ret = Restore(GUI.Opponent)
    GUI.Opponent.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Player Widget</name>
				<packageName></packageName>
				<script>function ui.fInitPlayerWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitPlayerWidget()")
  --
  -- Player 
  GUI.Player = Adjustable.Container:new2({
    name = "GUI.Player",
    attached = "left",
    x = 0,
    y = "80%",
    width = 300,
    height = "20%",
    titleText ="Player",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Player:changeMenuStyle("dark")
  --
  -- Border and Main
  ui.fAddMain(GUI.Player, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.Player, ui.parameters.widgets.player.transparent)
  --
  -- Level
  GUI.Player.Level = Geyser.Label:new2({
    name = "GUI.Player.Level",
    x = -74,
    y = "0%-3",
    width = 25,
    height = 25,
    fontSize = 8,
  }, GUI.Player)
  GUI.Player.Level:setStyleSheet(GUI.CSS.Level);
  GUI.Player.Level:enableClickthrough()
  --
  -- Button "Hide"
  GUI.Player.Button_hide = Geyser.Label:new2({
    name = "GUI.Player.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.Player)
  GUI.Player.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.Player.Button_hide:setFontSize(5)
  GUI.Player.Button_hide:echo(ui.transparentID);
  GUI.Player.Button_hide:setClickCallback(function() 
                                            local mode = ui.parameters.widgets.player.transparent or false;
                                            ui.fSetBorderMode(GUI.Player, not mode)
                                            ui.parameters.widgets.player.transparent = not mode;
                                            ui.fSaveFileParameters()
                                          end)
  GUI.Player.Button_hide:setToolTip("Transparent", 10)
  --
  -- Tick 
  GUI.Player.Main.Tick = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Tick",
    x = 2, 
    y = 0,
    width = -2,
    height = 5,
  },GUI.Player.Main)
  GUI.Player.Main.Tick:setValue(0, 75)
  --
  GUI.Player.Main.Tick.front:echo("")
  --
  GUI.Player.Main.Tick.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  ]])
  --
  GUI.Player.Main.Tick.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: grey;
    border-radius: 1px;
  ]])
  --
  -- Tick value
  GUI.Player.Main.TickLabel = Geyser.Label:new2({
    name = "GUI.Player.Main.TickLabel",
    x = -15,
    y = "0%-2",
    width = 10,
    height = 10,
    fontSize = 6,
  }, GUI.Player.Main)
  GUI.Player.Main.TickLabel:setStyleSheet([[background: transparent;]]);
  GUI.Player.Main.TickLabel:enableClickthrough()
  GUI.Player.Main.TickLabel:echo("&lt;p align=right&gt;??&lt;/p&gt;")
  --
  -- Health
  GUI.Player.Main.Health = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Health",
    x = 2,
    y = 7,
    width = -2,
    height = "50%-14",
  },GUI.Player.Main)
  GUI.Player.Main.Health:setValue(0, 100)
  --
  GUI.Player.Main.Health.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(150, 0, 0, 0.3);
  ]])
  --
  GUI.Player.Main.Health.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ee0000, stop: 0.65 #990000, stop: 1 #bb0000);
  ]])
  GUI.Player.Main.Health.front:echo("Vita")
  --
  -- Health difference
  GUI.Player.Main.Health.dif = Geyser.Label:new2({
    name = "GUI.Player.Main.Health.dif",
    x = 0,
    y = 0,
    width = "10",
    height = "10",
  }, GUI.Player.Main)
  GUI.Player.Main.Health.dif:setFontSize(5)
  GUI.Player.Main.Health.dif:hide();
  --
  -- Health difference text
  GUI.Player.Main.Health.textDif = Geyser.Label:new2({
    name = "GUI.Player.Main.Health.textDif",
    x = 4,
    y = 9,
    width = -6,
    height = "50%-12",
    fontSize = 6,
  }, GUI.Player.Main)
  GUI.Player.Main.Health.textDif:setStyleSheet([[
      qproperty-alignment: 'AlignRight';
      background-color: rgba(0, 0, 0, 0);
    ]])
  GUI.Player.Main.Health.textDif:hide();  
  --
  -- Round
  GUI.Player.Main.Round = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Round",
    x = 2,
    y = "50%-6",
    width = -2,
    height = 5,
  }, GUI.Player.Main)
  GUI.Player.Main.Round:setValue(0, 4)
  --
  GUI.Player.Main.Round.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  ]])
  --
  GUI.Player.Main.Round.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: darkgrey;
    border-radius: 1px;
  ]])
  --
  -- Mana
  GUI.Player.Main.Mana = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Mana",
    x = 2,
    y = "50%+1",
    width = -2,
    height = "25%-5",
  },GUI.Player.Main)
  GUI.Player.Main.Mana:setValue(0, 100)
  --
  GUI.Player.Main.Mana.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(0, 100, 250, .3);
  ]])
  --
  GUI.Player.Main.Mana.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0000ee, stop: 0.65 #000099, stop: 1 #0000bb);
  ]])
  GUI.Player.Main.Mana.front:echo("Mana")
  --
  -- Energy
  GUI.Player.Main.Power = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Power",
    x = 2,
    y = "75%-2",
    width = -2,
    height = "25%-5",
  },GUI.Player.Main)
  GUI.Player.Main.Power:setValue(0, 100)
  --
  GUI.Player.Main.Power.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(204, 85, 0, .2);
  ]])
  --
  GUI.Player.Main.Power.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa500, stop: 0.65 #e86100, stop: 1 #ff8c00);
  ]])
  GUI.Player.Main.Power.front:echo("Energia")
  --
  -- Experience 
  GUI.Player.Main.Experience = Geyser.Gauge:new2({
    name = "GUI.Player.Main.Experience",
    x = 2, 
    y = -6,
    width = -2,
    height = 5,
  },GUI.Player.Main)
  GUI.Player.Main.Experience:setValue(0, 100)
  --
  GUI.Player.Main.Experience.front:echo("")
  --
  GUI.Player.Main.Experience.back:setStyleSheet(GUI.CSS.GaugeBack..[[
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  ]])
  --
  GUI.Player.Main.Experience.front:setStyleSheet(GUI.CSS.GaugeFront..[[
    background-color: purple;
    border-radius: 1px;
  ]])
  --
  -- Experience value
  GUI.Player.Main.ExperienceLabel = Geyser.Label:new2({
    name = "GUI.Player.Main.ExperienceLabel",
    x = -105,
    y = -8,
    width = 100,
    height = 10,
    fontSize = 6,
  }, GUI.Player.Main)
  GUI.Player.Main.ExperienceLabel:setStyleSheet([[background: transparent;]]);
  GUI.Player.Main.ExperienceLabel:enableClickthrough()
  GUI.Player.Main.ExperienceLabel:echo("&lt;p align=right&gt;??&lt;/p&gt;")
  --
  -- Wrapping function
  local Minimize = GUI.Player.minimize
  local Restore = GUI.Player.restore
  --
  function GUI.Player:minimize(...)
    local ret = Minimize(GUI.Player)
    GUI.Player.Main:hide()
    return ret
  end
  --
  function GUI.Player:restore(...)
    local ret = Restore(GUI.Player)
    GUI.Player.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Room Widget</name>
				<packageName></packageName>
				<script>function ui.fInitRoomWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitRoomWidget()")
  --
  -- Room
  GUI.Room = Adjustable.Container:new2({
    name = "GUI.Room",
    attached = "right",
    x = -500,
    y = "29%",
    width = 500,
    height = "29%",
    titleText ="Stanza",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.Room:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.Room, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Exits
  GUI.Room.Main.Console = Geyser.MiniConsole:new2({ 
    name = 'GUI.Room.Main.Console',
    x=0,
    y=0,
    width = "100%", 
    height = "100%", 
    autoWrap = false,
    scrollBar = false,
  }, GUI.Room.Main)
  GUI.Room.Main.Console:setColor(30, 24, 24)
  GUI.Room.Main.Console:setBgColor(30, 24, 24)
  GUI.Room.Main.Console:setFontSize(ui.parameters.widgets.room.fontSize)
  --
  -- Wrapping function
  local Minimize = GUI.Room.minimize
  local Restore = GUI.Room.restore
  --
  function GUI.Room:minimize(...)
    local ret = Minimize(GUI.Room)
    GUI.Room.Main:hide()
    return ret
  end
  --
  function GUI.Room:restore(...)
    local ret = Restore(GUI.Room)
    GUI.Room.Main:show()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Target Buttons Widget</name>
				<packageName></packageName>
				<script>function ui.fInitTargetButtonsWidget()
  ui.fDebug("[&lt;cyan&gt;call&lt;r&gt;] ui.fInitTargetButtonsWidget()")
  --
  -- Target
  GUI.TargetButtons = Adjustable.Container:new2({
    name = "GUI.TargetButtons",
    attached = "left",
    x = 0,
    y = "55%",
    width = 300,
    height = "15%",
    titleText ="Target",
    titleTxtColor = "orange",
    buttonsize = 12,
    buttonFontSize = 5,
    adjLabelstyle = GUI.CSS.Widget, 
    buttonstyle = GUI.CSS.WidgetButton,
  })
  GUI.TargetButtons:changeMenuStyle("dark")
  --
  -- Add Border and Main
  ui.fAddMain(GUI.TargetButtons, GUI.CSS.Border, GUI.CSS.Main)
  --
  -- Set transparent
  ui.fSetBorderMode(GUI.TargetButtons, ui.parameters.widgets.targets.transparent)
  --
  -- Button "Hide"
  GUI.TargetButtons.Button_hide = Geyser.Label:new2({
    name = "GUI.TargetButtons.Button_hide",
    x = -46, 
    y = 4,
    width = 12,
    height = 12,
  },GUI.TargetButtons)
  GUI.TargetButtons.Button_hide:setStyleSheet(GUI.CSS.WidgetButton);
  GUI.TargetButtons.Button_hide:setFontSize(5)
  GUI.TargetButtons.Button_hide:echo(ui.transparentID)
  GUI.TargetButtons.Button_hide:setClickCallback(function() 
                                                   local mode = ui.parameters.widgets.targets.transparent or false;
                                                   ui.fSetBorderMode(GUI.TargetButtons, not mode)
                                                   ui.parameters.widgets.targets.transparent = not mode;
                                                   ui.fSaveFileParameters()
                                                end)
  GUI.TargetButtons.Button_hide:setToolTip("Transparent", 10)
  --
  -- Target buttons
  for i=1,4 do
    GUI.TargetButtons.Main["t"..i] = Geyser.Label:new2({
      name = "GUI.TargetButtons.Main.t"..i,
      x = 0,
      y = 0,
      width = "10",
      height = "10",
    },GUI.TargetButtons.Main)
    GUI.TargetButtons.Main["t"..i]:setClickCallback("ui.fExecuteTargetButton", "t"..i, nil)
    GUI.TargetButtons.Main["t"..i]:setFontSize(9)
    GUI.TargetButtons.Main["t"..i]:setFgColor("LightGoldenrod")
    --
    -- Index
    GUI.TargetButtons.Main["t"..i].index = Geyser.Label:new2({
      name = "GUI.TargetButtons.Main.t"..i..".index",
      x = 5, 
      y = 1,
      width = "15",
      height = "15",
    }, GUI.TargetButtons.Main["t"..i])
    GUI.TargetButtons.Main["t"..i].index:enableClickthrough()
    GUI.TargetButtons.Main["t"..i].index:setFontSize(ui.parameters.widgets.keybind.fontSize)
    GUI.TargetButtons.Main["t"..i].index:setStyleSheet(GUI.CSS.Keybind);
    GUI.TargetButtons.Main["t"..i].index:echo("t"..i.."")
    --
    -- Keybid
    GUI.TargetButtons.Main["t"..i].keybind = Geyser.Label:new2({
      name = "GUI.TargetButtons.Main.t"..i..".keybind",
      x = 5, 
      y = -15,
      width = "100%-10",
      height = 15,
    }, GUI.TargetButtons.Main["t"..i])
    GUI.TargetButtons.Main["t"..i].keybind:enableClickthrough()
    GUI.TargetButtons.Main["t"..i].keybind:setStyleSheet(GUI.CSS.Keybind);
    GUI.TargetButtons.Main["t"..i].keybind:setFontSize(ui.parameters.widgets.keybind.fontSize)
  end
  --
  -- Wrapping function
  local Minimize = GUI.TargetButtons.minimize
  local Restore = GUI.TargetButtons.restore
  local Resize = GUI.TargetButtons.resize
  --
  function GUI.TargetButtons:minimize(...)
    local ret = Minimize(GUI.TargetButtons)
    GUI.TargetButtons.Main:hide()
    return ret 
  end
  --
  function GUI.TargetButtons:restore(...)
    local ret = Restore(GUI.TargetButtons)
    GUI.TargetButtons.Main:show()
    return ret
  end
  --
  function GUI.TargetButtons:resize(...)
    local ret = Resize(GUI.TargetButtons, ...)
    ui.fUpdateAllTargetButtons()
    return ret
  end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<Script isActive="yes" isFolder="no">
			<name>Init</name>
			<packageName></packageName>
			<script>--
function ui.fLogin(...)
  if (gmcp.char.base.name) then
    local newSetting = string.lower(gmcp.char.base.name)
    local loadNewProfile = false;
    --
    --ui.player.name = gmcp.char.base.name;
    if (ui.setting == nil) or (ui.setting ~= newSetting) then
      --
      -- Load existing Setting
      if (ui.fLoadLocalSetting(newSetting)) then
        ui.setting = newSetting
        --
        ui.fEchon("&lt;orange&gt; - Impostazioni per "..ui.fGetSettingNameFormattedText(newSetting).."&lt;orange&gt; caricate correttamente.")
        --
        loadNewProfile = true;
      --
      -- Create new Setting
      elseif (ui.fCreateSetting(newSetting)) then
        ui.setting = newSetting
        --
        ui.fEchon("&lt;orange&gt; - Nuova connessione. Impostazioni per "..ui.fGetSettingNameFormattedText(newSetting).."&lt;orange&gt; create correttamente.")
        --
        ui.fEcho("&lt;orange&gt; - Usa il comando ");
        cechoLink(ui.cLink("uisetting"), [[expandAlias("uisetting")]], "Esegui il comando 'uisetting'", true) 
        cecho("&lt;orange&gt; per importare le impostazioni di un profilo esistente...&lt;r&gt;\n")
        --
        loadNewProfile = true;
      else
        --
        -- Error creating Setting
        ui.fError("Impossibile caricare/creare le impostazioni per "..ui.fGetSettingNameFormattedText(newSetting)..".")
        --
        -- Kill events
        if (ui.handlers) and (ui.handlers.fUpdateGMCP_char) then
          killAnonymousEventHandler(ui.handlers.fUpdateGMCP_char)
          ui.handlers.fUpdateGMCP_char = nil
        end
        --
        if (ui.handlers) and (ui.handlers.fUpdateGMCP_room) then
          killAnonymousEventHandler(ui.handlers.fUpdateGMCP_room)
          ui.handlers.fUpdateGMCP_room = nil
        end
        --
        if (ui.handlers) and (ui.handlers.fUpdateGMCP_overland) then
          killAnonymousEventHandler(ui.handlers.fUpdateGMCP_overland)
          ui.handlers.fUpdateGMCP_overland = nil
        end
        --
        ui.setting = nil
      end
      --
      -- New Profile
      if (loadNewProfile) then
        --
        -- gmcp.char
        if (ui.handlers.fUpdateGMCP_char == nil) then
          ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Register GMCP events")
          ui.handlers.fUpdateGMCP_char  = registerAnonymousEventHandler("gmcp.char", "ui.fUpdateGMCP");
        end
        --
        -- gmcp.room
        if (ui.handlers.fUpdateGMCP_room == nil) then
          ui.handlers.fUpdateGMCP_room = registerAnonymousEventHandler("gmcp.room", "ui.fUpdateGMCP")
        end
        --
        -- gmcp.overland
        if (ui.handlers.fUpdateGMCP_overland == nil) then
          ui.handlers.fUpdateGMCP_overland = registerAnonymousEventHandler("gmcp.overland", "ui.fUpdateGMCP")
        end
        --
        -- Update all widgets
        ui.updateAllWidgets()
        --
        ui.fEcho("&lt;orange&gt; - Usa il comando ");
        cechoLink(ui.cLink("uihelp"), [[expandAlias("uihelp")]], "Esegui il comando 'uihelp'", true) 
        cecho("&lt;orange&gt; per iniziare...&lt;r&gt;\n")
      end
    end
  end
end
--
-- Connection Event
function ui.fInit()
  --
  -- Check if the generic_mapper package is installed and if so uninstall it
  if table.contains(getPackages(), "generic_mapper") then
    ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Unistall 'generic_mapper package")
    uninstallPackage("generic_mapper")
  end
  --
  -- Kill all pending events 
  ui.handlers = ui.handlers or {}
  for handler, value in pairs(ui.handlers) do
    killAnonymousEventHandler(value)
    ui.handlers[handler] = nil
  end
  --
  -- Init structures
  ui.initStructures()
  --
  --
  ui.initHelp()
  --
  --
  ui.initCSS()
  --
  -- Init DATA directory
  ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Init DATA directory")
  if (ui.fInitDataDirectory()) then
    --
    -- Init SETTINGS directory
    ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Init SETTINGS directory")
    if (ui.fInitSettings()) then
      --
      -- Load generic parameters
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Load generic parameters")
      ui.fReadFileParameters()
      --
      -- Opponent widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Opponent widget")
      ui.fInitOpponentWidget()
      --
      -- Group widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Group widget")
      ui.fInitGroupWidget()
      --
      -- Target Buttons widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Target Buttons widget")
      ui.fInitTargetButtonsWidget()
      --
      -- Chat widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Chat widget")
      ui.fInitChatWidget()
      --
      -- Player widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Player widget")
      ui.fInitPlayerWidget()
      --
      -- Alias Button widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Alias Buttons widget")
      ui.fInitAliasButtonsWidget()
      --
      -- Affects widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Affects widget")
      ui.fInitAffectsWidget()
      --
      -- Mapper widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Mapper widget")
      ui.fInitMapperWidget()
      ui.fInitMapper()
      --
      -- Map/Compass widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Room widget")
      ui.fInitRoomWidget()
      --
      -- Cooldowns
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Cooldowns widget")
      ui.fInitCooldownsWidget()
      --
      -- Endowment widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Endowment widget")
      ui.fInitEndowmentWidget()
      --
      -- Help widget
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Help widget")
      ui.fInitHelpWidget()
      --
      -- GMCP
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] setMergeTables()")
      setMergeTables("gmcp")
      --
      -- Events:
      ui.fDebug("[&lt;white&gt;init&lt;r&gt;] Register events")
      --
      -- Login
      ui.handlers.fLogin  = registerAnonymousEventHandler("gmcp.char.base", ui.fLogin);
      --
      -- Resize main window
      ui.handlers.fWindowResize = registerAnonymousEventHandler("sysWindowResizeEvent", ui.fWindowResize)
      --
      -- Map changed in mapper widget
      ui.handlers.fMapAreaChanged = registerAnonymousEventHandler("sysMapAreaChanged", ui.fMapAreaChanged)  
      --
      -- Update all widgets
      ui.updateAllWidgets()
      --
      ui.fEcho("&lt;orange&gt; - Caricamento 'Lumen et Umbra UI' (rel. "..ui.release..") completato.&lt;r&gt;\n")
      --
    else
      ui.fEcho("&lt;red&gt; - Errore caricamento cartella "..ui.fGetSettingNameFormattedText("setting").."&lt;red&gt;.&lt;r&gt;\n")
    end
    --
  else
    ui.fEcho("&lt;red&gt; - Errore caricamento cartella &lt;white&gt;dati&lt;red&gt;.&lt;r&gt;\n")
  end
  --
  ui.fDebug("[&lt;white&gt;init&lt;r&gt;] ... end UI init!")
end
--
-- Init
ui.fInit()</script>
			<eventHandlerList />
		</Script>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Keypad</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Movement (keypad)</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 1 (down)</name>
					<packageName></packageName>
					<script></script>
					<command>d</command>
					<keyCode>49</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 2 (south)</name>
					<packageName></packageName>
					<script></script>
					<command>s</command>
					<keyCode>50</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 4 (west)</name>
					<packageName></packageName>
					<script></script>
					<command>w</command>
					<keyCode>52</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 6 (east)</name>
					<packageName></packageName>
					<script></script>
					<command>e</command>
					<keyCode>54</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 8 (north)</name>
					<packageName></packageName>
					<script></script>
					<command>n</command>
					<keyCode>56</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>keypad + 9 (up)</name>
					<packageName></packageName>
					<script></script>
					<command>u</command>
					<keyCode>57</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
		</KeyGroup>
	</KeyPackage>
	<VariablePackage>
		<HiddenVariables />
		<VariableGroup>
			<name>mxp</name>
			<keyType>4</keyType>
			<value></value>
			<valueType>5</valueType>
			<VariableGroup>
				<name>send</name>
				<keyType>4</keyType>
				<value></value>
				<valueType>5</valueType>
				<VariableGroup>
					<name>actions</name>
					<keyType>4</keyType>
					<value></value>
					<valueType>5</valueType>
				</VariableGroup>
				<Variable>
					<name>href</name>
					<keyType>4</keyType>
					<value>West</value>
					<valueType>4</valueType>
				</Variable>
			</VariableGroup>
		</VariableGroup>
	</VariablePackage>
</MudletPackage>
